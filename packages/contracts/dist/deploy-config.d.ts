export interface DeployConfig {
    isForkedNetwork?: boolean;
    numDeployConfirmations?: number;
    gasPrice?: number;
    l1BlockTimeSeconds: number;
    l2BlockGasLimit: number;
    l2ChainId: number;
    ctcL2GasDiscountDivisor: number;
    ctcEnqueueGasCost: number;
    sccFaultProofWindowSeconds: number;
    sccSequencerPublishWindowSeconds: number;
    blockStaleMeasure: number;
    daFraudProofPeriod: number;
    l2SubmittedBlockNumber: number;
    bvmSequencerAddress: string;
    bvmProposerAddress: string;
    bvmRolluperAddress: string;
    bvmBlockSignerAddress: string;
    bvmFeeWalletAddress: string;
    bvmAddressManagerOwner: string;
    bvmFeeWalletOwner: string;
    bvmGasPriceOracleOwner: string;
    bvmWhitelistOwner?: string;
    dataManagerAddress: string;
    bvmEigenSequencerAddress: string;
    sccAddress: string;
    gasPriceOracleOverhead?: number;
    gasPriceOracleScalar?: number;
    gasPriceOracleDecimals?: number;
    gasPriceOracleIsBurning?: number;
    gasPriceOracleCharge?: number;
    gasPriceOracleL1BaseFee?: number;
    gasPriceOracleL2GasPrice?: number;
    hfBerlinBlock?: number;
    contractsDeployerKey: string;
    contractsRpcUrl: string;
}
export declare const getDeployConfig: (network: string) => Required<DeployConfig>;
export declare const parseDeployConfig: (config: DeployConfig) => Required<DeployConfig>;
