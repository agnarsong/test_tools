/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IVotesUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotesUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "ERC20BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BurnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20VotesUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20VotesUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IL1ChugSplashDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1ChugSplashDeployer__factory>;
    getContractFactory(
      name: "L1ChugSplashProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1ChugSplashProxy__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "BVM_EigenDataLayrChain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BVM_EigenDataLayrChain__factory>;
    getContractFactory(
      name: "BVM_EigenDataLayrFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BVM_EigenDataLayrFee__factory>;
    getContractFactory(
      name: "Delegation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Delegation__factory>;
    getContractFactory(
      name: "DelegationCallbackBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegationCallbackBase__factory>;
    getContractFactory(
      name: "DelegationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegationManager__factory>;
    getContractFactory(
      name: "DelegationManagerStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegationManagerStorage__factory>;
    getContractFactory(
      name: "DelegationShareBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegationShareBase__factory>;
    getContractFactory(
      name: "DelegationSlasher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegationSlasher__factory>;
    getContractFactory(
      name: "DelegationStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegationStorage__factory>;
    getContractFactory(
      name: "IDelegation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelegation__factory>;
    getContractFactory(
      name: "IDelegationCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelegationCallback__factory>;
    getContractFactory(
      name: "IDelegationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelegationManager__factory>;
    getContractFactory(
      name: "IDelegationShare",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelegationShare__factory>;
    getContractFactory(
      name: "IDelegationSlasher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelegationSlasher__factory>;
    getContractFactory(
      name: "WhiteList",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WhiteList__factory>;
    getContractFactory(
      name: "AddressDictator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressDictator__factory>;
    getContractFactory(
      name: "ChugSplashDictator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChugSplashDictator__factory>;
    getContractFactory(
      name: "AssertionMap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssertionMap__factory>;
    getContractFactory(
      name: "Challenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Challenge__factory>;
    getContractFactory(
      name: "IChallenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChallenge__factory>;
    getContractFactory(
      name: "IRollup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRollup__factory>;
    getContractFactory(
      name: "Rollup",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Rollup__factory>;
    getContractFactory(
      name: "RollupBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RollupBase__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "IVerifierEntry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifierEntry__factory>;
    getContractFactory(
      name: "BlockFinalizationVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockFinalizationVerifier__factory>;
    getContractFactory(
      name: "BlockInitiationVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockInitiationVerifier__factory>;
    getContractFactory(
      name: "CallOpVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallOpVerifier__factory>;
    getContractFactory(
      name: "EnvironmentalOpVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnvironmentalOpVerifier__factory>;
    getContractFactory(
      name: "InterTxVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterTxVerifier__factory>;
    getContractFactory(
      name: "InvalidOpVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InvalidOpVerifier__factory>;
    getContractFactory(
      name: "StackOpVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StackOpVerifier__factory>;
    getContractFactory(
      name: "VerifierTestDriver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifierTestDriver__factory>;
    getContractFactory(
      name: "VerifierEntry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifierEntry__factory>;
    getContractFactory(
      name: "Whitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Whitelist__factory>;
    getContractFactory(
      name: "L1MantleToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1MantleToken__factory>;
    getContractFactory(
      name: "IL1CrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1CrossDomainMessenger__factory>;
    getContractFactory(
      name: "IL1ERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1ERC20Bridge__factory>;
    getContractFactory(
      name: "IL1StandardBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1StandardBridge__factory>;
    getContractFactory(
      name: "L1CrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1CrossDomainMessenger__factory>;
    getContractFactory(
      name: "L1StandardBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1StandardBridge__factory>;
    getContractFactory(
      name: "CanonicalTransactionChain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CanonicalTransactionChain__factory>;
    getContractFactory(
      name: "ChainStorageContainer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainStorageContainer__factory>;
    getContractFactory(
      name: "ICanonicalTransactionChain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICanonicalTransactionChain__factory>;
    getContractFactory(
      name: "IChainStorageContainer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainStorageContainer__factory>;
    getContractFactory(
      name: "IStateCommitmentChain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStateCommitmentChain__factory>;
    getContractFactory(
      name: "StateCommitmentChain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StateCommitmentChain__factory>;
    getContractFactory(
      name: "TssDelegation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TssDelegation__factory>;
    getContractFactory(
      name: "TssDelegationManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TssDelegationManager__factory>;
    getContractFactory(
      name: "TssDelegationSlasher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TssDelegationSlasher__factory>;
    getContractFactory(
      name: "ITssGroupManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITssGroupManager__factory>;
    getContractFactory(
      name: "IStakingSlashing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingSlashing__factory>;
    getContractFactory(
      name: "TssGroupManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TssGroupManager__factory>;
    getContractFactory(
      name: "TssStakingSlashing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TssStakingSlashing__factory>;
    getContractFactory(
      name: "BondManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BondManager__factory>;
    getContractFactory(
      name: "IBondManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBondManager__factory>;
    getContractFactory(
      name: "IL2CrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2CrossDomainMessenger__factory>;
    getContractFactory(
      name: "IL2ERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2ERC20Bridge__factory>;
    getContractFactory(
      name: "L2CrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2CrossDomainMessenger__factory>;
    getContractFactory(
      name: "L2StandardBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2StandardBridge__factory>;
    getContractFactory(
      name: "L2StandardTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2StandardTokenFactory__factory>;
    getContractFactory(
      name: "BVM_DeployerWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BVM_DeployerWhitelist__factory>;
    getContractFactory(
      name: "BVM_ETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BVM_ETH__factory>;
    getContractFactory(
      name: "BVM_GasPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BVM_GasPriceOracle__factory>;
    getContractFactory(
      name: "BVM_L2ToL1MessagePasser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BVM_L2ToL1MessagePasser__factory>;
    getContractFactory(
      name: "BVM_MANTLE",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BVM_MANTLE__factory>;
    getContractFactory(
      name: "BVM_SequencerFeeVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BVM_SequencerFeeVault__factory>;
    getContractFactory(
      name: "IBVM_GasPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBVM_GasPriceOracle__factory>;
    getContractFactory(
      name: "IBVM_L1BlockNumber",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBVM_L1BlockNumber__factory>;
    getContractFactory(
      name: "IBVM_L2ToL1MessagePasser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBVM_L2ToL1MessagePasser__factory>;
    getContractFactory(
      name: "ITssRewardContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITssRewardContract__factory>;
    getContractFactory(
      name: "TssRewardContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TssRewardContract__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "WMANTLE9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WMANTLE9__factory>;
    getContractFactory(
      name: "WMANTLEDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WMANTLEDeployer__factory>;
    getContractFactory(
      name: "CrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossDomainEnabled__factory>;
    getContractFactory(
      name: "ICrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrossDomainMessenger__factory>;
    getContractFactory(
      name: "DataStoreUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DataStoreUtils__factory>;
    getContractFactory(
      name: "IDataLayrPaymentManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDataLayrPaymentManager__factory>;
    getContractFactory(
      name: "IDataLayrServiceManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDataLayrServiceManager__factory>;
    getContractFactory(
      name: "IDelayedService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelayedService__factory>;
    getContractFactory(
      name: "IDelegationTerms",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelegationTerms__factory>;
    getContractFactory(
      name: "IEigenLayrDelegation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEigenLayrDelegation__factory>;
    getContractFactory(
      name: "IInvestmentStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInvestmentStrategy__factory>;
    getContractFactory(
      name: "IPaymentManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymentManager__factory>;
    getContractFactory(
      name: "IServiceManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IServiceManager__factory>;
    getContractFactory(
      name: "Parser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Parser__factory>;
    getContractFactory(
      name: "Lib_AddressManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lib_AddressManager__factory>;
    getContractFactory(
      name: "Lib_AddressResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lib_AddressResolver__factory>;
    getContractFactory(
      name: "Lib_ResolvedDelegateProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lib_ResolvedDelegateProxy__factory>;
    getContractFactory(
      name: "IL2StandardERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2StandardERC20__factory>;
    getContractFactory(
      name: "L2StandardERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2StandardERC20__factory>;
    getContractFactory(
      name: "EmptyContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmptyContract__factory>;
    getContractFactory(
      name: "FailingReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FailingReceiver__factory>;
    getContractFactory(
      name: "L1StandardBridgeUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1StandardBridgeUpgrade__factory>;
    getContractFactory(
      name: "MockStateCommitmentChain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStateCommitmentChain__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Test__factory>;
    getContractFactory(
      name: "TestUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestUpgrade__factory>;
    getContractFactory(
      name: "TestLib_CrossDomainUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLib_CrossDomainUtils__factory>;
    getContractFactory(
      name: "TestLib_BVMCodec",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLib_BVMCodec__factory>;
    getContractFactory(
      name: "TestLib_RLPReader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLib_RLPReader__factory>;
    getContractFactory(
      name: "TestLib_RLPWriter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLib_RLPWriter__factory>;
    getContractFactory(
      name: "TestLib_AddressAliasHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLib_AddressAliasHelper__factory>;
    getContractFactory(
      name: "TestLib_MerkleTrie",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLib_MerkleTrie__factory>;
    getContractFactory(
      name: "TestLib_SecureMerkleTrie",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLib_SecureMerkleTrie__factory>;
    getContractFactory(
      name: "TestLib_Buffer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLib_Buffer__factory>;
    getContractFactory(
      name: "TestLib_Bytes32Utils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLib_Bytes32Utils__factory>;
    getContractFactory(
      name: "TestLib_BytesUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLib_BytesUtils__factory>;
    getContractFactory(
      name: "TestLib_MerkleTree",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestLib_MerkleTree__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IVotesUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotesUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "ERC20BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BurnableUpgradeable>;
    getContractAt(
      name: "ERC20VotesUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20VotesUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "EIP712Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IL1ChugSplashDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1ChugSplashDeployer>;
    getContractAt(
      name: "L1ChugSplashProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1ChugSplashProxy>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "BVM_EigenDataLayrChain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BVM_EigenDataLayrChain>;
    getContractAt(
      name: "BVM_EigenDataLayrFee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BVM_EigenDataLayrFee>;
    getContractAt(
      name: "Delegation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Delegation>;
    getContractAt(
      name: "DelegationCallbackBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegationCallbackBase>;
    getContractAt(
      name: "DelegationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegationManager>;
    getContractAt(
      name: "DelegationManagerStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegationManagerStorage>;
    getContractAt(
      name: "DelegationShareBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegationShareBase>;
    getContractAt(
      name: "DelegationSlasher",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegationSlasher>;
    getContractAt(
      name: "DelegationStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegationStorage>;
    getContractAt(
      name: "IDelegation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelegation>;
    getContractAt(
      name: "IDelegationCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelegationCallback>;
    getContractAt(
      name: "IDelegationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelegationManager>;
    getContractAt(
      name: "IDelegationShare",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelegationShare>;
    getContractAt(
      name: "IDelegationSlasher",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelegationSlasher>;
    getContractAt(
      name: "WhiteList",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WhiteList>;
    getContractAt(
      name: "AddressDictator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressDictator>;
    getContractAt(
      name: "ChugSplashDictator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChugSplashDictator>;
    getContractAt(
      name: "AssertionMap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssertionMap>;
    getContractAt(
      name: "Challenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Challenge>;
    getContractAt(
      name: "IChallenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChallenge>;
    getContractAt(
      name: "IRollup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRollup>;
    getContractAt(
      name: "Rollup",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Rollup>;
    getContractAt(
      name: "RollupBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RollupBase>;
    getContractAt(
      name: "IVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "IVerifierEntry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifierEntry>;
    getContractAt(
      name: "BlockFinalizationVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockFinalizationVerifier>;
    getContractAt(
      name: "BlockInitiationVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockInitiationVerifier>;
    getContractAt(
      name: "CallOpVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CallOpVerifier>;
    getContractAt(
      name: "EnvironmentalOpVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EnvironmentalOpVerifier>;
    getContractAt(
      name: "InterTxVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterTxVerifier>;
    getContractAt(
      name: "InvalidOpVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InvalidOpVerifier>;
    getContractAt(
      name: "StackOpVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StackOpVerifier>;
    getContractAt(
      name: "VerifierTestDriver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifierTestDriver>;
    getContractAt(
      name: "VerifierEntry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifierEntry>;
    getContractAt(
      name: "Whitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Whitelist>;
    getContractAt(
      name: "L1MantleToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1MantleToken>;
    getContractAt(
      name: "IL1CrossDomainMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1CrossDomainMessenger>;
    getContractAt(
      name: "IL1ERC20Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1ERC20Bridge>;
    getContractAt(
      name: "IL1StandardBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1StandardBridge>;
    getContractAt(
      name: "L1CrossDomainMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1CrossDomainMessenger>;
    getContractAt(
      name: "L1StandardBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1StandardBridge>;
    getContractAt(
      name: "CanonicalTransactionChain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CanonicalTransactionChain>;
    getContractAt(
      name: "ChainStorageContainer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainStorageContainer>;
    getContractAt(
      name: "ICanonicalTransactionChain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICanonicalTransactionChain>;
    getContractAt(
      name: "IChainStorageContainer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainStorageContainer>;
    getContractAt(
      name: "IStateCommitmentChain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStateCommitmentChain>;
    getContractAt(
      name: "StateCommitmentChain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StateCommitmentChain>;
    getContractAt(
      name: "TssDelegation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TssDelegation>;
    getContractAt(
      name: "TssDelegationManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TssDelegationManager>;
    getContractAt(
      name: "TssDelegationSlasher",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TssDelegationSlasher>;
    getContractAt(
      name: "ITssGroupManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITssGroupManager>;
    getContractAt(
      name: "IStakingSlashing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingSlashing>;
    getContractAt(
      name: "TssGroupManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TssGroupManager>;
    getContractAt(
      name: "TssStakingSlashing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TssStakingSlashing>;
    getContractAt(
      name: "BondManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BondManager>;
    getContractAt(
      name: "IBondManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBondManager>;
    getContractAt(
      name: "IL2CrossDomainMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2CrossDomainMessenger>;
    getContractAt(
      name: "IL2ERC20Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2ERC20Bridge>;
    getContractAt(
      name: "L2CrossDomainMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2CrossDomainMessenger>;
    getContractAt(
      name: "L2StandardBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2StandardBridge>;
    getContractAt(
      name: "L2StandardTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2StandardTokenFactory>;
    getContractAt(
      name: "BVM_DeployerWhitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BVM_DeployerWhitelist>;
    getContractAt(
      name: "BVM_ETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BVM_ETH>;
    getContractAt(
      name: "BVM_GasPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BVM_GasPriceOracle>;
    getContractAt(
      name: "BVM_L2ToL1MessagePasser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BVM_L2ToL1MessagePasser>;
    getContractAt(
      name: "BVM_MANTLE",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BVM_MANTLE>;
    getContractAt(
      name: "BVM_SequencerFeeVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BVM_SequencerFeeVault>;
    getContractAt(
      name: "IBVM_GasPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBVM_GasPriceOracle>;
    getContractAt(
      name: "IBVM_L1BlockNumber",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBVM_L1BlockNumber>;
    getContractAt(
      name: "IBVM_L2ToL1MessagePasser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBVM_L2ToL1MessagePasser>;
    getContractAt(
      name: "ITssRewardContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITssRewardContract>;
    getContractAt(
      name: "TssRewardContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TssRewardContract>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "WMANTLE9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WMANTLE9>;
    getContractAt(
      name: "WMANTLEDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WMANTLEDeployer>;
    getContractAt(
      name: "CrossDomainEnabled",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossDomainEnabled>;
    getContractAt(
      name: "ICrossDomainMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrossDomainMessenger>;
    getContractAt(
      name: "DataStoreUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DataStoreUtils>;
    getContractAt(
      name: "IDataLayrPaymentManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDataLayrPaymentManager>;
    getContractAt(
      name: "IDataLayrServiceManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDataLayrServiceManager>;
    getContractAt(
      name: "IDelayedService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelayedService>;
    getContractAt(
      name: "IDelegationTerms",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelegationTerms>;
    getContractAt(
      name: "IEigenLayrDelegation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEigenLayrDelegation>;
    getContractAt(
      name: "IInvestmentStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInvestmentStrategy>;
    getContractAt(
      name: "IPaymentManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymentManager>;
    getContractAt(
      name: "IServiceManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IServiceManager>;
    getContractAt(
      name: "Parser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Parser>;
    getContractAt(
      name: "Lib_AddressManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lib_AddressManager>;
    getContractAt(
      name: "Lib_AddressResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lib_AddressResolver>;
    getContractAt(
      name: "Lib_ResolvedDelegateProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lib_ResolvedDelegateProxy>;
    getContractAt(
      name: "IL2StandardERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2StandardERC20>;
    getContractAt(
      name: "L2StandardERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2StandardERC20>;
    getContractAt(
      name: "EmptyContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EmptyContract>;
    getContractAt(
      name: "FailingReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FailingReceiver>;
    getContractAt(
      name: "L1StandardBridgeUpgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L1StandardBridgeUpgrade>;
    getContractAt(
      name: "MockStateCommitmentChain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockStateCommitmentChain>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Test>;
    getContractAt(
      name: "TestUpgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestUpgrade>;
    getContractAt(
      name: "TestLib_CrossDomainUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLib_CrossDomainUtils>;
    getContractAt(
      name: "TestLib_BVMCodec",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLib_BVMCodec>;
    getContractAt(
      name: "TestLib_RLPReader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLib_RLPReader>;
    getContractAt(
      name: "TestLib_RLPWriter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLib_RLPWriter>;
    getContractAt(
      name: "TestLib_AddressAliasHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLib_AddressAliasHelper>;
    getContractAt(
      name: "TestLib_MerkleTrie",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLib_MerkleTrie>;
    getContractAt(
      name: "TestLib_SecureMerkleTrie",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLib_SecureMerkleTrie>;
    getContractAt(
      name: "TestLib_Buffer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLib_Buffer>;
    getContractAt(
      name: "TestLib_Bytes32Utils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLib_Bytes32Utils>;
    getContractAt(
      name: "TestLib_BytesUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLib_BytesUtils>;
    getContractAt(
      name: "TestLib_MerkleTree",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestLib_MerkleTree>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
