/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IDataLayrServiceManager {
  export type DataStoreMetadataStruct = {
    headerHash: PromiseOrValue<BytesLike>;
    durationDataStoreId: PromiseOrValue<BigNumberish>;
    globalDataStoreId: PromiseOrValue<BigNumberish>;
    referenceBlockNumber: PromiseOrValue<BigNumberish>;
    blockNumber: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
    confirmer: PromiseOrValue<string>;
    signatoryRecordHash: PromiseOrValue<BytesLike>;
  };

  export type DataStoreMetadataStructOutput = [
    string,
    number,
    number,
    number,
    number,
    BigNumber,
    string,
    string
  ] & {
    headerHash: string;
    durationDataStoreId: number;
    globalDataStoreId: number;
    referenceBlockNumber: number;
    blockNumber: number;
    fee: BigNumber;
    confirmer: string;
    signatoryRecordHash: string;
  };

  export type DataStoreSearchDataStruct = {
    metadata: IDataLayrServiceManager.DataStoreMetadataStruct;
    duration: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
  };

  export type DataStoreSearchDataStructOutput = [
    IDataLayrServiceManager.DataStoreMetadataStructOutput,
    number,
    BigNumber,
    number
  ] & {
    metadata: IDataLayrServiceManager.DataStoreMetadataStructOutput;
    duration: number;
    timestamp: BigNumber;
    index: number;
  };
}

export declare namespace BVM_EigenDataLayrChain {
  export type BatchRollupBlockStruct = {
    startL2BlockNumber: PromiseOrValue<BigNumberish>;
    endBL2BlockNumber: PromiseOrValue<BigNumberish>;
    isReRollup: PromiseOrValue<boolean>;
  };

  export type BatchRollupBlockStructOutput = [BigNumber, BigNumber, boolean] & {
    startL2BlockNumber: BigNumber;
    endBL2BlockNumber: BigNumber;
    isReRollup: boolean;
  };

  export type RollupStoreStruct = {
    originDataStoreId: PromiseOrValue<BigNumberish>;
    dataStoreId: PromiseOrValue<BigNumberish>;
    confirmAt: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type RollupStoreStructOutput = [number, number, number, number] & {
    originDataStoreId: number;
    dataStoreId: number;
    confirmAt: number;
    status: number;
  };

  export type DisclosureProofsStruct = {
    header: PromiseOrValue<BytesLike>;
    firstChunkNumber: PromiseOrValue<BigNumberish>;
    polys: PromiseOrValue<BytesLike>[];
    multiRevealProofs: DataLayrDisclosureLogic.MultiRevealProofStruct[];
    polyEquivalenceProof: BN254.G2PointStruct;
  };

  export type DisclosureProofsStructOutput = [
    string,
    number,
    string[],
    DataLayrDisclosureLogic.MultiRevealProofStructOutput[],
    BN254.G2PointStructOutput
  ] & {
    header: string;
    firstChunkNumber: number;
    polys: string[];
    multiRevealProofs: DataLayrDisclosureLogic.MultiRevealProofStructOutput[];
    polyEquivalenceProof: BN254.G2PointStructOutput;
  };
}

export declare namespace BN254 {
  export type G1PointStruct = {
    X: PromiseOrValue<BigNumberish>;
    Y: PromiseOrValue<BigNumberish>;
  };

  export type G1PointStructOutput = [BigNumber, BigNumber] & {
    X: BigNumber;
    Y: BigNumber;
  };

  export type G2PointStruct = {
    X: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    Y: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  };

  export type G2PointStructOutput = [
    [BigNumber, BigNumber],
    [BigNumber, BigNumber]
  ] & { X: [BigNumber, BigNumber]; Y: [BigNumber, BigNumber] };
}

export declare namespace DataLayrDisclosureLogic {
  export type MultiRevealProofStruct = {
    interpolationPoly: BN254.G1PointStruct;
    revealProof: BN254.G1PointStruct;
    zeroPoly: BN254.G2PointStruct;
    zeroPolyProof: PromiseOrValue<BytesLike>;
  };

  export type MultiRevealProofStructOutput = [
    BN254.G1PointStructOutput,
    BN254.G1PointStructOutput,
    BN254.G2PointStructOutput,
    string
  ] & {
    interpolationPoly: BN254.G1PointStructOutput;
    revealProof: BN254.G1PointStructOutput;
    zeroPoly: BN254.G2PointStructOutput;
    zeroPolyProof: string;
  };
}

export interface BVM_EigenDataLayrChainInterface extends utils.Interface {
  functions: {
    "BLOCK_STALE_MEASURE()": FunctionFragment;
    "FRAUD_STRING()": FunctionFragment;
    "confirmData(bytes,((bytes32,uint32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32),uint256,uint256,uint32,uint256,bool)": FunctionFragment;
    "dataManageAddress()": FunctionFragment;
    "dataStoreIdToL2RollUpBlock(uint32)": FunctionFragment;
    "dataStoreIdToRollupStoreNumber(uint32)": FunctionFragment;
    "fraudProofPeriod()": FunctionFragment;
    "getL2ConfirmedBlockNumber()": FunctionFragment;
    "getL2RollUpBlockByDataStoreId(uint32)": FunctionFragment;
    "getL2StoredBlockNumber()": FunctionFragment;
    "getRollupStoreByRollupBatchIndex(uint256)": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "l2ConfirmedBlockNumber()": FunctionFragment;
    "l2StoredBlockNumber()": FunctionFragment;
    "owner()": FunctionFragment;
    "parse(bytes[],uint256,uint256)": FunctionFragment;
    "proveFraud(uint256,uint256,((bytes32,uint32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32),(bytes,uint32,bytes[],((uint256,uint256),(uint256,uint256),(uint256[2],uint256[2]),bytes)[],(uint256[2],uint256[2])))": FunctionFragment;
    "reRollupBatchIndex(uint256)": FunctionFragment;
    "reRollupIndex()": FunctionFragment;
    "reSubmitterAddress()": FunctionFragment;
    "removeFraudProofAddress(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetRollupBatchData(uint256)": FunctionFragment;
    "rollupBatchIndex()": FunctionFragment;
    "rollupBatchIndexRollupStores(uint256)": FunctionFragment;
    "sequencer()": FunctionFragment;
    "setFraudProofAddress(address)": FunctionFragment;
    "storeData(bytes,uint8,uint32,uint256,uint256,uint32,bool)": FunctionFragment;
    "submitReRollUpInfo(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unavailableFraudProofAddress(address)": FunctionFragment;
    "updateDataLayrManagerAddress(address)": FunctionFragment;
    "updateFraudProofPeriod(uint256)": FunctionFragment;
    "updateL2ConfirmedBlockNumber(uint256)": FunctionFragment;
    "updateL2StoredBlockNumber(uint256)": FunctionFragment;
    "updateReSubmitterAddress(address)": FunctionFragment;
    "updateSequencerAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BLOCK_STALE_MEASURE"
      | "FRAUD_STRING"
      | "confirmData"
      | "dataManageAddress"
      | "dataStoreIdToL2RollUpBlock"
      | "dataStoreIdToRollupStoreNumber"
      | "fraudProofPeriod"
      | "getL2ConfirmedBlockNumber"
      | "getL2RollUpBlockByDataStoreId"
      | "getL2StoredBlockNumber"
      | "getRollupStoreByRollupBatchIndex"
      | "initialize"
      | "l2ConfirmedBlockNumber"
      | "l2StoredBlockNumber"
      | "owner"
      | "parse"
      | "proveFraud"
      | "reRollupBatchIndex"
      | "reRollupIndex"
      | "reSubmitterAddress"
      | "removeFraudProofAddress"
      | "renounceOwnership"
      | "resetRollupBatchData"
      | "rollupBatchIndex"
      | "rollupBatchIndexRollupStores"
      | "sequencer"
      | "setFraudProofAddress"
      | "storeData"
      | "submitReRollUpInfo"
      | "transferOwnership"
      | "unavailableFraudProofAddress"
      | "updateDataLayrManagerAddress"
      | "updateFraudProofPeriod"
      | "updateL2ConfirmedBlockNumber"
      | "updateL2StoredBlockNumber"
      | "updateReSubmitterAddress"
      | "updateSequencerAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BLOCK_STALE_MEASURE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FRAUD_STRING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmData",
    values: [
      PromiseOrValue<BytesLike>,
      IDataLayrServiceManager.DataStoreSearchDataStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dataManageAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dataStoreIdToL2RollUpBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dataStoreIdToRollupStoreNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fraudProofPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2ConfirmedBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getL2RollUpBlockByDataStoreId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getL2StoredBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRollupStoreByRollupBatchIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "l2ConfirmedBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2StoredBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parse",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveFraud",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IDataLayrServiceManager.DataStoreSearchDataStruct,
      BVM_EigenDataLayrChain.DisclosureProofsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reRollupBatchIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reRollupIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reSubmitterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFraudProofAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetRollupBatchData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rollupBatchIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rollupBatchIndexRollupStores",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "sequencer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFraudProofAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeData",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitReRollUpInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unavailableFraudProofAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDataLayrManagerAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFraudProofPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateL2ConfirmedBlockNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateL2StoredBlockNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReSubmitterAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSequencerAddress",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BLOCK_STALE_MEASURE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FRAUD_STRING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataManageAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataStoreIdToL2RollUpBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataStoreIdToRollupStoreNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fraudProofPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2ConfirmedBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2RollUpBlockByDataStoreId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL2StoredBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRollupStoreByRollupBatchIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2ConfirmedBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2StoredBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proveFraud", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reRollupBatchIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reRollupIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reSubmitterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFraudProofAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetRollupBatchData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollupBatchIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollupBatchIndexRollupStores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sequencer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFraudProofAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "storeData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitReRollUpInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unavailableFraudProofAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDataLayrManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFraudProofPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateL2ConfirmedBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateL2StoredBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReSubmitterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSequencerAddress",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReRollupBatchData(uint256,uint256,uint256,uint256)": EventFragment;
    "RollupStoreConfirmed(uint256,uint32,uint256,uint256)": EventFragment;
    "RollupStoreInitialized(uint32,uint256,uint256)": EventFragment;
    "RollupStoreReverted(uint256,uint32,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReRollupBatchData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RollupStoreConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RollupStoreInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RollupStoreReverted"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReRollupBatchDataEventObject {
  reRollupIndex: BigNumber;
  rollupBatchIndex: BigNumber;
  stratL2BlockNumber: BigNumber;
  endL2BlockNumber: BigNumber;
}
export type ReRollupBatchDataEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  ReRollupBatchDataEventObject
>;

export type ReRollupBatchDataEventFilter =
  TypedEventFilter<ReRollupBatchDataEvent>;

export interface RollupStoreConfirmedEventObject {
  rollupBatchIndex: BigNumber;
  dataStoreId: number;
  stratL2BlockNumber: BigNumber;
  endL2BlockNumber: BigNumber;
}
export type RollupStoreConfirmedEvent = TypedEvent<
  [BigNumber, number, BigNumber, BigNumber],
  RollupStoreConfirmedEventObject
>;

export type RollupStoreConfirmedEventFilter =
  TypedEventFilter<RollupStoreConfirmedEvent>;

export interface RollupStoreInitializedEventObject {
  dataStoreId: number;
  stratL2BlockNumber: BigNumber;
  endL2BlockNumber: BigNumber;
}
export type RollupStoreInitializedEvent = TypedEvent<
  [number, BigNumber, BigNumber],
  RollupStoreInitializedEventObject
>;

export type RollupStoreInitializedEventFilter =
  TypedEventFilter<RollupStoreInitializedEvent>;

export interface RollupStoreRevertedEventObject {
  rollupBatchIndex: BigNumber;
  dataStoreId: number;
  stratL2BlockNumber: BigNumber;
  endL2BlockNumber: BigNumber;
}
export type RollupStoreRevertedEvent = TypedEvent<
  [BigNumber, number, BigNumber, BigNumber],
  RollupStoreRevertedEventObject
>;

export type RollupStoreRevertedEventFilter =
  TypedEventFilter<RollupStoreRevertedEvent>;

export interface BVM_EigenDataLayrChain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BVM_EigenDataLayrChainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BLOCK_STALE_MEASURE(overrides?: CallOverrides): Promise<[BigNumber]>;

    FRAUD_STRING(overrides?: CallOverrides): Promise<[string]>;

    confirmData(
      data: PromiseOrValue<BytesLike>,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      startL2Block: PromiseOrValue<BigNumberish>,
      endL2Block: PromiseOrValue<BigNumberish>,
      originDataStoreId: PromiseOrValue<BigNumberish>,
      reConfirmedBatchIndex: PromiseOrValue<BigNumberish>,
      isReRollup: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataManageAddress(overrides?: CallOverrides): Promise<[string]>;

    dataStoreIdToL2RollUpBlock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        startL2BlockNumber: BigNumber;
        endBL2BlockNumber: BigNumber;
        isReRollup: boolean;
      }
    >;

    dataStoreIdToRollupStoreNumber(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fraudProofPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getL2ConfirmedBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getL2RollUpBlockByDataStoreId(
      _dataStoreId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BVM_EigenDataLayrChain.BatchRollupBlockStructOutput]>;

    getL2StoredBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRollupStoreByRollupBatchIndex(
      _rollupBatchIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BVM_EigenDataLayrChain.RollupStoreStructOutput]>;

    initialize(
      _sequencer: PromiseOrValue<string>,
      _dataManageAddress: PromiseOrValue<string>,
      _reSubmitterAddress: PromiseOrValue<string>,
      _block_stale_measure: PromiseOrValue<BigNumberish>,
      _fraudProofPeriod: PromiseOrValue<BigNumberish>,
      _l2SubmittedBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    l2ConfirmedBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    l2StoredBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parse(
      polys: PromiseOrValue<BytesLike>[],
      startIndex: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { provenString: string }>;

    proveFraud(
      fraudulentStoreNumber: PromiseOrValue<BigNumberish>,
      startIndex: PromiseOrValue<BigNumberish>,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      disclosureProofs: BVM_EigenDataLayrChain.DisclosureProofsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reRollupBatchIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reRollupIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    reSubmitterAddress(overrides?: CallOverrides): Promise<[string]>;

    removeFraudProofAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetRollupBatchData(
      _rollupBatchIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rollupBatchIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    rollupBatchIndexRollupStores(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        originDataStoreId: number;
        dataStoreId: number;
        confirmAt: number;
        status: number;
      }
    >;

    sequencer(overrides?: CallOverrides): Promise<[string]>;

    setFraudProofAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeData(
      header: PromiseOrValue<BytesLike>,
      duration: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      startL2Block: PromiseOrValue<BigNumberish>,
      endL2Block: PromiseOrValue<BigNumberish>,
      totalOperatorsIndex: PromiseOrValue<BigNumberish>,
      isReRollup: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitReRollUpInfo(
      batchIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unavailableFraudProofAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDataLayrManagerAddress(
      _dataManageAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFraudProofPeriod(
      _fraudProofPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateL2ConfirmedBlockNumber(
      _l2ConfirmedBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateL2StoredBlockNumber(
      _l2StoredBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateReSubmitterAddress(
      _reSubmitterAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSequencerAddress(
      _sequencer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BLOCK_STALE_MEASURE(overrides?: CallOverrides): Promise<BigNumber>;

  FRAUD_STRING(overrides?: CallOverrides): Promise<string>;

  confirmData(
    data: PromiseOrValue<BytesLike>,
    searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
    startL2Block: PromiseOrValue<BigNumberish>,
    endL2Block: PromiseOrValue<BigNumberish>,
    originDataStoreId: PromiseOrValue<BigNumberish>,
    reConfirmedBatchIndex: PromiseOrValue<BigNumberish>,
    isReRollup: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataManageAddress(overrides?: CallOverrides): Promise<string>;

  dataStoreIdToL2RollUpBlock(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      startL2BlockNumber: BigNumber;
      endBL2BlockNumber: BigNumber;
      isReRollup: boolean;
    }
  >;

  dataStoreIdToRollupStoreNumber(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fraudProofPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getL2ConfirmedBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getL2RollUpBlockByDataStoreId(
    _dataStoreId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BVM_EigenDataLayrChain.BatchRollupBlockStructOutput>;

  getL2StoredBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getRollupStoreByRollupBatchIndex(
    _rollupBatchIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BVM_EigenDataLayrChain.RollupStoreStructOutput>;

  initialize(
    _sequencer: PromiseOrValue<string>,
    _dataManageAddress: PromiseOrValue<string>,
    _reSubmitterAddress: PromiseOrValue<string>,
    _block_stale_measure: PromiseOrValue<BigNumberish>,
    _fraudProofPeriod: PromiseOrValue<BigNumberish>,
    _l2SubmittedBlockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  l2ConfirmedBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  l2StoredBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  parse(
    polys: PromiseOrValue<BytesLike>[],
    startIndex: PromiseOrValue<BigNumberish>,
    length: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  proveFraud(
    fraudulentStoreNumber: PromiseOrValue<BigNumberish>,
    startIndex: PromiseOrValue<BigNumberish>,
    searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
    disclosureProofs: BVM_EigenDataLayrChain.DisclosureProofsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reRollupBatchIndex(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reRollupIndex(overrides?: CallOverrides): Promise<BigNumber>;

  reSubmitterAddress(overrides?: CallOverrides): Promise<string>;

  removeFraudProofAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetRollupBatchData(
    _rollupBatchIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rollupBatchIndex(overrides?: CallOverrides): Promise<BigNumber>;

  rollupBatchIndexRollupStores(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      originDataStoreId: number;
      dataStoreId: number;
      confirmAt: number;
      status: number;
    }
  >;

  sequencer(overrides?: CallOverrides): Promise<string>;

  setFraudProofAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeData(
    header: PromiseOrValue<BytesLike>,
    duration: PromiseOrValue<BigNumberish>,
    blockNumber: PromiseOrValue<BigNumberish>,
    startL2Block: PromiseOrValue<BigNumberish>,
    endL2Block: PromiseOrValue<BigNumberish>,
    totalOperatorsIndex: PromiseOrValue<BigNumberish>,
    isReRollup: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitReRollUpInfo(
    batchIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unavailableFraudProofAddress(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDataLayrManagerAddress(
    _dataManageAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFraudProofPeriod(
    _fraudProofPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateL2ConfirmedBlockNumber(
    _l2ConfirmedBlockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateL2StoredBlockNumber(
    _l2StoredBlockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateReSubmitterAddress(
    _reSubmitterAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSequencerAddress(
    _sequencer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BLOCK_STALE_MEASURE(overrides?: CallOverrides): Promise<BigNumber>;

    FRAUD_STRING(overrides?: CallOverrides): Promise<string>;

    confirmData(
      data: PromiseOrValue<BytesLike>,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      startL2Block: PromiseOrValue<BigNumberish>,
      endL2Block: PromiseOrValue<BigNumberish>,
      originDataStoreId: PromiseOrValue<BigNumberish>,
      reConfirmedBatchIndex: PromiseOrValue<BigNumberish>,
      isReRollup: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    dataManageAddress(overrides?: CallOverrides): Promise<string>;

    dataStoreIdToL2RollUpBlock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        startL2BlockNumber: BigNumber;
        endBL2BlockNumber: BigNumber;
        isReRollup: boolean;
      }
    >;

    dataStoreIdToRollupStoreNumber(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fraudProofPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getL2ConfirmedBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getL2RollUpBlockByDataStoreId(
      _dataStoreId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BVM_EigenDataLayrChain.BatchRollupBlockStructOutput>;

    getL2StoredBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getRollupStoreByRollupBatchIndex(
      _rollupBatchIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BVM_EigenDataLayrChain.RollupStoreStructOutput>;

    initialize(
      _sequencer: PromiseOrValue<string>,
      _dataManageAddress: PromiseOrValue<string>,
      _reSubmitterAddress: PromiseOrValue<string>,
      _block_stale_measure: PromiseOrValue<BigNumberish>,
      _fraudProofPeriod: PromiseOrValue<BigNumberish>,
      _l2SubmittedBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    l2ConfirmedBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    l2StoredBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    parse(
      polys: PromiseOrValue<BytesLike>[],
      startIndex: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    proveFraud(
      fraudulentStoreNumber: PromiseOrValue<BigNumberish>,
      startIndex: PromiseOrValue<BigNumberish>,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      disclosureProofs: BVM_EigenDataLayrChain.DisclosureProofsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    reRollupBatchIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reRollupIndex(overrides?: CallOverrides): Promise<BigNumber>;

    reSubmitterAddress(overrides?: CallOverrides): Promise<string>;

    removeFraudProofAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetRollupBatchData(
      _rollupBatchIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rollupBatchIndex(overrides?: CallOverrides): Promise<BigNumber>;

    rollupBatchIndexRollupStores(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        originDataStoreId: number;
        dataStoreId: number;
        confirmAt: number;
        status: number;
      }
    >;

    sequencer(overrides?: CallOverrides): Promise<string>;

    setFraudProofAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeData(
      header: PromiseOrValue<BytesLike>,
      duration: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      startL2Block: PromiseOrValue<BigNumberish>,
      endL2Block: PromiseOrValue<BigNumberish>,
      totalOperatorsIndex: PromiseOrValue<BigNumberish>,
      isReRollup: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitReRollUpInfo(
      batchIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unavailableFraudProofAddress(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDataLayrManagerAddress(
      _dataManageAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFraudProofPeriod(
      _fraudProofPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateL2ConfirmedBlockNumber(
      _l2ConfirmedBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateL2StoredBlockNumber(
      _l2StoredBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateReSubmitterAddress(
      _reSubmitterAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSequencerAddress(
      _sequencer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ReRollupBatchData(uint256,uint256,uint256,uint256)"(
      reRollupIndex?: null,
      rollupBatchIndex?: null,
      stratL2BlockNumber?: null,
      endL2BlockNumber?: null
    ): ReRollupBatchDataEventFilter;
    ReRollupBatchData(
      reRollupIndex?: null,
      rollupBatchIndex?: null,
      stratL2BlockNumber?: null,
      endL2BlockNumber?: null
    ): ReRollupBatchDataEventFilter;

    "RollupStoreConfirmed(uint256,uint32,uint256,uint256)"(
      rollupBatchIndex?: null,
      dataStoreId?: null,
      stratL2BlockNumber?: null,
      endL2BlockNumber?: null
    ): RollupStoreConfirmedEventFilter;
    RollupStoreConfirmed(
      rollupBatchIndex?: null,
      dataStoreId?: null,
      stratL2BlockNumber?: null,
      endL2BlockNumber?: null
    ): RollupStoreConfirmedEventFilter;

    "RollupStoreInitialized(uint32,uint256,uint256)"(
      dataStoreId?: null,
      stratL2BlockNumber?: null,
      endL2BlockNumber?: null
    ): RollupStoreInitializedEventFilter;
    RollupStoreInitialized(
      dataStoreId?: null,
      stratL2BlockNumber?: null,
      endL2BlockNumber?: null
    ): RollupStoreInitializedEventFilter;

    "RollupStoreReverted(uint256,uint32,uint256,uint256)"(
      rollupBatchIndex?: null,
      dataStoreId?: null,
      stratL2BlockNumber?: null,
      endL2BlockNumber?: null
    ): RollupStoreRevertedEventFilter;
    RollupStoreReverted(
      rollupBatchIndex?: null,
      dataStoreId?: null,
      stratL2BlockNumber?: null,
      endL2BlockNumber?: null
    ): RollupStoreRevertedEventFilter;
  };

  estimateGas: {
    BLOCK_STALE_MEASURE(overrides?: CallOverrides): Promise<BigNumber>;

    FRAUD_STRING(overrides?: CallOverrides): Promise<BigNumber>;

    confirmData(
      data: PromiseOrValue<BytesLike>,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      startL2Block: PromiseOrValue<BigNumberish>,
      endL2Block: PromiseOrValue<BigNumberish>,
      originDataStoreId: PromiseOrValue<BigNumberish>,
      reConfirmedBatchIndex: PromiseOrValue<BigNumberish>,
      isReRollup: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataManageAddress(overrides?: CallOverrides): Promise<BigNumber>;

    dataStoreIdToL2RollUpBlock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dataStoreIdToRollupStoreNumber(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fraudProofPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getL2ConfirmedBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getL2RollUpBlockByDataStoreId(
      _dataStoreId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getL2StoredBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getRollupStoreByRollupBatchIndex(
      _rollupBatchIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _sequencer: PromiseOrValue<string>,
      _dataManageAddress: PromiseOrValue<string>,
      _reSubmitterAddress: PromiseOrValue<string>,
      _block_stale_measure: PromiseOrValue<BigNumberish>,
      _fraudProofPeriod: PromiseOrValue<BigNumberish>,
      _l2SubmittedBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    l2ConfirmedBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    l2StoredBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parse(
      polys: PromiseOrValue<BytesLike>[],
      startIndex: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveFraud(
      fraudulentStoreNumber: PromiseOrValue<BigNumberish>,
      startIndex: PromiseOrValue<BigNumberish>,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      disclosureProofs: BVM_EigenDataLayrChain.DisclosureProofsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reRollupBatchIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reRollupIndex(overrides?: CallOverrides): Promise<BigNumber>;

    reSubmitterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    removeFraudProofAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetRollupBatchData(
      _rollupBatchIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rollupBatchIndex(overrides?: CallOverrides): Promise<BigNumber>;

    rollupBatchIndexRollupStores(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sequencer(overrides?: CallOverrides): Promise<BigNumber>;

    setFraudProofAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeData(
      header: PromiseOrValue<BytesLike>,
      duration: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      startL2Block: PromiseOrValue<BigNumberish>,
      endL2Block: PromiseOrValue<BigNumberish>,
      totalOperatorsIndex: PromiseOrValue<BigNumberish>,
      isReRollup: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitReRollUpInfo(
      batchIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unavailableFraudProofAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDataLayrManagerAddress(
      _dataManageAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFraudProofPeriod(
      _fraudProofPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateL2ConfirmedBlockNumber(
      _l2ConfirmedBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateL2StoredBlockNumber(
      _l2StoredBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateReSubmitterAddress(
      _reSubmitterAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSequencerAddress(
      _sequencer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BLOCK_STALE_MEASURE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FRAUD_STRING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmData(
      data: PromiseOrValue<BytesLike>,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      startL2Block: PromiseOrValue<BigNumberish>,
      endL2Block: PromiseOrValue<BigNumberish>,
      originDataStoreId: PromiseOrValue<BigNumberish>,
      reConfirmedBatchIndex: PromiseOrValue<BigNumberish>,
      isReRollup: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataManageAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dataStoreIdToL2RollUpBlock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dataStoreIdToRollupStoreNumber(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fraudProofPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getL2ConfirmedBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2RollUpBlockByDataStoreId(
      _dataStoreId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getL2StoredBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRollupStoreByRollupBatchIndex(
      _rollupBatchIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _sequencer: PromiseOrValue<string>,
      _dataManageAddress: PromiseOrValue<string>,
      _reSubmitterAddress: PromiseOrValue<string>,
      _block_stale_measure: PromiseOrValue<BigNumberish>,
      _fraudProofPeriod: PromiseOrValue<BigNumberish>,
      _l2SubmittedBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    l2ConfirmedBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2StoredBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parse(
      polys: PromiseOrValue<BytesLike>[],
      startIndex: PromiseOrValue<BigNumberish>,
      length: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveFraud(
      fraudulentStoreNumber: PromiseOrValue<BigNumberish>,
      startIndex: PromiseOrValue<BigNumberish>,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      disclosureProofs: BVM_EigenDataLayrChain.DisclosureProofsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reRollupBatchIndex(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reRollupIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reSubmitterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFraudProofAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetRollupBatchData(
      _rollupBatchIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rollupBatchIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rollupBatchIndexRollupStores(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sequencer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFraudProofAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeData(
      header: PromiseOrValue<BytesLike>,
      duration: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      startL2Block: PromiseOrValue<BigNumberish>,
      endL2Block: PromiseOrValue<BigNumberish>,
      totalOperatorsIndex: PromiseOrValue<BigNumberish>,
      isReRollup: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitReRollUpInfo(
      batchIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unavailableFraudProofAddress(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDataLayrManagerAddress(
      _dataManageAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFraudProofPeriod(
      _fraudProofPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateL2ConfirmedBlockNumber(
      _l2ConfirmedBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateL2StoredBlockNumber(
      _l2StoredBlockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateReSubmitterAddress(
      _reSubmitterAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSequencerAddress(
      _sequencer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
