/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IDelegationManager {
  export type WithdrawerAndNonceStruct = {
    withdrawer: PromiseOrValue<string>;
    nonce: PromiseOrValue<BigNumberish>;
  };

  export type WithdrawerAndNonceStructOutput = [string, BigNumber] & {
    withdrawer: string;
    nonce: BigNumber;
  };

  export type QueuedWithdrawalStruct = {
    delegations: PromiseOrValue<string>[];
    tokens: PromiseOrValue<string>[];
    shares: PromiseOrValue<BigNumberish>[];
    depositor: PromiseOrValue<string>;
    withdrawerAndNonce: IDelegationManager.WithdrawerAndNonceStruct;
    delegatedAddress: PromiseOrValue<string>;
  };

  export type QueuedWithdrawalStructOutput = [
    string[],
    string[],
    BigNumber[],
    string,
    IDelegationManager.WithdrawerAndNonceStructOutput,
    string
  ] & {
    delegations: string[];
    tokens: string[];
    shares: BigNumber[];
    depositor: string;
    withdrawerAndNonce: IDelegationManager.WithdrawerAndNonceStructOutput;
    delegatedAddress: string;
  };
}

export interface IDelegationManagerInterface extends utils.Interface {
  functions: {
    "calculateWithdrawalRoot((address[],address[],uint256[],address,(address,uint96),address))": FunctionFragment;
    "canCompleteQueuedWithdrawal((address[],address[],uint256[],address,(address,uint96),address))": FunctionFragment;
    "completeQueuedWithdrawal((address[],address[],uint256[],address,(address,uint96),address),bool)": FunctionFragment;
    "delegation()": FunctionFragment;
    "delegationSlasher()": FunctionFragment;
    "depositInto(address,address,uint256)": FunctionFragment;
    "getDeposits(address)": FunctionFragment;
    "investorDelegationLength(address)": FunctionFragment;
    "investorDelegationShares(address,address)": FunctionFragment;
    "queueWithdrawal(uint256[],address[],address[],uint256[],(address,uint96),bool)": FunctionFragment;
    "slashQueuedWithdrawal(address,(address[],address[],uint256[],address,(address,uint96),address))": FunctionFragment;
    "slashShares(address,address,address[],address[],uint256[],uint256[])": FunctionFragment;
    "startQueuedWithdrawalWaitingPeriod(bytes32,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateWithdrawalRoot"
      | "canCompleteQueuedWithdrawal"
      | "completeQueuedWithdrawal"
      | "delegation"
      | "delegationSlasher"
      | "depositInto"
      | "getDeposits"
      | "investorDelegationLength"
      | "investorDelegationShares"
      | "queueWithdrawal"
      | "slashQueuedWithdrawal"
      | "slashShares"
      | "startQueuedWithdrawalWaitingPeriod"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateWithdrawalRoot",
    values: [IDelegationManager.QueuedWithdrawalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "canCompleteQueuedWithdrawal",
    values: [IDelegationManager.QueuedWithdrawalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "completeQueuedWithdrawal",
    values: [IDelegationManager.QueuedWithdrawalStruct, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegationSlasher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositInto",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposits",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "investorDelegationLength",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "investorDelegationShares",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queueWithdrawal",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      IDelegationManager.WithdrawerAndNonceStruct,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "slashQueuedWithdrawal",
    values: [PromiseOrValue<string>, IDelegationManager.QueuedWithdrawalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "slashShares",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startQueuedWithdrawalWaitingPeriod",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateWithdrawalRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canCompleteQueuedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeQueuedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegationSlasher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositInto",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorDelegationLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorDelegationShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashQueuedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startQueuedWithdrawalWaitingPeriod",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDelegationManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDelegationManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateWithdrawalRoot(
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    canCompleteQueuedWithdrawal(
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeQueuedWithdrawal(
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      receiveAsTokens: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    delegation(overrides?: CallOverrides): Promise<[string]>;

    delegationSlasher(overrides?: CallOverrides): Promise<[string]>;

    depositInto(
      delegationShare: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDeposits(
      depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    investorDelegationLength(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    investorDelegationShares(
      user: PromiseOrValue<string>,
      delegationShare: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    queueWithdrawal(
      delegationShareIndexes: PromiseOrValue<BigNumberish>[],
      delegationShares: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      shareAmounts: PromiseOrValue<BigNumberish>[],
      withdrawerAndNonce: IDelegationManager.WithdrawerAndNonceStruct,
      undelegateIfPossible: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slashQueuedWithdrawal(
      recipient: PromiseOrValue<string>,
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slashShares(
      slashedAddress: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      delegationShares: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      delegationShareIndexes: PromiseOrValue<BigNumberish>[],
      shareAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startQueuedWithdrawalWaitingPeriod(
      withdrawalRoot: PromiseOrValue<BytesLike>,
      stakeInactiveAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calculateWithdrawalRoot(
    queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  canCompleteQueuedWithdrawal(
    queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeQueuedWithdrawal(
    queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
    receiveAsTokens: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  delegation(overrides?: CallOverrides): Promise<string>;

  delegationSlasher(overrides?: CallOverrides): Promise<string>;

  depositInto(
    delegationShare: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDeposits(
    depositor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  investorDelegationLength(
    staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  investorDelegationShares(
    user: PromiseOrValue<string>,
    delegationShare: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  queueWithdrawal(
    delegationShareIndexes: PromiseOrValue<BigNumberish>[],
    delegationShares: PromiseOrValue<string>[],
    tokens: PromiseOrValue<string>[],
    shareAmounts: PromiseOrValue<BigNumberish>[],
    withdrawerAndNonce: IDelegationManager.WithdrawerAndNonceStruct,
    undelegateIfPossible: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slashQueuedWithdrawal(
    recipient: PromiseOrValue<string>,
    queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slashShares(
    slashedAddress: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    delegationShares: PromiseOrValue<string>[],
    tokens: PromiseOrValue<string>[],
    delegationShareIndexes: PromiseOrValue<BigNumberish>[],
    shareAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startQueuedWithdrawalWaitingPeriod(
    withdrawalRoot: PromiseOrValue<BytesLike>,
    stakeInactiveAfter: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateWithdrawalRoot(
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    canCompleteQueuedWithdrawal(
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    completeQueuedWithdrawal(
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      receiveAsTokens: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    delegation(overrides?: CallOverrides): Promise<string>;

    delegationSlasher(overrides?: CallOverrides): Promise<string>;

    depositInto(
      delegationShare: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeposits(
      depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    investorDelegationLength(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investorDelegationShares(
      user: PromiseOrValue<string>,
      delegationShare: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueWithdrawal(
      delegationShareIndexes: PromiseOrValue<BigNumberish>[],
      delegationShares: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      shareAmounts: PromiseOrValue<BigNumberish>[],
      withdrawerAndNonce: IDelegationManager.WithdrawerAndNonceStruct,
      undelegateIfPossible: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    slashQueuedWithdrawal(
      recipient: PromiseOrValue<string>,
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    slashShares(
      slashedAddress: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      delegationShares: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      delegationShareIndexes: PromiseOrValue<BigNumberish>[],
      shareAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    startQueuedWithdrawalWaitingPeriod(
      withdrawalRoot: PromiseOrValue<BytesLike>,
      stakeInactiveAfter: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    calculateWithdrawalRoot(
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canCompleteQueuedWithdrawal(
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeQueuedWithdrawal(
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      receiveAsTokens: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    delegation(overrides?: CallOverrides): Promise<BigNumber>;

    delegationSlasher(overrides?: CallOverrides): Promise<BigNumber>;

    depositInto(
      delegationShare: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDeposits(
      depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investorDelegationLength(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investorDelegationShares(
      user: PromiseOrValue<string>,
      delegationShare: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueWithdrawal(
      delegationShareIndexes: PromiseOrValue<BigNumberish>[],
      delegationShares: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      shareAmounts: PromiseOrValue<BigNumberish>[],
      withdrawerAndNonce: IDelegationManager.WithdrawerAndNonceStruct,
      undelegateIfPossible: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slashQueuedWithdrawal(
      recipient: PromiseOrValue<string>,
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slashShares(
      slashedAddress: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      delegationShares: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      delegationShareIndexes: PromiseOrValue<BigNumberish>[],
      shareAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startQueuedWithdrawalWaitingPeriod(
      withdrawalRoot: PromiseOrValue<BytesLike>,
      stakeInactiveAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateWithdrawalRoot(
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canCompleteQueuedWithdrawal(
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeQueuedWithdrawal(
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      receiveAsTokens: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    delegation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegationSlasher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositInto(
      delegationShare: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDeposits(
      depositor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investorDelegationLength(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investorDelegationShares(
      user: PromiseOrValue<string>,
      delegationShare: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueWithdrawal(
      delegationShareIndexes: PromiseOrValue<BigNumberish>[],
      delegationShares: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      shareAmounts: PromiseOrValue<BigNumberish>[],
      withdrawerAndNonce: IDelegationManager.WithdrawerAndNonceStruct,
      undelegateIfPossible: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slashQueuedWithdrawal(
      recipient: PromiseOrValue<string>,
      queuedWithdrawal: IDelegationManager.QueuedWithdrawalStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slashShares(
      slashedAddress: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      delegationShares: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      delegationShareIndexes: PromiseOrValue<BigNumberish>[],
      shareAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startQueuedWithdrawalWaitingPeriod(
      withdrawalRoot: PromiseOrValue<BytesLike>,
      stakeInactiveAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
