/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IDelegationSlasherInterface extends utils.Interface {
  functions: {
    "addGloballyPermissionedContracts(address[])": FunctionFragment;
    "allowToSlash(address)": FunctionFragment;
    "bondedUntil(address,address)": FunctionFragment;
    "canSlash(address,address)": FunctionFragment;
    "freezeOperator(address)": FunctionFragment;
    "isFrozen(address)": FunctionFragment;
    "removeGloballyPermissionedContracts(address[])": FunctionFragment;
    "resetFrozenStatus(address[])": FunctionFragment;
    "revokeSlashingAbility(address,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addGloballyPermissionedContracts"
      | "allowToSlash"
      | "bondedUntil"
      | "canSlash"
      | "freezeOperator"
      | "isFrozen"
      | "removeGloballyPermissionedContracts"
      | "resetFrozenStatus"
      | "revokeSlashingAbility"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addGloballyPermissionedContracts",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowToSlash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondedUntil",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canSlash",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFrozen",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGloballyPermissionedContracts",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "resetFrozenStatus",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSlashingAbility",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGloballyPermissionedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowToSlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondedUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canSlash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeGloballyPermissionedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetFrozenStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSlashingAbility",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDelegationSlasher extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDelegationSlasherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowToSlash(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondedUntil(
      operator: PromiseOrValue<string>,
      slashingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    canSlash(
      toBeSlashed: PromiseOrValue<string>,
      slashingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    freezeOperator(
      toBeFrozen: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isFrozen(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetFrozenStatus(
      frozenAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeSlashingAbility(
      operator: PromiseOrValue<string>,
      unbondedAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addGloballyPermissionedContracts(
    contracts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowToSlash(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondedUntil(
    operator: PromiseOrValue<string>,
    slashingContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  canSlash(
    toBeSlashed: PromiseOrValue<string>,
    slashingContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  freezeOperator(
    toBeFrozen: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isFrozen(
    staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeGloballyPermissionedContracts(
    contracts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetFrozenStatus(
    frozenAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeSlashingAbility(
    operator: PromiseOrValue<string>,
    unbondedAfter: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowToSlash(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondedUntil(
      operator: PromiseOrValue<string>,
      slashingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    canSlash(
      toBeSlashed: PromiseOrValue<string>,
      slashingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    freezeOperator(
      toBeFrozen: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isFrozen(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    resetFrozenStatus(
      frozenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokeSlashingAbility(
      operator: PromiseOrValue<string>,
      unbondedAfter: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowToSlash(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondedUntil(
      operator: PromiseOrValue<string>,
      slashingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canSlash(
      toBeSlashed: PromiseOrValue<string>,
      slashingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freezeOperator(
      toBeFrozen: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isFrozen(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetFrozenStatus(
      frozenAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeSlashingAbility(
      operator: PromiseOrValue<string>,
      unbondedAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowToSlash(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondedUntil(
      operator: PromiseOrValue<string>,
      slashingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canSlash(
      toBeSlashed: PromiseOrValue<string>,
      slashingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freezeOperator(
      toBeFrozen: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isFrozen(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetFrozenStatus(
      frozenAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeSlashingAbility(
      operator: PromiseOrValue<string>,
      unbondedAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
