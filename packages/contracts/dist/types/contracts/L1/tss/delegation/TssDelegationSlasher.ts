/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface TssDelegationSlasherInterface extends utils.Interface {
  functions: {
    "addGloballyPermissionedContracts(address[])": FunctionFragment;
    "allowToSlash(address)": FunctionFragment;
    "bondedUntil(address,address)": FunctionFragment;
    "canSlash(address,address)": FunctionFragment;
    "delegation()": FunctionFragment;
    "freezeOperator(address)": FunctionFragment;
    "globallyPermissionedContracts(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "investmentManager()": FunctionFragment;
    "isFrozen(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeGloballyPermissionedContracts(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetFrozenStatus(address[])": FunctionFragment;
    "revokeSlashingAbility(address,uint32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addGloballyPermissionedContracts"
      | "allowToSlash"
      | "bondedUntil"
      | "canSlash"
      | "delegation"
      | "freezeOperator"
      | "globallyPermissionedContracts"
      | "initialize"
      | "investmentManager"
      | "isFrozen"
      | "owner"
      | "paused"
      | "removeGloballyPermissionedContracts"
      | "renounceOwnership"
      | "resetFrozenStatus"
      | "revokeSlashingAbility"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addGloballyPermissionedContracts",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowToSlash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bondedUntil",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canSlash",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freezeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "globallyPermissionedContracts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "investmentManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFrozen",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeGloballyPermissionedContracts",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetFrozenStatus",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSlashingAbility",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGloballyPermissionedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowToSlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondedUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canSlash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globallyPermissionedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investmentManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeGloballyPermissionedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetFrozenStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSlashingAbility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "FrozenStatusReset(address)": EventFragment;
    "GloballyPermissionedContractAdded(address)": EventFragment;
    "GloballyPermissionedContractRemoved(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OperatorSlashed(address,address)": EventFragment;
    "OptedIntoSlashing(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SlashingAbilityRevoked(address,address,uint32)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FrozenStatusReset"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GloballyPermissionedContractAdded"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GloballyPermissionedContractRemoved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorSlashed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OptedIntoSlashing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlashingAbilityRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface FrozenStatusResetEventObject {
  previouslySlashedAddress: string;
}
export type FrozenStatusResetEvent = TypedEvent<
  [string],
  FrozenStatusResetEventObject
>;

export type FrozenStatusResetEventFilter =
  TypedEventFilter<FrozenStatusResetEvent>;

export interface GloballyPermissionedContractAddedEventObject {
  contractAdded: string;
}
export type GloballyPermissionedContractAddedEvent = TypedEvent<
  [string],
  GloballyPermissionedContractAddedEventObject
>;

export type GloballyPermissionedContractAddedEventFilter =
  TypedEventFilter<GloballyPermissionedContractAddedEvent>;

export interface GloballyPermissionedContractRemovedEventObject {
  contractRemoved: string;
}
export type GloballyPermissionedContractRemovedEvent = TypedEvent<
  [string],
  GloballyPermissionedContractRemovedEventObject
>;

export type GloballyPermissionedContractRemovedEventFilter =
  TypedEventFilter<GloballyPermissionedContractRemovedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OperatorSlashedEventObject {
  slashedOperator: string;
  slashingContract: string;
}
export type OperatorSlashedEvent = TypedEvent<
  [string, string],
  OperatorSlashedEventObject
>;

export type OperatorSlashedEventFilter = TypedEventFilter<OperatorSlashedEvent>;

export interface OptedIntoSlashingEventObject {
  operator: string;
  contractAddress: string;
}
export type OptedIntoSlashingEvent = TypedEvent<
  [string, string],
  OptedIntoSlashingEventObject
>;

export type OptedIntoSlashingEventFilter =
  TypedEventFilter<OptedIntoSlashingEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SlashingAbilityRevokedEventObject {
  operator: string;
  contractAddress: string;
  unbondedAfter: number;
}
export type SlashingAbilityRevokedEvent = TypedEvent<
  [string, string, number],
  SlashingAbilityRevokedEventObject
>;

export type SlashingAbilityRevokedEventFilter =
  TypedEventFilter<SlashingAbilityRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface TssDelegationSlasher extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TssDelegationSlasherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowToSlash(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondedUntil(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    canSlash(
      toBeSlashed: PromiseOrValue<string>,
      slashingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    delegation(overrides?: CallOverrides): Promise<[string]>;

    freezeOperator(
      toBeFrozen: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    globallyPermissionedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      initialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    investmentManager(overrides?: CallOverrides): Promise<[string]>;

    isFrozen(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetFrozenStatus(
      frozenAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeSlashingAbility(
      operator: PromiseOrValue<string>,
      unbondedAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addGloballyPermissionedContracts(
    contracts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowToSlash(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondedUntil(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  canSlash(
    toBeSlashed: PromiseOrValue<string>,
    slashingContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  delegation(overrides?: CallOverrides): Promise<string>;

  freezeOperator(
    toBeFrozen: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  globallyPermissionedContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    initialOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  investmentManager(overrides?: CallOverrides): Promise<string>;

  isFrozen(
    staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeGloballyPermissionedContracts(
    contracts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetFrozenStatus(
    frozenAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeSlashingAbility(
    operator: PromiseOrValue<string>,
    unbondedAfter: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowToSlash(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondedUntil(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    canSlash(
      toBeSlashed: PromiseOrValue<string>,
      slashingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delegation(overrides?: CallOverrides): Promise<string>;

    freezeOperator(
      toBeFrozen: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    globallyPermissionedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      initialOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    investmentManager(overrides?: CallOverrides): Promise<string>;

    isFrozen(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetFrozenStatus(
      frozenAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokeSlashingAbility(
      operator: PromiseOrValue<string>,
      unbondedAfter: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FrozenStatusReset(address)"(
      previouslySlashedAddress?: PromiseOrValue<string> | null
    ): FrozenStatusResetEventFilter;
    FrozenStatusReset(
      previouslySlashedAddress?: PromiseOrValue<string> | null
    ): FrozenStatusResetEventFilter;

    "GloballyPermissionedContractAdded(address)"(
      contractAdded?: PromiseOrValue<string> | null
    ): GloballyPermissionedContractAddedEventFilter;
    GloballyPermissionedContractAdded(
      contractAdded?: PromiseOrValue<string> | null
    ): GloballyPermissionedContractAddedEventFilter;

    "GloballyPermissionedContractRemoved(address)"(
      contractRemoved?: PromiseOrValue<string> | null
    ): GloballyPermissionedContractRemovedEventFilter;
    GloballyPermissionedContractRemoved(
      contractRemoved?: PromiseOrValue<string> | null
    ): GloballyPermissionedContractRemovedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OperatorSlashed(address,address)"(
      slashedOperator?: PromiseOrValue<string> | null,
      slashingContract?: PromiseOrValue<string> | null
    ): OperatorSlashedEventFilter;
    OperatorSlashed(
      slashedOperator?: PromiseOrValue<string> | null,
      slashingContract?: PromiseOrValue<string> | null
    ): OperatorSlashedEventFilter;

    "OptedIntoSlashing(address,address)"(
      operator?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): OptedIntoSlashingEventFilter;
    OptedIntoSlashing(
      operator?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null
    ): OptedIntoSlashingEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SlashingAbilityRevoked(address,address,uint32)"(
      operator?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null,
      unbondedAfter?: null
    ): SlashingAbilityRevokedEventFilter;
    SlashingAbilityRevoked(
      operator?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null,
      unbondedAfter?: null
    ): SlashingAbilityRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowToSlash(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondedUntil(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canSlash(
      toBeSlashed: PromiseOrValue<string>,
      slashingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegation(overrides?: CallOverrides): Promise<BigNumber>;

    freezeOperator(
      toBeFrozen: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    globallyPermissionedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      initialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    investmentManager(overrides?: CallOverrides): Promise<BigNumber>;

    isFrozen(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetFrozenStatus(
      frozenAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeSlashingAbility(
      operator: PromiseOrValue<string>,
      unbondedAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowToSlash(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondedUntil(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canSlash(
      toBeSlashed: PromiseOrValue<string>,
      slashingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    freezeOperator(
      toBeFrozen: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    globallyPermissionedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      initialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    investmentManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFrozen(
      staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGloballyPermissionedContracts(
      contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetFrozenStatus(
      frozenAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeSlashingAbility(
      operator: PromiseOrValue<string>,
      unbondedAfter: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
