/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace ITssGroupManager {
  export type TssMemberStruct = {
    publicKey: PromiseOrValue<BytesLike>;
    nodeAddress: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type TssMemberStructOutput = [string, string, number] & {
    publicKey: string;
    nodeAddress: string;
    status: number;
  };
}

export interface ITssGroupManagerInterface extends utils.Interface {
  functions: {
    "getTssGroupInfo()": FunctionFragment;
    "getTssGroupMembers()": FunctionFragment;
    "getTssGroupUnJailMembers()": FunctionFragment;
    "getTssInactiveGroupInfo()": FunctionFragment;
    "getTssMember(bytes)": FunctionFragment;
    "inActiveIsEmpty()": FunctionFragment;
    "isTssGroupUnJailMembers(address)": FunctionFragment;
    "memberExistActive(address)": FunctionFragment;
    "memberExistActive(bytes)": FunctionFragment;
    "memberExistInActive(bytes)": FunctionFragment;
    "memberJail(bytes)": FunctionFragment;
    "memberUnJail(bytes)": FunctionFragment;
    "publicKeyToAddress(bytes)": FunctionFragment;
    "removeMember(bytes)": FunctionFragment;
    "setGroupPublicKey(bytes,bytes)": FunctionFragment;
    "setTssGroupMember(uint256,bytes[])": FunctionFragment;
    "verifySign(bytes32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getTssGroupInfo"
      | "getTssGroupMembers"
      | "getTssGroupUnJailMembers"
      | "getTssInactiveGroupInfo"
      | "getTssMember"
      | "inActiveIsEmpty"
      | "isTssGroupUnJailMembers"
      | "memberExistActive(address)"
      | "memberExistActive(bytes)"
      | "memberExistInActive"
      | "memberJail"
      | "memberUnJail"
      | "publicKeyToAddress"
      | "removeMember"
      | "setGroupPublicKey"
      | "setTssGroupMember"
      | "verifySign"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTssGroupInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTssGroupMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTssGroupUnJailMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTssInactiveGroupInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTssMember",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "inActiveIsEmpty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTssGroupUnJailMembers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberExistActive(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberExistActive(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberExistInActive",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberJail",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberUnJail",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "publicKeyToAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGroupPublicKey",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTssGroupMember",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySign",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTssGroupInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTssGroupMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTssGroupUnJailMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTssInactiveGroupInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTssMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inActiveIsEmpty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTssGroupUnJailMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberExistActive(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberExistActive(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberExistInActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "memberJail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "memberUnJail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicKeyToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGroupPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTssGroupMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifySign", data: BytesLike): Result;

  events: {};
}

export interface ITssGroupManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITssGroupManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTssGroupInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTssGroupMembers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTssGroupUnJailMembers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTssInactiveGroupInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTssMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    inActiveIsEmpty(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isTssGroupUnJailMembers(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "memberExistActive(address)"(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "memberExistActive(bytes)"(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    memberExistInActive(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    memberJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    memberUnJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    publicKeyToAddress(
      publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGroupPublicKey(
      _publicKey: PromiseOrValue<BytesLike>,
      _groupPublicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTssGroupMember(
      _threshold: PromiseOrValue<BigNumberish>,
      _batchPublicKey: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifySign(
      _message: PromiseOrValue<BytesLike>,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getTssGroupInfo(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTssGroupMembers(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTssGroupUnJailMembers(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTssInactiveGroupInfo(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTssMember(
    _publicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  inActiveIsEmpty(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isTssGroupUnJailMembers(
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "memberExistActive(address)"(
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "memberExistActive(bytes)"(
    _publicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  memberExistInActive(
    _publicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  memberJail(
    _publicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  memberUnJail(
    _publicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  publicKeyToAddress(
    publicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMember(
    _publicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGroupPublicKey(
    _publicKey: PromiseOrValue<BytesLike>,
    _groupPublicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTssGroupMember(
    _threshold: PromiseOrValue<BigNumberish>,
    _batchPublicKey: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifySign(
    _message: PromiseOrValue<BytesLike>,
    _sig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getTssGroupInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string, string[]]>;

    getTssGroupMembers(overrides?: CallOverrides): Promise<string[]>;

    getTssGroupUnJailMembers(overrides?: CallOverrides): Promise<string[]>;

    getTssInactiveGroupInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string[]]>;

    getTssMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ITssGroupManager.TssMemberStructOutput>;

    inActiveIsEmpty(overrides?: CallOverrides): Promise<boolean>;

    isTssGroupUnJailMembers(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "memberExistActive(address)"(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "memberExistActive(bytes)"(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    memberExistInActive(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    memberJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    memberUnJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    publicKeyToAddress(
      publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGroupPublicKey(
      _publicKey: PromiseOrValue<BytesLike>,
      _groupPublicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTssGroupMember(
      _threshold: PromiseOrValue<BigNumberish>,
      _batchPublicKey: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    verifySign(
      _message: PromiseOrValue<BytesLike>,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getTssGroupInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTssGroupMembers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTssGroupUnJailMembers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTssInactiveGroupInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTssMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    inActiveIsEmpty(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isTssGroupUnJailMembers(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "memberExistActive(address)"(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "memberExistActive(bytes)"(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    memberExistInActive(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    memberJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    memberUnJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    publicKeyToAddress(
      publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGroupPublicKey(
      _publicKey: PromiseOrValue<BytesLike>,
      _groupPublicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTssGroupMember(
      _threshold: PromiseOrValue<BigNumberish>,
      _batchPublicKey: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifySign(
      _message: PromiseOrValue<BytesLike>,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTssGroupInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTssGroupMembers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTssGroupUnJailMembers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTssInactiveGroupInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTssMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    inActiveIsEmpty(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isTssGroupUnJailMembers(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "memberExistActive(address)"(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "memberExistActive(bytes)"(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    memberExistInActive(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    memberJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    memberUnJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    publicKeyToAddress(
      publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGroupPublicKey(
      _publicKey: PromiseOrValue<BytesLike>,
      _groupPublicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTssGroupMember(
      _threshold: PromiseOrValue<BigNumberish>,
      _batchPublicKey: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifySign(
      _message: PromiseOrValue<BytesLike>,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
