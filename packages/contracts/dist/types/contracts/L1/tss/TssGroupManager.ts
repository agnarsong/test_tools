/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace ITssGroupManager {
  export type TssMemberStruct = {
    publicKey: PromiseOrValue<BytesLike>;
    nodeAddress: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type TssMemberStructOutput = [string, string, number] & {
    publicKey: string;
    nodeAddress: string;
    status: number;
  };
}

export interface TssGroupManagerInterface extends utils.Interface {
  functions: {
    "getTssGroupInfo()": FunctionFragment;
    "getTssGroupMembers()": FunctionFragment;
    "getTssGroupUnJailMembers()": FunctionFragment;
    "getTssInactiveGroupInfo()": FunctionFragment;
    "getTssMember(bytes)": FunctionFragment;
    "inActiveIsEmpty()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isInActiveMember(bytes)": FunctionFragment;
    "isTssGroupUnJailMembers(address)": FunctionFragment;
    "memberExistActive(address)": FunctionFragment;
    "memberExistActive(bytes)": FunctionFragment;
    "memberExistInActive(bytes)": FunctionFragment;
    "memberJail(bytes)": FunctionFragment;
    "memberUnJail(bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "publicKeyToAddress(bytes)": FunctionFragment;
    "recover(bytes32,bytes)": FunctionFragment;
    "removeMember(bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGroupPublicKey(bytes,bytes)": FunctionFragment;
    "setStakingSlash(address)": FunctionFragment;
    "setTssGroupMember(uint256,bytes[])": FunctionFragment;
    "stakingSlash()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "tssActiveMemberInfo(bytes)": FunctionFragment;
    "verifySign(bytes32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getTssGroupInfo"
      | "getTssGroupMembers"
      | "getTssGroupUnJailMembers"
      | "getTssInactiveGroupInfo"
      | "getTssMember"
      | "inActiveIsEmpty"
      | "initialize"
      | "isInActiveMember"
      | "isTssGroupUnJailMembers"
      | "memberExistActive(address)"
      | "memberExistActive(bytes)"
      | "memberExistInActive"
      | "memberJail"
      | "memberUnJail"
      | "owner"
      | "publicKeyToAddress"
      | "recover"
      | "removeMember"
      | "renounceOwnership"
      | "setGroupPublicKey"
      | "setStakingSlash"
      | "setTssGroupMember"
      | "stakingSlash"
      | "transferOwnership"
      | "tssActiveMemberInfo"
      | "verifySign"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTssGroupInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTssGroupMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTssGroupUnJailMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTssInactiveGroupInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTssMember",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "inActiveIsEmpty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInActiveMember",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTssGroupUnJailMembers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberExistActive(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberExistActive(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberExistInActive",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberJail",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberUnJail",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicKeyToAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGroupPublicKey",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingSlash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTssGroupMember",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingSlash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tssActiveMemberInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySign",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTssGroupInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTssGroupMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTssGroupUnJailMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTssInactiveGroupInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTssMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inActiveIsEmpty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInActiveMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTssGroupUnJailMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberExistActive(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberExistActive(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberExistInActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "memberJail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "memberUnJail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicKeyToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGroupPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingSlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTssGroupMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingSlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tssActiveMemberInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifySign", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "tssActiveMemberAppended(uint256,bytes,bytes[])": EventFragment;
    "tssGroupMemberAppend(uint256,uint256,bytes[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "tssActiveMemberAppended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "tssGroupMemberAppend"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface tssActiveMemberAppendedEventObject {
  _roundId: BigNumber;
  _groupKey: string;
  activeTssMembers: string[];
}
export type tssActiveMemberAppendedEvent = TypedEvent<
  [BigNumber, string, string[]],
  tssActiveMemberAppendedEventObject
>;

export type tssActiveMemberAppendedEventFilter =
  TypedEventFilter<tssActiveMemberAppendedEvent>;

export interface tssGroupMemberAppendEventObject {
  _roundId: BigNumber;
  _threshold: BigNumber;
  _inActiveTssMembers: string[];
}
export type tssGroupMemberAppendEvent = TypedEvent<
  [BigNumber, BigNumber, string[]],
  tssGroupMemberAppendEventObject
>;

export type tssGroupMemberAppendEventFilter =
  TypedEventFilter<tssGroupMemberAppendEvent>;

export interface TssGroupManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TssGroupManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTssGroupInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string, string[]]>;

    getTssGroupMembers(overrides?: CallOverrides): Promise<[string[]]>;

    getTssGroupUnJailMembers(overrides?: CallOverrides): Promise<[string[]]>;

    getTssInactiveGroupInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string[]]>;

    getTssMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ITssGroupManager.TssMemberStructOutput]>;

    inActiveIsEmpty(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isInActiveMember(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTssGroupUnJailMembers(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "memberExistActive(address)"(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "memberExistActive(bytes)"(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    memberExistInActive(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    memberJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    memberUnJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    publicKeyToAddress(
      publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    recover(
      _ethSignedMessageHash: PromiseOrValue<BytesLike>,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGroupPublicKey(
      _publicKey: PromiseOrValue<BytesLike>,
      _groupPublicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakingSlash(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTssGroupMember(
      _threshold: PromiseOrValue<BigNumberish>,
      _batchPublicKey: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakingSlash(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tssActiveMemberInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        publicKey: string;
        nodeAddress: string;
        status: number;
      }
    >;

    verifySign(
      _message: PromiseOrValue<BytesLike>,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getTssGroupInfo(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, string, string[]]>;

  getTssGroupMembers(overrides?: CallOverrides): Promise<string[]>;

  getTssGroupUnJailMembers(overrides?: CallOverrides): Promise<string[]>;

  getTssInactiveGroupInfo(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, string[]]>;

  getTssMember(
    _publicKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ITssGroupManager.TssMemberStructOutput>;

  inActiveIsEmpty(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isInActiveMember(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTssGroupUnJailMembers(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "memberExistActive(address)"(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "memberExistActive(bytes)"(
    _publicKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  memberExistInActive(
    _publicKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  memberJail(
    _publicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  memberUnJail(
    _publicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  publicKeyToAddress(
    publicKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  recover(
    _ethSignedMessageHash: PromiseOrValue<BytesLike>,
    _sig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeMember(
    _publicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGroupPublicKey(
    _publicKey: PromiseOrValue<BytesLike>,
    _groupPublicKey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakingSlash(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTssGroupMember(
    _threshold: PromiseOrValue<BigNumberish>,
    _batchPublicKey: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakingSlash(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tssActiveMemberInfo(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      publicKey: string;
      nodeAddress: string;
      status: number;
    }
  >;

  verifySign(
    _message: PromiseOrValue<BytesLike>,
    _sig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getTssGroupInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string, string[]]>;

    getTssGroupMembers(overrides?: CallOverrides): Promise<string[]>;

    getTssGroupUnJailMembers(overrides?: CallOverrides): Promise<string[]>;

    getTssInactiveGroupInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string[]]>;

    getTssMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ITssGroupManager.TssMemberStructOutput>;

    inActiveIsEmpty(overrides?: CallOverrides): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isInActiveMember(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTssGroupUnJailMembers(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "memberExistActive(address)"(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "memberExistActive(bytes)"(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    memberExistInActive(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    memberJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    memberUnJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    publicKeyToAddress(
      publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    recover(
      _ethSignedMessageHash: PromiseOrValue<BytesLike>,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGroupPublicKey(
      _publicKey: PromiseOrValue<BytesLike>,
      _groupPublicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingSlash(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTssGroupMember(
      _threshold: PromiseOrValue<BigNumberish>,
      _batchPublicKey: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    stakingSlash(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tssActiveMemberInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        publicKey: string;
        nodeAddress: string;
        status: number;
      }
    >;

    verifySign(
      _message: PromiseOrValue<BytesLike>,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "tssActiveMemberAppended(uint256,bytes,bytes[])"(
      _roundId?: null,
      _groupKey?: null,
      activeTssMembers?: null
    ): tssActiveMemberAppendedEventFilter;
    tssActiveMemberAppended(
      _roundId?: null,
      _groupKey?: null,
      activeTssMembers?: null
    ): tssActiveMemberAppendedEventFilter;

    "tssGroupMemberAppend(uint256,uint256,bytes[])"(
      _roundId?: null,
      _threshold?: null,
      _inActiveTssMembers?: null
    ): tssGroupMemberAppendEventFilter;
    tssGroupMemberAppend(
      _roundId?: null,
      _threshold?: null,
      _inActiveTssMembers?: null
    ): tssGroupMemberAppendEventFilter;
  };

  estimateGas: {
    getTssGroupInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getTssGroupMembers(overrides?: CallOverrides): Promise<BigNumber>;

    getTssGroupUnJailMembers(overrides?: CallOverrides): Promise<BigNumber>;

    getTssInactiveGroupInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getTssMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inActiveIsEmpty(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isInActiveMember(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTssGroupUnJailMembers(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "memberExistActive(address)"(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "memberExistActive(bytes)"(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberExistInActive(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    memberUnJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    publicKeyToAddress(
      publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recover(
      _ethSignedMessageHash: PromiseOrValue<BytesLike>,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGroupPublicKey(
      _publicKey: PromiseOrValue<BytesLike>,
      _groupPublicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakingSlash(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTssGroupMember(
      _threshold: PromiseOrValue<BigNumberish>,
      _batchPublicKey: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakingSlash(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tssActiveMemberInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifySign(
      _message: PromiseOrValue<BytesLike>,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTssGroupInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTssGroupMembers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTssGroupUnJailMembers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTssInactiveGroupInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTssMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inActiveIsEmpty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isInActiveMember(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTssGroupUnJailMembers(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "memberExistActive(address)"(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "memberExistActive(bytes)"(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberExistInActive(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    memberUnJail(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicKeyToAddress(
      publicKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recover(
      _ethSignedMessageHash: PromiseOrValue<BytesLike>,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeMember(
      _publicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGroupPublicKey(
      _publicKey: PromiseOrValue<BytesLike>,
      _groupPublicKey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakingSlash(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTssGroupMember(
      _threshold: PromiseOrValue<BigNumberish>,
      _batchPublicKey: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakingSlash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tssActiveMemberInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifySign(
      _message: PromiseOrValue<BytesLike>,
      _sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
