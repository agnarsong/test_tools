/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace Lib_BVMCodec {
  export type ChainBatchHeaderStruct = {
    batchIndex: PromiseOrValue<BigNumberish>;
    batchRoot: PromiseOrValue<BytesLike>;
    batchSize: PromiseOrValue<BigNumberish>;
    prevTotalElements: PromiseOrValue<BigNumberish>;
    signature: PromiseOrValue<BytesLike>;
    extraData: PromiseOrValue<BytesLike>;
  };

  export type ChainBatchHeaderStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    batchIndex: BigNumber;
    batchRoot: string;
    batchSize: BigNumber;
    prevTotalElements: BigNumber;
    signature: string;
    extraData: string;
  };
}

export interface RollupInterface extends utils.Interface {
  functions: {
    "addToOperatorWhitelist(address[])": FunctionFragment;
    "addToStakerWhitelist(address[])": FunctionFragment;
    "advanceStake(uint256)": FunctionFragment;
    "assertions()": FunctionFragment;
    "baseStakeAmount()": FunctionFragment;
    "challengeAssertion(address[2],uint256[2])": FunctionFragment;
    "challengeCtx()": FunctionFragment;
    "completeChallenge(address,address)": FunctionFragment;
    "confirmFirstUnresolvedAssertion()": FunctionFragment;
    "confirmedInboxSize()": FunctionFragment;
    "createAssertion(bytes32,uint256)": FunctionFragment;
    "createAssertionWithStateBatch(bytes32,uint256,bytes32[],uint256,bytes)": FunctionFragment;
    "currentRequiredStake()": FunctionFragment;
    "initialize(address,address,address,address,address,uint256,uint256,bytes32,address[],address[])": FunctionFragment;
    "isStaked(address)": FunctionFragment;
    "lastConfirmedAssertionID()": FunctionFragment;
    "lastCreatedAssertionID()": FunctionFragment;
    "lastResolvedAssertionID()": FunctionFragment;
    "libAddressManager()": FunctionFragment;
    "minimumAssertionPeriod()": FunctionFragment;
    "numStakers()": FunctionFragment;
    "operatorWhitelist(address)": FunctionFragment;
    "operatorslist(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registers(address)": FunctionFragment;
    "rejectFirstUnresolvedAssertion()": FunctionFragment;
    "rejectLatestCreatedAssertionWithBatch((uint256,bytes32,uint256,uint256,bytes,bytes))": FunctionFragment;
    "removeFromOperatorWhitelist(address[])": FunctionFragment;
    "removeFromStakerWhitelist(address[])": FunctionFragment;
    "removeOldZombies()": FunctionFragment;
    "removeStake(address)": FunctionFragment;
    "resolve(string)": FunctionFragment;
    "stake(uint256,address)": FunctionFragment;
    "stakeToken()": FunctionFragment;
    "stakerWhitelist(address)": FunctionFragment;
    "stakers(address)": FunctionFragment;
    "stakerslist(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "verifier()": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawableFunds(address)": FunctionFragment;
    "zombies(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addToOperatorWhitelist"
      | "addToStakerWhitelist"
      | "advanceStake"
      | "assertions"
      | "baseStakeAmount"
      | "challengeAssertion"
      | "challengeCtx"
      | "completeChallenge"
      | "confirmFirstUnresolvedAssertion"
      | "confirmedInboxSize"
      | "createAssertion"
      | "createAssertionWithStateBatch"
      | "currentRequiredStake"
      | "initialize"
      | "isStaked"
      | "lastConfirmedAssertionID"
      | "lastCreatedAssertionID"
      | "lastResolvedAssertionID"
      | "libAddressManager"
      | "minimumAssertionPeriod"
      | "numStakers"
      | "operatorWhitelist"
      | "operatorslist"
      | "owner"
      | "registers"
      | "rejectFirstUnresolvedAssertion"
      | "rejectLatestCreatedAssertionWithBatch"
      | "removeFromOperatorWhitelist"
      | "removeFromStakerWhitelist"
      | "removeOldZombies"
      | "removeStake"
      | "resolve"
      | "stake"
      | "stakeToken"
      | "stakerWhitelist"
      | "stakers"
      | "stakerslist"
      | "transferOwnership"
      | "unstake"
      | "verifier"
      | "withdraw"
      | "withdrawableFunds"
      | "zombies"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToOperatorWhitelist",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addToStakerWhitelist",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "advanceStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assertions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeAssertion",
    values: [
      [PromiseOrValue<string>, PromiseOrValue<string>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeCtx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeChallenge",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmFirstUnresolvedAssertion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmedInboxSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAssertion",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAssertionWithStateBatch",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRequiredStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isStaked",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastConfirmedAssertionID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastCreatedAssertionID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastResolvedAssertionID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "libAddressManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumAssertionPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numStakers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorslist",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectFirstUnresolvedAssertion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rejectLatestCreatedAssertionWithBatch",
    values: [Lib_BVMCodec.ChainBatchHeaderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromOperatorWhitelist",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromStakerWhitelist",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOldZombies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeStake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakerWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerslist",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawableFunds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "zombies",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToOperatorWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToStakerWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advanceStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assertions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeAssertion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeCtx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmFirstUnresolvedAssertion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmedInboxSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAssertion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAssertionWithStateBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRequiredStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStaked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastConfirmedAssertionID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCreatedAssertionID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastResolvedAssertionID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "libAddressManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumAssertionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numStakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorslist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectFirstUnresolvedAssertion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectLatestCreatedAssertionWithBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromOperatorWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromStakerWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOldZombies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakerWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakerslist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zombies", data: BytesLike): Result;

  events: {
    "AssertionChallenged(uint256,address)": EventFragment;
    "AssertionConfirmed(uint256)": EventFragment;
    "AssertionCreated(uint256,address,bytes32,uint256)": EventFragment;
    "AssertionRejected(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StakerStaked(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssertionChallenged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertionConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssertionRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakerStaked"): EventFragment;
}

export interface AssertionChallengedEventObject {
  assertionID: BigNumber;
  challengeAddr: string;
}
export type AssertionChallengedEvent = TypedEvent<
  [BigNumber, string],
  AssertionChallengedEventObject
>;

export type AssertionChallengedEventFilter =
  TypedEventFilter<AssertionChallengedEvent>;

export interface AssertionConfirmedEventObject {
  assertionID: BigNumber;
}
export type AssertionConfirmedEvent = TypedEvent<
  [BigNumber],
  AssertionConfirmedEventObject
>;

export type AssertionConfirmedEventFilter =
  TypedEventFilter<AssertionConfirmedEvent>;

export interface AssertionCreatedEventObject {
  assertionID: BigNumber;
  asserterAddr: string;
  vmHash: string;
  inboxSize: BigNumber;
}
export type AssertionCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  AssertionCreatedEventObject
>;

export type AssertionCreatedEventFilter =
  TypedEventFilter<AssertionCreatedEvent>;

export interface AssertionRejectedEventObject {
  assertionID: BigNumber;
}
export type AssertionRejectedEvent = TypedEvent<
  [BigNumber],
  AssertionRejectedEventObject
>;

export type AssertionRejectedEventFilter =
  TypedEventFilter<AssertionRejectedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StakerStakedEventObject {
  stakerAddr: string;
  assertionID: BigNumber;
}
export type StakerStakedEvent = TypedEvent<
  [string, BigNumber],
  StakerStakedEventObject
>;

export type StakerStakedEventFilter = TypedEventFilter<StakerStakedEvent>;

export interface Rollup extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RollupInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToOperatorWhitelist(
      toAddAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToStakerWhitelist(
      toAddAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    advanceStake(
      assertionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assertions(overrides?: CallOverrides): Promise<[string]>;

    baseStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    challengeAssertion(
      players: [PromiseOrValue<string>, PromiseOrValue<string>],
      assertionIDs: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    challengeCtx(
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, string, BigNumber, BigNumber] & {
        completed: boolean;
        challengeAddress: string;
        defenderAddress: string;
        challengerAddress: string;
        defenderAssertionID: BigNumber;
        challengerAssertionID: BigNumber;
      }
    >;

    completeChallenge(
      winner: PromiseOrValue<string>,
      loser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmFirstUnresolvedAssertion(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmedInboxSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    createAssertion(
      vmHash: PromiseOrValue<BytesLike>,
      inboxSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAssertionWithStateBatch(
      vmHash: PromiseOrValue<BytesLike>,
      inboxSize: PromiseOrValue<BigNumberish>,
      _batch: PromiseOrValue<BytesLike>[],
      _shouldStartAtElement: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentRequiredStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _owner: PromiseOrValue<string>,
      _verifier: PromiseOrValue<string>,
      _stakeToken: PromiseOrValue<string>,
      _libAddressManager: PromiseOrValue<string>,
      _assertionMap: PromiseOrValue<string>,
      _minimumAssertionPeriod: PromiseOrValue<BigNumberish>,
      _baseStakeAmount: PromiseOrValue<BigNumberish>,
      _initialVMhash: PromiseOrValue<BytesLike>,
      stakerWhitelists: PromiseOrValue<string>[],
      operatorWhitelists: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isStaked(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastConfirmedAssertionID(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastCreatedAssertionID(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastResolvedAssertionID(overrides?: CallOverrides): Promise<[BigNumber]>;

    libAddressManager(overrides?: CallOverrides): Promise<[string]>;

    minimumAssertionPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    numStakers(overrides?: CallOverrides): Promise<[BigNumber]>;

    operatorWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    operatorslist(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rejectFirstUnresolvedAssertion(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectLatestCreatedAssertionWithBatch(
      _batchHeader: Lib_BVMCodec.ChainBatchHeaderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeFromOperatorWhitelist(
      toRemoveAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeFromStakerWhitelist(
      toRemoveAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeOldZombies(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeStake(
      stakerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolve(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stake(
      stakeAmount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeToken(overrides?: CallOverrides): Promise<[string]>;

    stakerWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, string, string] & {
        isStaked: boolean;
        amountStaked: BigNumber;
        assertionID: BigNumber;
        operator: string;
        currentChallenge: string;
      }
    >;

    stakerslist(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifier(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawableFunds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    zombies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        stakerAddress: string;
        lastAssertionID: BigNumber;
      }
    >;
  };

  addToOperatorWhitelist(
    toAddAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToStakerWhitelist(
    toAddAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  advanceStake(
    assertionID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assertions(overrides?: CallOverrides): Promise<string>;

  baseStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  challengeAssertion(
    players: [PromiseOrValue<string>, PromiseOrValue<string>],
    assertionIDs: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  challengeCtx(
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, string, BigNumber, BigNumber] & {
      completed: boolean;
      challengeAddress: string;
      defenderAddress: string;
      challengerAddress: string;
      defenderAssertionID: BigNumber;
      challengerAssertionID: BigNumber;
    }
  >;

  completeChallenge(
    winner: PromiseOrValue<string>,
    loser: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmFirstUnresolvedAssertion(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmedInboxSize(overrides?: CallOverrides): Promise<BigNumber>;

  createAssertion(
    vmHash: PromiseOrValue<BytesLike>,
    inboxSize: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAssertionWithStateBatch(
    vmHash: PromiseOrValue<BytesLike>,
    inboxSize: PromiseOrValue<BigNumberish>,
    _batch: PromiseOrValue<BytesLike>[],
    _shouldStartAtElement: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentRequiredStake(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _owner: PromiseOrValue<string>,
    _verifier: PromiseOrValue<string>,
    _stakeToken: PromiseOrValue<string>,
    _libAddressManager: PromiseOrValue<string>,
    _assertionMap: PromiseOrValue<string>,
    _minimumAssertionPeriod: PromiseOrValue<BigNumberish>,
    _baseStakeAmount: PromiseOrValue<BigNumberish>,
    _initialVMhash: PromiseOrValue<BytesLike>,
    stakerWhitelists: PromiseOrValue<string>[],
    operatorWhitelists: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isStaked(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastConfirmedAssertionID(overrides?: CallOverrides): Promise<BigNumber>;

  lastCreatedAssertionID(overrides?: CallOverrides): Promise<BigNumber>;

  lastResolvedAssertionID(overrides?: CallOverrides): Promise<BigNumber>;

  libAddressManager(overrides?: CallOverrides): Promise<string>;

  minimumAssertionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  numStakers(overrides?: CallOverrides): Promise<BigNumber>;

  operatorWhitelist(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  operatorslist(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  registers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  rejectFirstUnresolvedAssertion(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectLatestCreatedAssertionWithBatch(
    _batchHeader: Lib_BVMCodec.ChainBatchHeaderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeFromOperatorWhitelist(
    toRemoveAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeFromStakerWhitelist(
    toRemoveAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeOldZombies(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeStake(
    stakerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolve(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  stake(
    stakeAmount: PromiseOrValue<BigNumberish>,
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeToken(overrides?: CallOverrides): Promise<string>;

  stakerWhitelist(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, string, string] & {
      isStaked: boolean;
      amountStaked: BigNumber;
      assertionID: BigNumber;
      operator: string;
      currentChallenge: string;
    }
  >;

  stakerslist(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    stakeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifier(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawableFunds(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  zombies(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { stakerAddress: string; lastAssertionID: BigNumber }
  >;

  callStatic: {
    addToOperatorWhitelist(
      toAddAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addToStakerWhitelist(
      toAddAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    advanceStake(
      assertionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    assertions(overrides?: CallOverrides): Promise<string>;

    baseStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    challengeAssertion(
      players: [PromiseOrValue<string>, PromiseOrValue<string>],
      assertionIDs: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<string>;

    challengeCtx(
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, string, BigNumber, BigNumber] & {
        completed: boolean;
        challengeAddress: string;
        defenderAddress: string;
        challengerAddress: string;
        defenderAssertionID: BigNumber;
        challengerAssertionID: BigNumber;
      }
    >;

    completeChallenge(
      winner: PromiseOrValue<string>,
      loser: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmFirstUnresolvedAssertion(overrides?: CallOverrides): Promise<void>;

    confirmedInboxSize(overrides?: CallOverrides): Promise<BigNumber>;

    createAssertion(
      vmHash: PromiseOrValue<BytesLike>,
      inboxSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createAssertionWithStateBatch(
      vmHash: PromiseOrValue<BytesLike>,
      inboxSize: PromiseOrValue<BigNumberish>,
      _batch: PromiseOrValue<BytesLike>[],
      _shouldStartAtElement: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentRequiredStake(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _verifier: PromiseOrValue<string>,
      _stakeToken: PromiseOrValue<string>,
      _libAddressManager: PromiseOrValue<string>,
      _assertionMap: PromiseOrValue<string>,
      _minimumAssertionPeriod: PromiseOrValue<BigNumberish>,
      _baseStakeAmount: PromiseOrValue<BigNumberish>,
      _initialVMhash: PromiseOrValue<BytesLike>,
      stakerWhitelists: PromiseOrValue<string>[],
      operatorWhitelists: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isStaked(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastConfirmedAssertionID(overrides?: CallOverrides): Promise<BigNumber>;

    lastCreatedAssertionID(overrides?: CallOverrides): Promise<BigNumber>;

    lastResolvedAssertionID(overrides?: CallOverrides): Promise<BigNumber>;

    libAddressManager(overrides?: CallOverrides): Promise<string>;

    minimumAssertionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    numStakers(overrides?: CallOverrides): Promise<BigNumber>;

    operatorWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorslist(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    registers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    rejectFirstUnresolvedAssertion(overrides?: CallOverrides): Promise<void>;

    rejectLatestCreatedAssertionWithBatch(
      _batchHeader: Lib_BVMCodec.ChainBatchHeaderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromOperatorWhitelist(
      toRemoveAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromStakerWhitelist(
      toRemoveAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeOldZombies(overrides?: CallOverrides): Promise<void>;

    removeStake(
      stakerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolve(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    stake(
      stakeAmount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeToken(overrides?: CallOverrides): Promise<string>;

    stakerWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, string, string] & {
        isStaked: boolean;
        amountStaked: BigNumber;
        assertionID: BigNumber;
        operator: string;
        currentChallenge: string;
      }
    >;

    stakerslist(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifier(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawableFunds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zombies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        stakerAddress: string;
        lastAssertionID: BigNumber;
      }
    >;
  };

  filters: {
    "AssertionChallenged(uint256,address)"(
      assertionID?: null,
      challengeAddr?: null
    ): AssertionChallengedEventFilter;
    AssertionChallenged(
      assertionID?: null,
      challengeAddr?: null
    ): AssertionChallengedEventFilter;

    "AssertionConfirmed(uint256)"(
      assertionID?: null
    ): AssertionConfirmedEventFilter;
    AssertionConfirmed(assertionID?: null): AssertionConfirmedEventFilter;

    "AssertionCreated(uint256,address,bytes32,uint256)"(
      assertionID?: null,
      asserterAddr?: null,
      vmHash?: null,
      inboxSize?: null
    ): AssertionCreatedEventFilter;
    AssertionCreated(
      assertionID?: null,
      asserterAddr?: null,
      vmHash?: null,
      inboxSize?: null
    ): AssertionCreatedEventFilter;

    "AssertionRejected(uint256)"(
      assertionID?: null
    ): AssertionRejectedEventFilter;
    AssertionRejected(assertionID?: null): AssertionRejectedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "StakerStaked(address,uint256)"(
      stakerAddr?: null,
      assertionID?: null
    ): StakerStakedEventFilter;
    StakerStaked(
      stakerAddr?: null,
      assertionID?: null
    ): StakerStakedEventFilter;
  };

  estimateGas: {
    addToOperatorWhitelist(
      toAddAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToStakerWhitelist(
      toAddAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    advanceStake(
      assertionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assertions(overrides?: CallOverrides): Promise<BigNumber>;

    baseStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    challengeAssertion(
      players: [PromiseOrValue<string>, PromiseOrValue<string>],
      assertionIDs: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    challengeCtx(overrides?: CallOverrides): Promise<BigNumber>;

    completeChallenge(
      winner: PromiseOrValue<string>,
      loser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmFirstUnresolvedAssertion(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmedInboxSize(overrides?: CallOverrides): Promise<BigNumber>;

    createAssertion(
      vmHash: PromiseOrValue<BytesLike>,
      inboxSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAssertionWithStateBatch(
      vmHash: PromiseOrValue<BytesLike>,
      inboxSize: PromiseOrValue<BigNumberish>,
      _batch: PromiseOrValue<BytesLike>[],
      _shouldStartAtElement: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentRequiredStake(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _verifier: PromiseOrValue<string>,
      _stakeToken: PromiseOrValue<string>,
      _libAddressManager: PromiseOrValue<string>,
      _assertionMap: PromiseOrValue<string>,
      _minimumAssertionPeriod: PromiseOrValue<BigNumberish>,
      _baseStakeAmount: PromiseOrValue<BigNumberish>,
      _initialVMhash: PromiseOrValue<BytesLike>,
      stakerWhitelists: PromiseOrValue<string>[],
      operatorWhitelists: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isStaked(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastConfirmedAssertionID(overrides?: CallOverrides): Promise<BigNumber>;

    lastCreatedAssertionID(overrides?: CallOverrides): Promise<BigNumber>;

    lastResolvedAssertionID(overrides?: CallOverrides): Promise<BigNumber>;

    libAddressManager(overrides?: CallOverrides): Promise<BigNumber>;

    minimumAssertionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    numStakers(overrides?: CallOverrides): Promise<BigNumber>;

    operatorWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorslist(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rejectFirstUnresolvedAssertion(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectLatestCreatedAssertionWithBatch(
      _batchHeader: Lib_BVMCodec.ChainBatchHeaderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeFromOperatorWhitelist(
      toRemoveAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeFromStakerWhitelist(
      toRemoveAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeOldZombies(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeStake(
      stakerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolve(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      stakeAmount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeToken(overrides?: CallOverrides): Promise<BigNumber>;

    stakerWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakerslist(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawableFunds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zombies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToOperatorWhitelist(
      toAddAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToStakerWhitelist(
      toAddAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    advanceStake(
      assertionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assertions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseStakeAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    challengeAssertion(
      players: [PromiseOrValue<string>, PromiseOrValue<string>],
      assertionIDs: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    challengeCtx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    completeChallenge(
      winner: PromiseOrValue<string>,
      loser: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmFirstUnresolvedAssertion(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmedInboxSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAssertion(
      vmHash: PromiseOrValue<BytesLike>,
      inboxSize: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAssertionWithStateBatch(
      vmHash: PromiseOrValue<BytesLike>,
      inboxSize: PromiseOrValue<BigNumberish>,
      _batch: PromiseOrValue<BytesLike>[],
      _shouldStartAtElement: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentRequiredStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _verifier: PromiseOrValue<string>,
      _stakeToken: PromiseOrValue<string>,
      _libAddressManager: PromiseOrValue<string>,
      _assertionMap: PromiseOrValue<string>,
      _minimumAssertionPeriod: PromiseOrValue<BigNumberish>,
      _baseStakeAmount: PromiseOrValue<BigNumberish>,
      _initialVMhash: PromiseOrValue<BytesLike>,
      stakerWhitelists: PromiseOrValue<string>[],
      operatorWhitelists: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isStaked(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastConfirmedAssertionID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastCreatedAssertionID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastResolvedAssertionID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    libAddressManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumAssertionPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numStakers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorslist(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectFirstUnresolvedAssertion(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectLatestCreatedAssertionWithBatch(
      _batchHeader: Lib_BVMCodec.ChainBatchHeaderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeFromOperatorWhitelist(
      toRemoveAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeFromStakerWhitelist(
      toRemoveAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeOldZombies(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeStake(
      stakerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolve(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      stakeAmount: PromiseOrValue<BigNumberish>,
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakerWhitelist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakerslist(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawableFunds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zombies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
