/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ITssRewardContractInterface extends utils.Interface {
  functions: {
    "claim()": FunctionFragment;
    "claimReward(uint256,uint32,uint256,address[])": FunctionFragment;
    "queryClaimTime()": FunctionFragment;
    "queryReward()": FunctionFragment;
    "requestClaim()": FunctionFragment;
    "setClaimer(address,address)": FunctionFragment;
    "setSccAddr(address)": FunctionFragment;
    "setSendAmountPerYear(uint256)": FunctionFragment;
    "setStakeSlashAddr(address)": FunctionFragment;
    "setWaitingTime(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim"
      | "claimReward"
      | "queryClaimTime"
      | "queryReward"
      | "requestClaim"
      | "setClaimer"
      | "setSccAddr"
      | "setSendAmountPerYear"
      | "setStakeSlashAddr"
      | "setWaitingTime"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryClaimTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimer",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSccAddr",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendAmountPerYear",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeSlashAddr",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWaitingTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryClaimTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setClaimer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSccAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSendAmountPerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeSlashAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWaitingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "DistributeTssReward(uint256,uint256,uint256,address[])": EventFragment;
    "DistributeTssRewardByBlock(uint256,uint32,uint256,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeTssReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeTssRewardByBlock"): EventFragment;
}

export interface ClaimEventObject {
  owner: string;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface DistributeTssRewardEventObject {
  lastBatchTime: BigNumber;
  batchTime: BigNumber;
  amount: BigNumber;
  tssMembers: string[];
}
export type DistributeTssRewardEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string[]],
  DistributeTssRewardEventObject
>;

export type DistributeTssRewardEventFilter =
  TypedEventFilter<DistributeTssRewardEvent>;

export interface DistributeTssRewardByBlockEventObject {
  blockStartHeight: BigNumber;
  length: number;
  amount: BigNumber;
  tssMembers: string[];
}
export type DistributeTssRewardByBlockEvent = TypedEvent<
  [BigNumber, number, BigNumber, string[]],
  DistributeTssRewardByBlockEventObject
>;

export type DistributeTssRewardByBlockEventFilter =
  TypedEventFilter<DistributeTssRewardByBlockEvent>;

export interface ITssRewardContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITssRewardContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _batchTime: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryClaimTime(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimer(
      _staker: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSccAddr(
      sccAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSendAmountPerYear(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakeSlashAddr(
      ssAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWaitingTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _blockStartHeight: PromiseOrValue<BigNumberish>,
    _length: PromiseOrValue<BigNumberish>,
    _batchTime: PromiseOrValue<BigNumberish>,
    _tssMembers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryClaimTime(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryReward(overrides?: CallOverrides): Promise<BigNumber>;

  requestClaim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimer(
    _staker: PromiseOrValue<string>,
    _claimer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSccAddr(
    sccAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSendAmountPerYear(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakeSlashAddr(
    ssAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWaitingTime(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(overrides?: CallOverrides): Promise<void>;

    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _batchTime: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    queryClaimTime(overrides?: CallOverrides): Promise<BigNumber>;

    queryReward(overrides?: CallOverrides): Promise<BigNumber>;

    requestClaim(overrides?: CallOverrides): Promise<boolean>;

    setClaimer(
      _staker: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSccAddr(
      sccAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSendAmountPerYear(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakeSlashAddr(
      ssAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWaitingTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Claim(address,uint256)"(owner?: null, amount?: null): ClaimEventFilter;
    Claim(owner?: null, amount?: null): ClaimEventFilter;

    "DistributeTssReward(uint256,uint256,uint256,address[])"(
      lastBatchTime?: null,
      batchTime?: null,
      amount?: null,
      tssMembers?: null
    ): DistributeTssRewardEventFilter;
    DistributeTssReward(
      lastBatchTime?: null,
      batchTime?: null,
      amount?: null,
      tssMembers?: null
    ): DistributeTssRewardEventFilter;

    "DistributeTssRewardByBlock(uint256,uint32,uint256,address[])"(
      blockStartHeight?: null,
      length?: null,
      amount?: null,
      tssMembers?: null
    ): DistributeTssRewardByBlockEventFilter;
    DistributeTssRewardByBlock(
      blockStartHeight?: null,
      length?: null,
      amount?: null,
      tssMembers?: null
    ): DistributeTssRewardByBlockEventFilter;
  };

  estimateGas: {
    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _batchTime: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryClaimTime(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryReward(overrides?: CallOverrides): Promise<BigNumber>;

    requestClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimer(
      _staker: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSccAddr(
      sccAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSendAmountPerYear(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakeSlashAddr(
      ssAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWaitingTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _batchTime: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryClaimTime(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimer(
      _staker: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSccAddr(
      sccAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSendAmountPerYear(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakeSlashAddr(
      ssAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWaitingTime(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
