/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface TssRewardContractInterface extends utils.Interface {
  functions: {
    "bestBlockID()": FunctionFragment;
    "bvmGasPriceOracleAddress()": FunctionFragment;
    "claim()": FunctionFragment;
    "claimAmout(address)": FunctionFragment;
    "claimReward(uint256,uint32,uint256,address[])": FunctionFragment;
    "claimTimes(address)": FunctionFragment;
    "claimers(address)": FunctionFragment;
    "deadAddress()": FunctionFragment;
    "dust()": FunctionFragment;
    "dustBlock()": FunctionFragment;
    "lastBatchTime()": FunctionFragment;
    "ledger(uint256)": FunctionFragment;
    "messenger()": FunctionFragment;
    "operators(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "queryClaimTime()": FunctionFragment;
    "queryReward()": FunctionFragment;
    "querySendAmountPerSecond()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestClaim()": FunctionFragment;
    "rewardDetails(address)": FunctionFragment;
    "sccAddress()": FunctionFragment;
    "sendAmountPerYear()": FunctionFragment;
    "setClaimer(address,address)": FunctionFragment;
    "setSccAddr(address)": FunctionFragment;
    "setSendAmountPerYear(uint256)": FunctionFragment;
    "setStakeSlashAddr(address)": FunctionFragment;
    "setWaitingTime(uint256)": FunctionFragment;
    "stakeSlashAddress()": FunctionFragment;
    "totalAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "waitingTime()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bestBlockID"
      | "bvmGasPriceOracleAddress"
      | "claim"
      | "claimAmout"
      | "claimReward"
      | "claimTimes"
      | "claimers"
      | "deadAddress"
      | "dust"
      | "dustBlock"
      | "lastBatchTime"
      | "ledger"
      | "messenger"
      | "operators"
      | "owner"
      | "queryClaimTime"
      | "queryReward"
      | "querySendAmountPerSecond"
      | "renounceOwnership"
      | "requestClaim"
      | "rewardDetails"
      | "sccAddress"
      | "sendAmountPerYear"
      | "setClaimer"
      | "setSccAddr"
      | "setSendAmountPerYear"
      | "setStakeSlashAddr"
      | "setWaitingTime"
      | "stakeSlashAddress"
      | "totalAmount"
      | "transferOwnership"
      | "waitingTime"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bestBlockID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bvmGasPriceOracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimAmout",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTimes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deadAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dust", values?: undefined): string;
  encodeFunctionData(functionFragment: "dustBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastBatchTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ledger",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queryClaimTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "querySendAmountPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sccAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendAmountPerYear",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimer",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSccAddr",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendAmountPerYear",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeSlashAddr",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWaitingTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeSlashAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "waitingTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bestBlockID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bvmGasPriceOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimAmout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimTimes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deadAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dust", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dustBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastBatchTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryClaimTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "querySendAmountPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sccAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendAmountPerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setClaimer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSccAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSendAmountPerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeSlashAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWaitingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeSlashAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "waitingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "DistributeTssReward(uint256,uint256,uint256,address[])": EventFragment;
    "DistributeTssRewardByBlock(uint256,uint32,uint256,address[])": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeTssReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeTssRewardByBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ClaimEventObject {
  owner: string;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface DistributeTssRewardEventObject {
  lastBatchTime: BigNumber;
  batchTime: BigNumber;
  amount: BigNumber;
  tssMembers: string[];
}
export type DistributeTssRewardEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string[]],
  DistributeTssRewardEventObject
>;

export type DistributeTssRewardEventFilter =
  TypedEventFilter<DistributeTssRewardEvent>;

export interface DistributeTssRewardByBlockEventObject {
  blockStartHeight: BigNumber;
  length: number;
  amount: BigNumber;
  tssMembers: string[];
}
export type DistributeTssRewardByBlockEvent = TypedEvent<
  [BigNumber, number, BigNumber, string[]],
  DistributeTssRewardByBlockEventObject
>;

export type DistributeTssRewardByBlockEventFilter =
  TypedEventFilter<DistributeTssRewardByBlockEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TssRewardContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TssRewardContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bestBlockID(overrides?: CallOverrides): Promise<[BigNumber]>;

    bvmGasPriceOracleAddress(overrides?: CallOverrides): Promise<[string]>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAmout(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _batchTime: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimTimes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deadAddress(overrides?: CallOverrides): Promise<[string]>;

    dust(overrides?: CallOverrides): Promise<[BigNumber]>;

    dustBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastBatchTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    messenger(overrides?: CallOverrides): Promise<[string]>;

    operators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queryClaimTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    queryReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    querySendAmountPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardDetails(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sccAddress(overrides?: CallOverrides): Promise<[string]>;

    sendAmountPerYear(overrides?: CallOverrides): Promise<[BigNumber]>;

    setClaimer(
      _operator: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSccAddr(
      _sccAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSendAmountPerYear(
      _sendAmountPerYear: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakeSlashAddr(
      _ssAddre: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWaitingTime(
      _waitingTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeSlashAddress(overrides?: CallOverrides): Promise<[string]>;

    totalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    waitingTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bestBlockID(overrides?: CallOverrides): Promise<BigNumber>;

  bvmGasPriceOracleAddress(overrides?: CallOverrides): Promise<string>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAmout(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimReward(
    _blockStartHeight: PromiseOrValue<BigNumberish>,
    _length: PromiseOrValue<BigNumberish>,
    _batchTime: PromiseOrValue<BigNumberish>,
    _tssMembers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimTimes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  deadAddress(overrides?: CallOverrides): Promise<string>;

  dust(overrides?: CallOverrides): Promise<BigNumber>;

  dustBlock(overrides?: CallOverrides): Promise<BigNumber>;

  lastBatchTime(overrides?: CallOverrides): Promise<BigNumber>;

  ledger(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  messenger(overrides?: CallOverrides): Promise<string>;

  operators(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  queryClaimTime(overrides?: CallOverrides): Promise<BigNumber>;

  queryReward(overrides?: CallOverrides): Promise<BigNumber>;

  querySendAmountPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestClaim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardDetails(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sccAddress(overrides?: CallOverrides): Promise<string>;

  sendAmountPerYear(overrides?: CallOverrides): Promise<BigNumber>;

  setClaimer(
    _operator: PromiseOrValue<string>,
    _claimer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSccAddr(
    _sccAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSendAmountPerYear(
    _sendAmountPerYear: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakeSlashAddr(
    _ssAddre: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWaitingTime(
    _waitingTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeSlashAddress(overrides?: CallOverrides): Promise<string>;

  totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  waitingTime(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bestBlockID(overrides?: CallOverrides): Promise<BigNumber>;

    bvmGasPriceOracleAddress(overrides?: CallOverrides): Promise<string>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimAmout(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _batchTime: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimTimes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deadAddress(overrides?: CallOverrides): Promise<string>;

    dust(overrides?: CallOverrides): Promise<BigNumber>;

    dustBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lastBatchTime(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messenger(overrides?: CallOverrides): Promise<string>;

    operators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    queryClaimTime(overrides?: CallOverrides): Promise<BigNumber>;

    queryReward(overrides?: CallOverrides): Promise<BigNumber>;

    querySendAmountPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestClaim(overrides?: CallOverrides): Promise<boolean>;

    rewardDetails(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sccAddress(overrides?: CallOverrides): Promise<string>;

    sendAmountPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    setClaimer(
      _operator: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSccAddr(
      _sccAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSendAmountPerYear(
      _sendAmountPerYear: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakeSlashAddr(
      _ssAddre: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWaitingTime(
      _waitingTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeSlashAddress(overrides?: CallOverrides): Promise<string>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    waitingTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Claim(address,uint256)"(owner?: null, amount?: null): ClaimEventFilter;
    Claim(owner?: null, amount?: null): ClaimEventFilter;

    "DistributeTssReward(uint256,uint256,uint256,address[])"(
      lastBatchTime?: null,
      batchTime?: null,
      amount?: null,
      tssMembers?: null
    ): DistributeTssRewardEventFilter;
    DistributeTssReward(
      lastBatchTime?: null,
      batchTime?: null,
      amount?: null,
      tssMembers?: null
    ): DistributeTssRewardEventFilter;

    "DistributeTssRewardByBlock(uint256,uint32,uint256,address[])"(
      blockStartHeight?: null,
      length?: null,
      amount?: null,
      tssMembers?: null
    ): DistributeTssRewardByBlockEventFilter;
    DistributeTssRewardByBlock(
      blockStartHeight?: null,
      length?: null,
      amount?: null,
      tssMembers?: null
    ): DistributeTssRewardByBlockEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    bestBlockID(overrides?: CallOverrides): Promise<BigNumber>;

    bvmGasPriceOracleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAmout(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _batchTime: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimTimes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deadAddress(overrides?: CallOverrides): Promise<BigNumber>;

    dust(overrides?: CallOverrides): Promise<BigNumber>;

    dustBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lastBatchTime(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messenger(overrides?: CallOverrides): Promise<BigNumber>;

    operators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queryClaimTime(overrides?: CallOverrides): Promise<BigNumber>;

    queryReward(overrides?: CallOverrides): Promise<BigNumber>;

    querySendAmountPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardDetails(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sccAddress(overrides?: CallOverrides): Promise<BigNumber>;

    sendAmountPerYear(overrides?: CallOverrides): Promise<BigNumber>;

    setClaimer(
      _operator: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSccAddr(
      _sccAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSendAmountPerYear(
      _sendAmountPerYear: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakeSlashAddr(
      _ssAddre: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWaitingTime(
      _waitingTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeSlashAddress(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    waitingTime(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bestBlockID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bvmGasPriceOracleAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAmout(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _batchTime: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimTimes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deadAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dust(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dustBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastBatchTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ledger(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryClaimTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    querySendAmountPerSecond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestClaim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardDetails(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sccAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendAmountPerYear(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setClaimer(
      _operator: PromiseOrValue<string>,
      _claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSccAddr(
      _sccAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSendAmountPerYear(
      _sendAmountPerYear: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakeSlashAddr(
      _ssAddre: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWaitingTime(
      _waitingTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeSlashAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    waitingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
