/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface DataStoreUtilsInterface extends utils.Interface {
  functions: {
    "BIP_MULTIPLIER()": FunctionFragment;
    "BIT_SHIFT_degree()": FunctionFragment;
    "BIT_SHIFT_numSys()": FunctionFragment;
    "BYTES_PER_COEFFICIENT()": FunctionFragment;
    "HEADER_OFFSET_degree()": FunctionFragment;
    "HEADER_OFFSET_numSys()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BIP_MULTIPLIER"
      | "BIT_SHIFT_degree"
      | "BIT_SHIFT_numSys"
      | "BYTES_PER_COEFFICIENT"
      | "HEADER_OFFSET_degree"
      | "HEADER_OFFSET_numSys"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BIP_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BIT_SHIFT_degree",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BIT_SHIFT_numSys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BYTES_PER_COEFFICIENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HEADER_OFFSET_degree",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HEADER_OFFSET_numSys",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BIP_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BIT_SHIFT_degree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BIT_SHIFT_numSys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BYTES_PER_COEFFICIENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HEADER_OFFSET_degree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HEADER_OFFSET_numSys",
    data: BytesLike
  ): Result;

  events: {};
}

export interface DataStoreUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DataStoreUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BIP_MULTIPLIER(overrides?: CallOverrides): Promise<[number]>;

    BIT_SHIFT_degree(overrides?: CallOverrides): Promise<[BigNumber]>;

    BIT_SHIFT_numSys(overrides?: CallOverrides): Promise<[BigNumber]>;

    BYTES_PER_COEFFICIENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    HEADER_OFFSET_degree(overrides?: CallOverrides): Promise<[BigNumber]>;

    HEADER_OFFSET_numSys(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BIP_MULTIPLIER(overrides?: CallOverrides): Promise<number>;

  BIT_SHIFT_degree(overrides?: CallOverrides): Promise<BigNumber>;

  BIT_SHIFT_numSys(overrides?: CallOverrides): Promise<BigNumber>;

  BYTES_PER_COEFFICIENT(overrides?: CallOverrides): Promise<BigNumber>;

  HEADER_OFFSET_degree(overrides?: CallOverrides): Promise<BigNumber>;

  HEADER_OFFSET_numSys(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BIP_MULTIPLIER(overrides?: CallOverrides): Promise<number>;

    BIT_SHIFT_degree(overrides?: CallOverrides): Promise<BigNumber>;

    BIT_SHIFT_numSys(overrides?: CallOverrides): Promise<BigNumber>;

    BYTES_PER_COEFFICIENT(overrides?: CallOverrides): Promise<BigNumber>;

    HEADER_OFFSET_degree(overrides?: CallOverrides): Promise<BigNumber>;

    HEADER_OFFSET_numSys(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    BIP_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    BIT_SHIFT_degree(overrides?: CallOverrides): Promise<BigNumber>;

    BIT_SHIFT_numSys(overrides?: CallOverrides): Promise<BigNumber>;

    BYTES_PER_COEFFICIENT(overrides?: CallOverrides): Promise<BigNumber>;

    HEADER_OFFSET_degree(overrides?: CallOverrides): Promise<BigNumber>;

    HEADER_OFFSET_numSys(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BIP_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BIT_SHIFT_degree(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BIT_SHIFT_numSys(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BYTES_PER_COEFFICIENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HEADER_OFFSET_degree(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HEADER_OFFSET_numSys(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
