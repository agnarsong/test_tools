/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IDataLayrServiceManager {
  export type DataStoreMetadataStruct = {
    headerHash: PromiseOrValue<BytesLike>;
    durationDataStoreId: PromiseOrValue<BigNumberish>;
    globalDataStoreId: PromiseOrValue<BigNumberish>;
    referenceBlockNumber: PromiseOrValue<BigNumberish>;
    blockNumber: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
    confirmer: PromiseOrValue<string>;
    signatoryRecordHash: PromiseOrValue<BytesLike>;
  };

  export type DataStoreMetadataStructOutput = [
    string,
    number,
    number,
    number,
    number,
    BigNumber,
    string,
    string
  ] & {
    headerHash: string;
    durationDataStoreId: number;
    globalDataStoreId: number;
    referenceBlockNumber: number;
    blockNumber: number;
    fee: BigNumber;
    confirmer: string;
    signatoryRecordHash: string;
  };

  export type DataStoreSearchDataStruct = {
    metadata: IDataLayrServiceManager.DataStoreMetadataStruct;
    duration: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
  };

  export type DataStoreSearchDataStructOutput = [
    IDataLayrServiceManager.DataStoreMetadataStructOutput,
    number,
    BigNumber,
    number
  ] & {
    metadata: IDataLayrServiceManager.DataStoreMetadataStructOutput;
    duration: number;
    timestamp: BigNumber;
    index: number;
  };
}

export interface IDataLayrServiceManagerInterface extends utils.Interface {
  functions: {
    "BLOCK_STALE_MEASURE()": FunctionFragment;
    "DURATION_SCALE()": FunctionFragment;
    "MAX_DATASTORE_DURATION()": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "confirmDataStore(bytes,((bytes32,uint32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32))": FunctionFragment;
    "dataLayrPaymentManager()": FunctionFragment;
    "eigenLayrDelegation()": FunctionFragment;
    "freezeOperator(address)": FunctionFragment;
    "getDataStoreHashesForDurationAtTimestamp(uint8,uint256,uint32)": FunctionFragment;
    "getNumDataStoresForDuration(uint8)": FunctionFragment;
    "initDataStore(address,address,uint8,uint32,uint32,bytes)": FunctionFragment;
    "latestTime()": FunctionFragment;
    "log2NumPowersOfTau()": FunctionFragment;
    "numPowersOfTau()": FunctionFragment;
    "owner()": FunctionFragment;
    "recordFirstStakeUpdate(address,uint32)": FunctionFragment;
    "recordLastStakeUpdateAndRevokeSlashingAbility(address,uint32)": FunctionFragment;
    "recordStakeUpdate(address,uint32,uint32,uint256)": FunctionFragment;
    "taskNumber()": FunctionFragment;
    "verifyDataStoreMetadata(uint8,uint256,uint32,(bytes32,uint32,uint32,uint32,uint32,uint96,address,bytes32))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BLOCK_STALE_MEASURE"
      | "DURATION_SCALE"
      | "MAX_DATASTORE_DURATION"
      | "collateralToken"
      | "confirmDataStore"
      | "dataLayrPaymentManager"
      | "eigenLayrDelegation"
      | "freezeOperator"
      | "getDataStoreHashesForDurationAtTimestamp"
      | "getNumDataStoresForDuration"
      | "initDataStore"
      | "latestTime"
      | "log2NumPowersOfTau"
      | "numPowersOfTau"
      | "owner"
      | "recordFirstStakeUpdate"
      | "recordLastStakeUpdateAndRevokeSlashingAbility"
      | "recordStakeUpdate"
      | "taskNumber"
      | "verifyDataStoreMetadata"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BLOCK_STALE_MEASURE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DURATION_SCALE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DATASTORE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmDataStore",
    values: [
      PromiseOrValue<BytesLike>,
      IDataLayrServiceManager.DataStoreSearchDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dataLayrPaymentManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eigenLayrDelegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freezeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataStoreHashesForDurationAtTimestamp",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumDataStoresForDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initDataStore",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "latestTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "log2NumPowersOfTau",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numPowersOfTau",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordFirstStakeUpdate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recordLastStakeUpdateAndRevokeSlashingAbility",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recordStakeUpdate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "taskNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDataStoreMetadata",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IDataLayrServiceManager.DataStoreMetadataStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "BLOCK_STALE_MEASURE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DURATION_SCALE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DATASTORE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmDataStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataLayrPaymentManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eigenLayrDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataStoreHashesForDurationAtTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumDataStoresForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initDataStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "latestTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "log2NumPowersOfTau",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numPowersOfTau",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordFirstStakeUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordLastStakeUpdateAndRevokeSlashingAbility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordStakeUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taskNumber", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyDataStoreMetadata",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDataLayrServiceManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDataLayrServiceManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BLOCK_STALE_MEASURE(overrides?: CallOverrides): Promise<[number]>;

    DURATION_SCALE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_DATASTORE_DURATION(overrides?: CallOverrides): Promise<[number]>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    confirmDataStore(
      data: PromiseOrValue<BytesLike>,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataLayrPaymentManager(overrides?: CallOverrides): Promise<[string]>;

    eigenLayrDelegation(overrides?: CallOverrides): Promise<[string]>;

    freezeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDataStoreHashesForDurationAtTimestamp(
      duration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNumDataStoresForDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    initDataStore(
      feePayer: PromiseOrValue<string>,
      confirmer: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      totalOperatorsIndex: PromiseOrValue<BigNumberish>,
      header: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    latestTime(overrides?: CallOverrides): Promise<[number]>;

    log2NumPowersOfTau(overrides?: CallOverrides): Promise<[number]>;

    numPowersOfTau(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recordFirstStakeUpdate(
      operator: PromiseOrValue<string>,
      serveUntil: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recordLastStakeUpdateAndRevokeSlashingAbility(
      operator: PromiseOrValue<string>,
      serveUntil: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recordStakeUpdate(
      operator: PromiseOrValue<string>,
      updateBlock: PromiseOrValue<BigNumberish>,
      serveUntil: PromiseOrValue<BigNumberish>,
      prevElement: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    taskNumber(overrides?: CallOverrides): Promise<[number]>;

    verifyDataStoreMetadata(
      duration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      metadata: IDataLayrServiceManager.DataStoreMetadataStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  BLOCK_STALE_MEASURE(overrides?: CallOverrides): Promise<number>;

  DURATION_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_DATASTORE_DURATION(overrides?: CallOverrides): Promise<number>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  confirmDataStore(
    data: PromiseOrValue<BytesLike>,
    searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataLayrPaymentManager(overrides?: CallOverrides): Promise<string>;

  eigenLayrDelegation(overrides?: CallOverrides): Promise<string>;

  freezeOperator(
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDataStoreHashesForDurationAtTimestamp(
    duration: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getNumDataStoresForDuration(
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  initDataStore(
    feePayer: PromiseOrValue<string>,
    confirmer: PromiseOrValue<string>,
    duration: PromiseOrValue<BigNumberish>,
    blockNumber: PromiseOrValue<BigNumberish>,
    totalOperatorsIndex: PromiseOrValue<BigNumberish>,
    header: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  latestTime(overrides?: CallOverrides): Promise<number>;

  log2NumPowersOfTau(overrides?: CallOverrides): Promise<number>;

  numPowersOfTau(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  recordFirstStakeUpdate(
    operator: PromiseOrValue<string>,
    serveUntil: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recordLastStakeUpdateAndRevokeSlashingAbility(
    operator: PromiseOrValue<string>,
    serveUntil: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recordStakeUpdate(
    operator: PromiseOrValue<string>,
    updateBlock: PromiseOrValue<BigNumberish>,
    serveUntil: PromiseOrValue<BigNumberish>,
    prevElement: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  taskNumber(overrides?: CallOverrides): Promise<number>;

  verifyDataStoreMetadata(
    duration: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    metadata: IDataLayrServiceManager.DataStoreMetadataStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    BLOCK_STALE_MEASURE(overrides?: CallOverrides): Promise<number>;

    DURATION_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DATASTORE_DURATION(overrides?: CallOverrides): Promise<number>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    confirmDataStore(
      data: PromiseOrValue<BytesLike>,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    dataLayrPaymentManager(overrides?: CallOverrides): Promise<string>;

    eigenLayrDelegation(overrides?: CallOverrides): Promise<string>;

    freezeOperator(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDataStoreHashesForDurationAtTimestamp(
      duration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNumDataStoresForDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    initDataStore(
      feePayer: PromiseOrValue<string>,
      confirmer: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      totalOperatorsIndex: PromiseOrValue<BigNumberish>,
      header: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    latestTime(overrides?: CallOverrides): Promise<number>;

    log2NumPowersOfTau(overrides?: CallOverrides): Promise<number>;

    numPowersOfTau(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    recordFirstStakeUpdate(
      operator: PromiseOrValue<string>,
      serveUntil: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recordLastStakeUpdateAndRevokeSlashingAbility(
      operator: PromiseOrValue<string>,
      serveUntil: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recordStakeUpdate(
      operator: PromiseOrValue<string>,
      updateBlock: PromiseOrValue<BigNumberish>,
      serveUntil: PromiseOrValue<BigNumberish>,
      prevElement: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    taskNumber(overrides?: CallOverrides): Promise<number>;

    verifyDataStoreMetadata(
      duration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      metadata: IDataLayrServiceManager.DataStoreMetadataStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    BLOCK_STALE_MEASURE(overrides?: CallOverrides): Promise<BigNumber>;

    DURATION_SCALE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DATASTORE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    confirmDataStore(
      data: PromiseOrValue<BytesLike>,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataLayrPaymentManager(overrides?: CallOverrides): Promise<BigNumber>;

    eigenLayrDelegation(overrides?: CallOverrides): Promise<BigNumber>;

    freezeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDataStoreHashesForDurationAtTimestamp(
      duration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumDataStoresForDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initDataStore(
      feePayer: PromiseOrValue<string>,
      confirmer: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      totalOperatorsIndex: PromiseOrValue<BigNumberish>,
      header: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    latestTime(overrides?: CallOverrides): Promise<BigNumber>;

    log2NumPowersOfTau(overrides?: CallOverrides): Promise<BigNumber>;

    numPowersOfTau(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recordFirstStakeUpdate(
      operator: PromiseOrValue<string>,
      serveUntil: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recordLastStakeUpdateAndRevokeSlashingAbility(
      operator: PromiseOrValue<string>,
      serveUntil: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recordStakeUpdate(
      operator: PromiseOrValue<string>,
      updateBlock: PromiseOrValue<BigNumberish>,
      serveUntil: PromiseOrValue<BigNumberish>,
      prevElement: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    taskNumber(overrides?: CallOverrides): Promise<BigNumber>;

    verifyDataStoreMetadata(
      duration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      metadata: IDataLayrServiceManager.DataStoreMetadataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BLOCK_STALE_MEASURE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DURATION_SCALE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DATASTORE_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmDataStore(
      data: PromiseOrValue<BytesLike>,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataLayrPaymentManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eigenLayrDelegation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freezeOperator(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDataStoreHashesForDurationAtTimestamp(
      duration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumDataStoresForDuration(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initDataStore(
      feePayer: PromiseOrValue<string>,
      confirmer: PromiseOrValue<string>,
      duration: PromiseOrValue<BigNumberish>,
      blockNumber: PromiseOrValue<BigNumberish>,
      totalOperatorsIndex: PromiseOrValue<BigNumberish>,
      header: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    latestTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    log2NumPowersOfTau(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numPowersOfTau(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recordFirstStakeUpdate(
      operator: PromiseOrValue<string>,
      serveUntil: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recordLastStakeUpdateAndRevokeSlashingAbility(
      operator: PromiseOrValue<string>,
      serveUntil: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recordStakeUpdate(
      operator: PromiseOrValue<string>,
      updateBlock: PromiseOrValue<BigNumberish>,
      serveUntil: PromiseOrValue<BigNumberish>,
      prevElement: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    taskNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyDataStoreMetadata(
      duration: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      metadata: IDataLayrServiceManager.DataStoreMetadataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
