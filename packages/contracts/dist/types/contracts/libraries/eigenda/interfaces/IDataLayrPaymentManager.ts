/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IPaymentManager {
  export type TotalStakesStruct = {
    signedStakeFirstQuorum: PromiseOrValue<BigNumberish>;
    signedStakeSecondQuorum: PromiseOrValue<BigNumberish>;
  };

  export type TotalStakesStructOutput = [BigNumber, BigNumber] & {
    signedStakeFirstQuorum: BigNumber;
    signedStakeSecondQuorum: BigNumber;
  };
}

export declare namespace IDataLayrServiceManager {
  export type DataStoreMetadataStruct = {
    headerHash: PromiseOrValue<BytesLike>;
    durationDataStoreId: PromiseOrValue<BigNumberish>;
    globalDataStoreId: PromiseOrValue<BigNumberish>;
    referenceBlockNumber: PromiseOrValue<BigNumberish>;
    blockNumber: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
    confirmer: PromiseOrValue<string>;
    signatoryRecordHash: PromiseOrValue<BytesLike>;
  };

  export type DataStoreMetadataStructOutput = [
    string,
    number,
    number,
    number,
    number,
    BigNumber,
    string,
    string
  ] & {
    headerHash: string;
    durationDataStoreId: number;
    globalDataStoreId: number;
    referenceBlockNumber: number;
    blockNumber: number;
    fee: BigNumber;
    confirmer: string;
    signatoryRecordHash: string;
  };

  export type DataStoreSearchDataStruct = {
    metadata: IDataLayrServiceManager.DataStoreMetadataStruct;
    duration: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
  };

  export type DataStoreSearchDataStructOutput = [
    IDataLayrServiceManager.DataStoreMetadataStructOutput,
    number,
    BigNumber,
    number
  ] & {
    metadata: IDataLayrServiceManager.DataStoreMetadataStructOutput;
    duration: number;
    timestamp: BigNumber;
    index: number;
  };
}

export interface IDataLayrPaymentManagerInterface extends utils.Interface {
  functions: {
    "collateralToken()": FunctionFragment;
    "commitPayment(uint32,uint96)": FunctionFragment;
    "depositFutureFees(address,uint256)": FunctionFragment;
    "getAmount1(address)": FunctionFragment;
    "getAmount2(address)": FunctionFragment;
    "getChallengeStatus(address)": FunctionFragment;
    "getDiff(address)": FunctionFragment;
    "getFromTaskNumber(address)": FunctionFragment;
    "getPaymentCollateral(address)": FunctionFragment;
    "getToTaskNumber(address)": FunctionFragment;
    "initPaymentChallenge(address,uint96,uint96)": FunctionFragment;
    "payFee(address,address,uint256)": FunctionFragment;
    "paymentFraudproofCollateral()": FunctionFragment;
    "paymentFraudproofInterval()": FunctionFragment;
    "paymentToken()": FunctionFragment;
    "performChallengeBisectionStep(address,bool,uint96,uint96)": FunctionFragment;
    "redeemPayment()": FunctionFragment;
    "resolveChallenge(address)": FunctionFragment;
    "respondToPaymentChallengeFinal(address,uint256,uint48,bytes32[],(uint256,uint256),((bytes32,uint32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32),uint256)": FunctionFragment;
    "setAllowance(address,uint256)": FunctionFragment;
    "setPaymentFraudproofCollateral(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "collateralToken"
      | "commitPayment"
      | "depositFutureFees"
      | "getAmount1"
      | "getAmount2"
      | "getChallengeStatus"
      | "getDiff"
      | "getFromTaskNumber"
      | "getPaymentCollateral"
      | "getToTaskNumber"
      | "initPaymentChallenge"
      | "payFee"
      | "paymentFraudproofCollateral"
      | "paymentFraudproofInterval"
      | "paymentToken"
      | "performChallengeBisectionStep"
      | "redeemPayment"
      | "resolveChallenge"
      | "respondToPaymentChallengeFinal"
      | "setAllowance"
      | "setPaymentFraudproofCollateral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitPayment",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFutureFees",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount1",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmount2",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengeStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDiff",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFromTaskNumber",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getToTaskNumber",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initPaymentChallenge",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentFraudproofCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentFraudproofInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performChallengeBisectionStep",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveChallenge",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "respondToPaymentChallengeFinal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      IPaymentManager.TotalStakesStruct,
      IDataLayrServiceManager.DataStoreSearchDataStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentFraudproofCollateral",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFutureFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAmount1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAmount2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChallengeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDiff", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFromTaskNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getToTaskNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initPaymentChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentFraudproofCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentFraudproofInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performChallengeBisectionStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respondToPaymentChallengeFinal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentFraudproofCollateral",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDataLayrPaymentManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDataLayrPaymentManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    commitPayment(
      toTaskNumber: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositFutureFees(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmount1(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmount2(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getChallengeStatus(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDiff(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getFromTaskNumber(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getPaymentCollateral(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getToTaskNumber(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    initPaymentChallenge(
      operator: PromiseOrValue<string>,
      amount1: PromiseOrValue<BigNumberish>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payFee(
      initiator: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paymentFraudproofCollateral(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    paymentFraudproofInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    paymentToken(overrides?: CallOverrides): Promise<[string]>;

    performChallengeBisectionStep(
      operator: PromiseOrValue<string>,
      secondHalf: PromiseOrValue<boolean>,
      amount1: PromiseOrValue<BigNumberish>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemPayment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveChallenge(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    respondToPaymentChallengeFinal(
      operator: PromiseOrValue<string>,
      stakeIndex: PromiseOrValue<BigNumberish>,
      nonSignerIndex: PromiseOrValue<BigNumberish>,
      nonSignerPubkeyHashes: PromiseOrValue<BytesLike>[],
      totalStakesSigned: IPaymentManager.TotalStakesStruct,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      stakeHistoryIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllowance(
      allowed: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentFraudproofCollateral(
      _paymentFraudproofCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  collateralToken(overrides?: CallOverrides): Promise<string>;

  commitPayment(
    toTaskNumber: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositFutureFees(
    onBehalfOf: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmount1(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmount2(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getChallengeStatus(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getDiff(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getFromTaskNumber(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getPaymentCollateral(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getToTaskNumber(
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  initPaymentChallenge(
    operator: PromiseOrValue<string>,
    amount1: PromiseOrValue<BigNumberish>,
    amount2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payFee(
    initiator: PromiseOrValue<string>,
    payer: PromiseOrValue<string>,
    feeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paymentFraudproofCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  paymentFraudproofInterval(overrides?: CallOverrides): Promise<BigNumber>;

  paymentToken(overrides?: CallOverrides): Promise<string>;

  performChallengeBisectionStep(
    operator: PromiseOrValue<string>,
    secondHalf: PromiseOrValue<boolean>,
    amount1: PromiseOrValue<BigNumberish>,
    amount2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemPayment(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveChallenge(
    operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  respondToPaymentChallengeFinal(
    operator: PromiseOrValue<string>,
    stakeIndex: PromiseOrValue<BigNumberish>,
    nonSignerIndex: PromiseOrValue<BigNumberish>,
    nonSignerPubkeyHashes: PromiseOrValue<BytesLike>[],
    totalStakesSigned: IPaymentManager.TotalStakesStruct,
    searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
    stakeHistoryIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllowance(
    allowed: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentFraudproofCollateral(
    _paymentFraudproofCollateral: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collateralToken(overrides?: CallOverrides): Promise<string>;

    commitPayment(
      toTaskNumber: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFutureFees(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmount1(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmount2(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChallengeStatus(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getDiff(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getFromTaskNumber(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getPaymentCollateral(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToTaskNumber(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    initPaymentChallenge(
      operator: PromiseOrValue<string>,
      amount1: PromiseOrValue<BigNumberish>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payFee(
      initiator: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    paymentFraudproofCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    paymentFraudproofInterval(overrides?: CallOverrides): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<string>;

    performChallengeBisectionStep(
      operator: PromiseOrValue<string>,
      secondHalf: PromiseOrValue<boolean>,
      amount1: PromiseOrValue<BigNumberish>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemPayment(overrides?: CallOverrides): Promise<void>;

    resolveChallenge(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    respondToPaymentChallengeFinal(
      operator: PromiseOrValue<string>,
      stakeIndex: PromiseOrValue<BigNumberish>,
      nonSignerIndex: PromiseOrValue<BigNumberish>,
      nonSignerPubkeyHashes: PromiseOrValue<BytesLike>[],
      totalStakesSigned: IPaymentManager.TotalStakesStruct,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      stakeHistoryIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowance(
      allowed: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentFraudproofCollateral(
      _paymentFraudproofCollateral: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    commitPayment(
      toTaskNumber: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositFutureFees(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmount1(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmount2(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChallengeStatus(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDiff(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFromTaskNumber(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentCollateral(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToTaskNumber(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initPaymentChallenge(
      operator: PromiseOrValue<string>,
      amount1: PromiseOrValue<BigNumberish>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payFee(
      initiator: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paymentFraudproofCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    paymentFraudproofInterval(overrides?: CallOverrides): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    performChallengeBisectionStep(
      operator: PromiseOrValue<string>,
      secondHalf: PromiseOrValue<boolean>,
      amount1: PromiseOrValue<BigNumberish>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemPayment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveChallenge(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    respondToPaymentChallengeFinal(
      operator: PromiseOrValue<string>,
      stakeIndex: PromiseOrValue<BigNumberish>,
      nonSignerIndex: PromiseOrValue<BigNumberish>,
      nonSignerPubkeyHashes: PromiseOrValue<BytesLike>[],
      totalStakesSigned: IPaymentManager.TotalStakesStruct,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      stakeHistoryIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllowance(
      allowed: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentFraudproofCollateral(
      _paymentFraudproofCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitPayment(
      toTaskNumber: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositFutureFees(
      onBehalfOf: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmount1(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmount2(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChallengeStatus(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDiff(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFromTaskNumber(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentCollateral(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToTaskNumber(
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initPaymentChallenge(
      operator: PromiseOrValue<string>,
      amount1: PromiseOrValue<BigNumberish>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payFee(
      initiator: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      feeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paymentFraudproofCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentFraudproofInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performChallengeBisectionStep(
      operator: PromiseOrValue<string>,
      secondHalf: PromiseOrValue<boolean>,
      amount1: PromiseOrValue<BigNumberish>,
      amount2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemPayment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveChallenge(
      operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    respondToPaymentChallengeFinal(
      operator: PromiseOrValue<string>,
      stakeIndex: PromiseOrValue<BigNumberish>,
      nonSignerIndex: PromiseOrValue<BigNumberish>,
      nonSignerPubkeyHashes: PromiseOrValue<BytesLike>[],
      totalStakesSigned: IPaymentManager.TotalStakesStruct,
      searchData: IDataLayrServiceManager.DataStoreSearchDataStruct,
      stakeHistoryIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllowance(
      allowed: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentFraudproofCollateral(
      _paymentFraudproofCollateral: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
