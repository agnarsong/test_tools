/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  DataStoreUtils,
  DataStoreUtilsInterface,
} from "../../../../contracts/libraries/eigenda/DataStoreUtils";

const _abi = [
  {
    inputs: [],
    name: "BIP_MULTIPLIER",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BIT_SHIFT_degree",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BIT_SHIFT_numSys",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BYTES_PER_COEFFICIENT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "HEADER_OFFSET_degree",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "HEADER_OFFSET_numSys",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e9610039600b82828239805160001a60731461002c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060655760003560e01c8063206a648014606a57806351017c4f14606a57806366e947bd14608457806380a4170314608b578063a3c7eaf0146092578063b6e1ce311460ac575b600080fd5b607160e081565b6040519081526020015b60405180910390f35b6071604481565b6071604081565b609a61271081565b60405161ffff9091168152602001607b565b6071601f8156fea2646970667358221220b291aa5d8e8820614000efdfd277b99ad2a8562f6d895e5787e95a3fb78e2c7964736f6c63430008090033";

type DataStoreUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataStoreUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DataStoreUtils__factory extends ContractFactory {
  constructor(...args: DataStoreUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DataStoreUtils> {
    return super.deploy(overrides || {}) as Promise<DataStoreUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DataStoreUtils {
    return super.attach(address) as DataStoreUtils;
  }
  override connect(signer: Signer): DataStoreUtils__factory {
    return super.connect(signer) as DataStoreUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataStoreUtilsInterface {
    return new utils.Interface(_abi) as DataStoreUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DataStoreUtils {
    return new Contract(address, _abi, signerOrProvider) as DataStoreUtils;
  }
}
