/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FailingReceiver,
  FailingReceiverInterface,
} from "../../../contracts/test-helpers/FailingReceiver";

const _abi = [
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060818061001e6000396000f3fe60806040523660465760405162461bcd60e51b815260206004820152600f60248201526e2330b4b634b733a932b1b2b4bb32b960891b604482015260640160405180910390fd5b600080fdfea2646970667358221220a6732966ac217cd0b0e6b8914aac8f2936a9399e89b236e2745372cfa622eef164736f6c63430008090033";

type FailingReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FailingReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FailingReceiver__factory extends ContractFactory {
  constructor(...args: FailingReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FailingReceiver> {
    return super.deploy(overrides || {}) as Promise<FailingReceiver>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FailingReceiver {
    return super.attach(address) as FailingReceiver;
  }
  override connect(signer: Signer): FailingReceiver__factory {
    return super.connect(signer) as FailingReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FailingReceiverInterface {
    return new utils.Interface(_abi) as FailingReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FailingReceiver {
    return new Contract(address, _abi, signerOrProvider) as FailingReceiver;
  }
}
