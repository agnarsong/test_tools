/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockStateCommitmentChain,
  MockStateCommitmentChainInterface,
} from "../../../contracts/test-helpers/MockStateCommitmentChain";

const _abi = [
  {
    inputs: [],
    name: "FRAUD_PROOF_WINDOW",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_batch",
        type: "bytes32[]",
      },
      {
        internalType: "uint256",
        name: "_shouldStartAtElement",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_signature",
        type: "bytes",
      },
    ],
    name: "appendStateBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610222806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632169f79f1461003b578063c17b291b14610050575b600080fd5b61004e61004936600461011b565b505050565b005b600060405190815260200160405180910390f35b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156100a3576100a3610064565b604052919050565b600082601f8301126100bc57600080fd5b813567ffffffffffffffff8111156100d6576100d6610064565b6100e9601f8201601f191660200161007a565b8181528460208386010111156100fe57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561013057600080fd5b833567ffffffffffffffff8082111561014857600080fd5b818601915086601f83011261015c57600080fd5b813560208282111561017057610170610064565b8160051b61017f82820161007a565b928352848101820192828101908b85111561019957600080fd5b958301955b848710156101b75786358252958301959083019061019e565b9850505087013594505060408601359150808211156101d557600080fd5b506101e2868287016100ab565b915050925092509256fea26469706673582212203bbb935180cd3555776c158999a01bb4634d53eb400b705110e4e9a4f3366fc664736f6c63430008090033";

type MockStateCommitmentChainConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockStateCommitmentChainConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockStateCommitmentChain__factory extends ContractFactory {
  constructor(...args: MockStateCommitmentChainConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockStateCommitmentChain> {
    return super.deploy(overrides || {}) as Promise<MockStateCommitmentChain>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockStateCommitmentChain {
    return super.attach(address) as MockStateCommitmentChain;
  }
  override connect(signer: Signer): MockStateCommitmentChain__factory {
    return super.connect(signer) as MockStateCommitmentChain__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStateCommitmentChainInterface {
    return new utils.Interface(_abi) as MockStateCommitmentChainInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockStateCommitmentChain {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockStateCommitmentChain;
  }
}
