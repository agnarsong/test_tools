/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  VerifierTestDriver,
  VerifierTestDriverInterface,
} from "../../../../../../contracts/L1/fraud-proof/verifier/test-driver/VerifierTestDriver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_blockInitiationVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_blockFinalizationVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_interTxVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_stackOpVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_environmentalOpVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_memoryOpVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_storageOpVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_callOpVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_invalidOpVerifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sequencerAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "number",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "origin",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "txHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "uint64",
            name: "nonce",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "gasPrice",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "gas",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "v",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "r",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "s",
            type: "uint256",
          },
        ],
        internalType: "struct EVMTypesLib.Transaction",
        name: "transaction",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "verifier",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "currStateHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516108b53803806108b583398101604081905261002f916100eb565b600080546001600160a01b03199081166001600160a01b039b8c1617909155600180548216998b1699909917909855600280548916978a16979097179096556003805488169589169590951790945560048054871693881693909317909255600580548616918716919091179055600680548516918616919091179055600780548416918516919091179055600880549092169216919091179055610193565b80516001600160a01b03811681146100e657600080fd5b919050565b60008060008060008060008060006101208a8c03121561010a57600080fd5b6101138a6100cf565b985061012160208b016100cf565b975061012f60408b016100cf565b965061013d60608b016100cf565b955061014b60808b016100cf565b945061015960a08b016100cf565b935061016760c08b016100cf565b925061017560e08b016100cf565b91506101846101008b016100cf565b90509295985092959850929598565b610713806101a26000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806386f73e4e14610030575b600080fd5b61004361003e3660046103d7565b610055565b60405190815260200160405180910390f35b6000806040518060e001604052808d6001600160a01b031681526020018c81526020018b81526020018a6001600160a01b031681526020018881526020016000801b815260200189815250905060006100ad8761013f565b6001600160a01b0316632138b3e4838888886040518563ffffffff1660e01b81526004016100de94939291906105b0565b60206040518083038186803b1580156100f657600080fd5b505afa15801561010a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012e91906106c4565b9d9c50505050505050505050505050565b600060ff82166007141561015e5750506000546001600160a01b031690565b60ff82166008141561017b5750506001546001600160a01b031690565b60ff8216600614156101985750506002546001600160a01b031690565b60ff82166101b15750506003546001600160a01b031690565b60ff8216600114156101ce5750506004546001600160a01b031690565b60ff8216600214156101eb5750506005546001600160a01b031690565b60ff8216600314156102085750506006546001600160a01b031690565b60ff8216600414156102255750506007546001600160a01b031690565b60ff8216600514156102425750506008546001600160a01b031690565b60405162461bcd60e51b815260206004820152600b60248201526a756e726561636861626c6560a81b604482015260640160405180910390fd5b919050565b80356001600160a01b038116811461027c57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156102d2576102d2610298565b60405290565b803567ffffffffffffffff8116811461027c57600080fd5b600082601f83011261030157600080fd5b813567ffffffffffffffff8082111561031c5761031c610298565b604051601f8301601f19908116603f0116810190828211818310171561034457610344610298565b8160405283815286602085880101111561035d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff8116811461027c57600080fd5b60008083601f8401126103a057600080fd5b50813567ffffffffffffffff8111156103b857600080fd5b6020830191508360208285010111156103d057600080fd5b9250929050565b6000806000806000806000806000806101208b8d0312156103f757600080fd5b6104008b610281565b995060208b0135985060408b0135975061041c60608c01610281565b965060808b0135955067ffffffffffffffff8060a08d0135111561043f57600080fd5b60a08c01358c01610120818f03121561045757600080fd5b61045f6102ae565b610468826102d8565b815260208201356020820152610480604083016102d8565b604082015261049160608301610281565b6060820152608082013560808201528260a083013511156104b157600080fd5b6104c18f60a084013584016102f0565b60a082015260c082013560c082015260e082013560e082015261010082013561010082015280975050506104f760c08d0161037d565b945060e08c013593506101008c01358181111561051357600080fd5b61051f8e828f0161038e565b9250905080935050809150509295989b9194979a5092959850565b6000815180845260005b8181101561056057602081850181015186830182015201610544565b81811115610572576000602083870101525b50601f01601f19169290920160200192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606080825285516001600160a01b03908116838301526020870151608080850191909152604088015160a0850152918701511660c083015285015160e080830152805167ffffffffffffffff166101408301526000906020810151610160840152604081015167ffffffffffffffff81166101808501525060608101516001600160a01b0381166101a08501525060808101516101c084015260a0810151610120806101e086015261066661026086018361053a565b915060c083015161020086015260e08301516102208601526101008084015161024087015260a08a0151818701525060c0890151818601525086602085015283810360408501526106b8818688610587565b98975050505050505050565b6000602082840312156106d657600080fd5b505191905056fea2646970667358221220864fb7fe4badeabd6cae63209cdf4dfa61d21b77ea2d3cecb4483988facc50de64736f6c63430008090033";

type VerifierTestDriverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifierTestDriverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VerifierTestDriver__factory extends ContractFactory {
  constructor(...args: VerifierTestDriverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _blockInitiationVerifier: PromiseOrValue<string>,
    _blockFinalizationVerifier: PromiseOrValue<string>,
    _interTxVerifier: PromiseOrValue<string>,
    _stackOpVerifier: PromiseOrValue<string>,
    _environmentalOpVerifier: PromiseOrValue<string>,
    _memoryOpVerifier: PromiseOrValue<string>,
    _storageOpVerifier: PromiseOrValue<string>,
    _callOpVerifier: PromiseOrValue<string>,
    _invalidOpVerifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VerifierTestDriver> {
    return super.deploy(
      _blockInitiationVerifier,
      _blockFinalizationVerifier,
      _interTxVerifier,
      _stackOpVerifier,
      _environmentalOpVerifier,
      _memoryOpVerifier,
      _storageOpVerifier,
      _callOpVerifier,
      _invalidOpVerifier,
      overrides || {}
    ) as Promise<VerifierTestDriver>;
  }
  override getDeployTransaction(
    _blockInitiationVerifier: PromiseOrValue<string>,
    _blockFinalizationVerifier: PromiseOrValue<string>,
    _interTxVerifier: PromiseOrValue<string>,
    _stackOpVerifier: PromiseOrValue<string>,
    _environmentalOpVerifier: PromiseOrValue<string>,
    _memoryOpVerifier: PromiseOrValue<string>,
    _storageOpVerifier: PromiseOrValue<string>,
    _callOpVerifier: PromiseOrValue<string>,
    _invalidOpVerifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _blockInitiationVerifier,
      _blockFinalizationVerifier,
      _interTxVerifier,
      _stackOpVerifier,
      _environmentalOpVerifier,
      _memoryOpVerifier,
      _storageOpVerifier,
      _callOpVerifier,
      _invalidOpVerifier,
      overrides || {}
    );
  }
  override attach(address: string): VerifierTestDriver {
    return super.attach(address) as VerifierTestDriver;
  }
  override connect(signer: Signer): VerifierTestDriver__factory {
    return super.connect(signer) as VerifierTestDriver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifierTestDriverInterface {
    return new utils.Interface(_abi) as VerifierTestDriverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VerifierTestDriver {
    return new Contract(address, _abi, signerOrProvider) as VerifierTestDriver;
  }
}
