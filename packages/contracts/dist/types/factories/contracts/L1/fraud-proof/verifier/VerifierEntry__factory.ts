/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  VerifierEntry,
  VerifierEntryInterface,
} from "../../../../../contracts/L1/fraud-proof/verifier/VerifierEntry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "blockFinalizationVerifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "blockInitiationVerifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "callOpVerifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "environmentalOpVerifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "interTxVerifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "invalidOpVerifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "memoryOpVerifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "verifier",
        type: "uint8",
      },
      {
        internalType: "contract IVerifier",
        name: "impl",
        type: "address",
      },
    ],
    name: "setVerifier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stackOpVerifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "storageOpVerifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "coinbase",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "number",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "origin",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "nonce",
                type: "uint64",
              },
              {
                internalType: "uint256",
                name: "gasPrice",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "gas",
                type: "uint64",
              },
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "v",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "r",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "s",
                type: "uint256",
              },
            ],
            internalType: "struct EVMTypesLib.Transaction",
            name: "transaction",
            type: "tuple",
          },
          {
            internalType: "bytes32",
            name: "inputRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32",
          },
        ],
        internalType: "struct VerificationContext.Context",
        name: "ctx",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "verifier",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "currStateHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "encoded",
        type: "bytes",
      },
    ],
    name: "verifyOneStepProof",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610dda806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063625eb72e116100975780638da5cb5b116100665780638da5cb5b146101e25780639d765195146101f3578063aa8841a214610206578063f2fde38b1461021957600080fd5b8063625eb72e1461019e5780636ab263d0146101bf578063715018a6146101d25780638129fc1c146101da57600080fd5b80633f1bf192116100d35780633f1bf192146101525780634539aaef1461016557806353660e701461017857806354f5b8581461018b57600080fd5b806317facb7d146100fa578063199efa461461012a5780632fb8ff971461013d575b600080fd5b606a5461010d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b606c5461010d906001600160a01b031681565b61015061014b366004610850565b61022c565b005b606d5461010d906001600160a01b031681565b60695461010d906001600160a01b031681565b60685461010d906001600160a01b031681565b606b5461010d906001600160a01b031681565b6101b16101ac366004610a93565b6103ee565b604051908152602001610121565b60675461010d906001600160a01b031681565b610150610584565b610150610598565b6033546001600160a01b031661010d565b60665461010d906001600160a01b031681565b60655461010d906001600160a01b031681565b610150610227366004610b92565b6106a9565b61023461071f565b60ff82166007141561025f57606580546001600160a01b0319166001600160a01b0383161790555050565b60ff82166008141561028a57606680546001600160a01b0319166001600160a01b0383161790555050565b60ff8216600614156102b557606780546001600160a01b0319166001600160a01b0383161790555050565b60ff82166102dc57606880546001600160a01b0319166001600160a01b0383161790555050565b60ff82166001141561030757606980546001600160a01b0319166001600160a01b0383161790555050565b60ff82166002141561033257606a80546001600160a01b0319166001600160a01b0383161790555050565b60ff82166003141561035d57606b80546001600160a01b0319166001600160a01b0383161790555050565b60ff82166004141561038857606c80546001600160a01b0319166001600160a01b0383161790555050565b60ff8216600514156103b357606d80546001600160a01b0319166001600160a01b0383161790555050565b60405162461bcd60e51b815260206004820152600b60248201526a756e726561636861626c6560a81b60448201526064015b60405180910390fd5b60008060ff86166007141561040f57506065546001600160a01b03166104f7565b60ff86166008141561042d57506066546001600160a01b03166104f7565b60ff86166006141561044b57506067546001600160a01b03166104f7565b60ff861661046557506068546001600160a01b03166104f7565b60ff86166001141561048357506069546001600160a01b03166104f7565b60ff8616600214156104a15750606a546001600160a01b03166104f7565b60ff8616600314156104bf5750606b546001600160a01b03166104f7565b60ff8616600414156104dd5750606c546001600160a01b03166104f7565b60ff8616600514156103b35750606d546001600160a01b03165b60405163084e2cf960e21b81526001600160a01b03821690632138b3e490610529908a90899089908990600401610c2c565b60206040518083038186803b15801561054157600080fd5b505afa158015610555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105799190610d40565b979650505050505050565b61058c61071f565b6105966000610779565b565b600054610100900460ff16158080156105b85750600054600160ff909116105b806105d25750303b1580156105d2575060005460ff166001145b6106355760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103e5565b6000805460ff191660011790558015610658576000805461ff0019166101001790555b6106606107cb565b80156106a6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6106b161071f565b6001600160a01b0381166107165760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e5565b6106a681610779565b6033546001600160a01b031633146105965760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e5565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166107f25760405162461bcd60e51b81526004016103e590610d59565b610596600054610100900460ff1661081c5760405162461bcd60e51b81526004016103e590610d59565b61059633610779565b803560ff8116811461083657600080fd5b919050565b6001600160a01b03811681146106a657600080fd5b6000806040838503121561086357600080fd5b61086c83610825565b9150602083013561087c8161083b565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156108c1576108c1610887565b60405290565b60405160e0810167ffffffffffffffff811182821017156108c1576108c1610887565b80356108368161083b565b803567ffffffffffffffff8116811461083657600080fd5b600082601f83011261091e57600080fd5b813567ffffffffffffffff8082111561093957610939610887565b604051601f8301601f19908116603f0116810190828211818310171561096157610961610887565b8160405283815286602085880101111561097a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600061012082840312156109ad57600080fd5b6109b561089d565b90506109c0826108f5565b8152602082013560208201526109d8604083016108f5565b60408201526109e9606083016108ea565b60608201526080820135608082015260a082013567ffffffffffffffff811115610a1257600080fd5b610a1e8482850161090d565b60a08301525060c082013560c082015260e082013560e082015261010080830135818301525092915050565b60008083601f840112610a5c57600080fd5b50813567ffffffffffffffff811115610a7457600080fd5b602083019150836020828501011115610a8c57600080fd5b9250929050565b600080600080600060808688031215610aab57600080fd5b853567ffffffffffffffff80821115610ac357600080fd5b9087019060e0828a031215610ad757600080fd5b610adf6108c7565b610ae8836108ea565b81526020830135602082015260408301356040820152610b0a606084016108ea565b6060820152608083013582811115610b2157600080fd5b610b2d8b82860161099a565b60808301525060a083013560a082015260c083013560c082015280975050610b5760208901610825565b9550604088013594506060880135915080821115610b7457600080fd5b50610b8188828901610a4a565b969995985093965092949392505050565b600060208284031215610ba457600080fd5b8135610baf8161083b565b9392505050565b6000815180845260005b81811015610bdc57602081850181015186830182015201610bc0565b81811115610bee576000602083870101525b50601f01601f19169290920160200192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606080825285516001600160a01b03908116838301526020870151608080850191909152604088015160a0850152918701511660c083015285015160e080830152805167ffffffffffffffff166101408301526000906020810151610160840152604081015167ffffffffffffffff81166101808501525060608101516001600160a01b0381166101a08501525060808101516101c084015260a0810151610120806101e0860152610ce2610260860183610bb6565b915060c083015161020086015260e08301516102208601526101008084015161024087015260a08a0151818701525060c089015181860152508660208501528381036040850152610d34818688610c03565b98975050505050505050565b600060208284031215610d5257600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212200bd100fa3344ca78ee347abeec803c882c250645acec9b28242d0fa1a9fb251e64736f6c63430008090033";

type VerifierEntryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifierEntryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VerifierEntry__factory extends ContractFactory {
  constructor(...args: VerifierEntryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VerifierEntry> {
    return super.deploy(overrides || {}) as Promise<VerifierEntry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): VerifierEntry {
    return super.attach(address) as VerifierEntry;
  }
  override connect(signer: Signer): VerifierEntry__factory {
    return super.connect(signer) as VerifierEntry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifierEntryInterface {
    return new utils.Interface(_abi) as VerifierEntryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VerifierEntry {
    return new Contract(address, _abi, signerOrProvider) as VerifierEntry;
  }
}
