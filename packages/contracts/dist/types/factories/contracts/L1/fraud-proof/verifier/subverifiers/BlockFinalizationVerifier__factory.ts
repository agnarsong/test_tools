/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  BlockFinalizationVerifier,
  BlockFinalizationVerifierInterface,
} from "../../../../../../contracts/L1/fraud-proof/verifier/subverifiers/BlockFinalizationVerifier";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "coinbase",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "number",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "origin",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "nonce",
                type: "uint64",
              },
              {
                internalType: "uint256",
                name: "gasPrice",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "gas",
                type: "uint64",
              },
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "v",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "r",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "s",
                type: "uint256",
              },
            ],
            internalType: "struct EVMTypesLib.Transaction",
            name: "transaction",
            type: "tuple",
          },
          {
            internalType: "bytes32",
            name: "inputRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32",
          },
        ],
        internalType: "struct VerificationContext.Context",
        name: "ctx",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "currStateHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "encoded",
        type: "bytes",
      },
    ],
    name: "executeOneStepProof",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "blockNumber",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "globalStateRoot",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "cumulativeGasUsed",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "blockHashRoot",
            type: "bytes32",
          },
        ],
        internalType: "struct OneStepProof.BlockStateProof",
        name: "endState",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "coinbase",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "number",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "origin",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "nonce",
                type: "uint64",
              },
              {
                internalType: "uint256",
                name: "gasPrice",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "gas",
                type: "uint64",
              },
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "v",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "r",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "s",
                type: "uint256",
              },
            ],
            internalType: "struct EVMTypesLib.Transaction",
            name: "transaction",
            type: "tuple",
          },
          {
            internalType: "bytes32",
            name: "inputRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32",
          },
        ],
        internalType: "struct VerificationContext.Context",
        name: "ctx",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "currStateHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "encoded",
        type: "bytes",
      },
    ],
    name: "verifyOneStepProof",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type BlockFinalizationVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlockFinalizationVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BlockFinalizationVerifier__factory extends ContractFactory {
  constructor(...args: BlockFinalizationVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BlockFinalizationVerifier> {
    return super.deploy(overrides || {}) as Promise<BlockFinalizationVerifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BlockFinalizationVerifier {
    return super.attach(address) as BlockFinalizationVerifier;
  }
  override connect(signer: Signer): BlockFinalizationVerifier__factory {
    return super.connect(signer) as BlockFinalizationVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlockFinalizationVerifierInterface {
    return new utils.Interface(_abi) as BlockFinalizationVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BlockFinalizationVerifier {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BlockFinalizationVerifier;
  }
}
