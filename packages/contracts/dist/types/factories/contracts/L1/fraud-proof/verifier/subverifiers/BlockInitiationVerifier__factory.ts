/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  BlockInitiationVerifier,
  BlockInitiationVerifierInterface,
} from "../../../../../../contracts/L1/fraud-proof/verifier/subverifiers/BlockInitiationVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "currStateHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "encoded",
        type: "bytes",
      },
    ],
    name: "executeOneStepProof",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "blockNumber",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "transactionIdx",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "globalStateRoot",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "cumulativeGasUsed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "blockGasUsed",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "blockHashRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "transactionTrieRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "receiptTrieRoot",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "bytes32[8]",
                name: "data",
                type: "bytes32[8]",
              },
            ],
            internalType: "struct BloomLib.Bloom",
            name: "logsBloom",
            type: "tuple",
          },
        ],
        internalType: "struct OneStepProof.InterStateProof",
        name: "endState",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "coinbase",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "number",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "origin",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "nonce",
                type: "uint64",
              },
              {
                internalType: "uint256",
                name: "gasPrice",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "gas",
                type: "uint64",
              },
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "v",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "r",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "s",
                type: "uint256",
              },
            ],
            internalType: "struct EVMTypesLib.Transaction",
            name: "transaction",
            type: "tuple",
          },
          {
            internalType: "bytes32",
            name: "inputRoot",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "txHash",
            type: "bytes32",
          },
        ],
        internalType: "struct VerificationContext.Context",
        name: "",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "currStateHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "encoded",
        type: "bytes",
      },
    ],
    name: "verifyOneStepProof",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b5b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632138b3e41461003b578063a1c1f6ab14610061575b600080fd5b61004e6100493660046108a5565b610081565b6040519081526020015b60405180910390f35b61007461006f36600461098e565b61009f565b6040516100589190610a05565b600061009661009185858561009f565b6101b7565b95945050505050565b6100a7610615565b60408051608081018252600080825260208201819052918101829052606081018290526100d58585846101d0565b604051919350915060009083878237839020905086811461012f5760405162461bcd60e51b815260206004820152600f60248201526e2130b21029ba30ba3290283937b7b360891b60448201526064015b60405180910390fd5b815161013c906001610a96565b6001600160401b03168452600060208086019190915282015160408086019190915282015160608086019190915282015160a08501527f56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b42160c0850181905260e08501526101a7610394565b6101008501525050509392505050565b60006101c28261039f565b805190602001209050919050565b604080516080810182526000808252602082018190529181018290526060810182905260686102086001600160401b03851686610ac1565b10156102565760405162461bcd60e51b815260206004820152601760248201527f50726f6f6620556e646572666c6f772028426c6f636b290000000000000000006044820152606401610126565b6102a2836001600160401b031686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506104dd9050565b6001600160401b031681526103036102bb846008610a96565b6001600160401b031686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505061053a9050565b602082015261035e610316846028610a96565b6001600160401b031686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506104dd9050565b6001600160401b0316604082015261037a6102bb846048610a96565b606082015261038a836068610a96565b9150935093915050565b61039c610668565b90565b60606103e382600001516040516020016103cc919060c09190911b6001600160c01b031916815260080190565b60408051601f198184030181529190528290610598565b905061041082602001516040516020016103cc919060c09190911b6001600160c01b031916815260080190565b905061042c82604001516040516020016103cc91815260200190565b905061044882606001516040516020016103cc91815260200190565b905061046482608001516040516020016103cc91815260200190565b90506104808260a001516040516020016103cc91815260200190565b905061049c8260c001516040516020016103cc91815260200190565b90506104b88260e001516040516020016103cc91815260200190565b90506104d7826101000151600001516040516020016103cc9190610ad8565b92915050565b60006104ea826008610b0d565b835110156105315760405162461bcd60e51b8152602060048201526014602482015273746f55696e7436345f6f75744f66426f756e647360601b6044820152606401610126565b50016008015190565b6000610547826020610b0d565b8351101561058f5760405162461bcd60e51b8152602060048201526015602482015274746f427974657333325f6f75744f66426f756e647360581b6044820152606401610126565b50016020015190565b6060806040519050835180825260208201818101602087015b818310156105c95780518352602092830192016105b1565b50855184518101855292509050808201602086015b818310156105f65780518352602092830192016105de565b508651929092011591909101601f01601f191660405250905092915050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091526101008101610663610668565b905290565b604080516101208101909152806106636020820160088161010080368337509192915050565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b03811182821017156106c7576106c761068e565b60405290565b60405160e081016001600160401b03811182821017156106c7576106c761068e565b80356001600160a01b038116811461070657600080fd5b919050565b80356001600160401b038116811461070657600080fd5b600082601f83011261073357600080fd5b81356001600160401b038082111561074d5761074d61068e565b604051601f8301601f19908116603f011681019082821181831017156107755761077561068e565b8160405283815286602085880101111561078e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600061012082840312156107c157600080fd5b6107c96106a4565b90506107d48261070b565b8152602082013560208201526107ec6040830161070b565b60408201526107fd606083016106ef565b60608201526080820135608082015260a08201356001600160401b0381111561082557600080fd5b61083184828501610722565b60a08301525060c082013560c082015260e082013560e082015261010080830135818301525092915050565b60008083601f84011261086f57600080fd5b5081356001600160401b0381111561088657600080fd5b60208301915083602082850101111561089e57600080fd5b9250929050565b600080600080606085870312156108bb57600080fd5b84356001600160401b03808211156108d257600080fd5b9086019060e082890312156108e657600080fd5b6108ee6106cd565b6108f7836106ef565b81526020830135602082015260408301356040820152610919606084016106ef565b606082015260808301358281111561093057600080fd5b61093c8a8286016107ae565b60808301525060a083013560a082015260c083013560c08201528096505060208701359450604087013591508082111561097557600080fd5b506109828782880161085d565b95989497509550505050565b6000806000604084860312156109a357600080fd5b8335925060208401356001600160401b038111156109c057600080fd5b6109cc8682870161085d565b9497909650939450505050565b80518260005b60088110156109fe5782518252602092830192909101906001016109df565b5050505050565b6000610200820190506001600160401b038084511683528060208501511660208401525060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151610a78828501826109d9565b505092915050565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b03808316818516808303821115610ab857610ab8610a80565b01949350505050565b600082821015610ad357610ad3610a80565b500390565b60008183825b6008811015610afd578151835260209283019290910190600101610ade565b5050506101008201905092915050565b60008219821115610b2057610b20610a80565b50019056fea26469706673582212208230302099458615f0a80a2d69597510272bff43b8da416bc045181436cf49e564736f6c63430008090033";

type BlockInitiationVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlockInitiationVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BlockInitiationVerifier__factory extends ContractFactory {
  constructor(...args: BlockInitiationVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BlockInitiationVerifier> {
    return super.deploy(overrides || {}) as Promise<BlockInitiationVerifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BlockInitiationVerifier {
    return super.attach(address) as BlockInitiationVerifier;
  }
  override connect(signer: Signer): BlockInitiationVerifier__factory {
    return super.connect(signer) as BlockInitiationVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlockInitiationVerifierInterface {
    return new utils.Interface(_abi) as BlockInitiationVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BlockInitiationVerifier {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BlockInitiationVerifier;
  }
}
