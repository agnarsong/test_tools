/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  DelegationCallbackBase,
  DelegationCallbackBaseInterface,
} from "../../../../contracts/L1/delegation/DelegationCallbackBase";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "delegation",
    outputs: [
      {
        internalType: "contract IDelegation",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegator",
        type: "address",
      },
      {
        internalType: "contract IDelegationShare[]",
        name: "investorDelegationShares",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "investorShares",
        type: "uint256[]",
      },
    ],
    name: "onDelegationReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegator",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "contract IDelegationShare[]",
        name: "delegationShares",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "investorShares",
        type: "uint256[]",
      },
    ],
    name: "onDelegationReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegator",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "contract IDelegationShare[]",
        name: "delegationShares",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "investorShares",
        type: "uint256[]",
      },
    ],
    name: "onDelegationWithdrawn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "delegator",
        type: "address",
      },
      {
        internalType: "contract IDelegationShare[]",
        name: "investorDelegationShares",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "investorShares",
        type: "uint256[]",
      },
    ],
    name: "onDelegationWithdrawn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "payForService",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class DelegationCallbackBase__factory {
  static readonly abi = _abi;
  static createInterface(): DelegationCallbackBaseInterface {
    return new utils.Interface(_abi) as DelegationCallbackBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DelegationCallbackBase {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DelegationCallbackBase;
  }
}
