/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IDelegationManager,
  IDelegationManagerInterface,
} from "../../../../../contracts/L1/delegation/interfaces/IDelegationManager";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IDelegationShare[]",
            name: "delegations",
            type: "address[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "shares",
            type: "uint256[]",
          },
          {
            internalType: "address",
            name: "depositor",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "withdrawer",
                type: "address",
              },
              {
                internalType: "uint96",
                name: "nonce",
                type: "uint96",
              },
            ],
            internalType: "struct IDelegationManager.WithdrawerAndNonce",
            name: "withdrawerAndNonce",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "delegatedAddress",
            type: "address",
          },
        ],
        internalType: "struct IDelegationManager.QueuedWithdrawal",
        name: "queuedWithdrawal",
        type: "tuple",
      },
    ],
    name: "calculateWithdrawalRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IDelegationShare[]",
            name: "delegations",
            type: "address[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "shares",
            type: "uint256[]",
          },
          {
            internalType: "address",
            name: "depositor",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "withdrawer",
                type: "address",
              },
              {
                internalType: "uint96",
                name: "nonce",
                type: "uint96",
              },
            ],
            internalType: "struct IDelegationManager.WithdrawerAndNonce",
            name: "withdrawerAndNonce",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "delegatedAddress",
            type: "address",
          },
        ],
        internalType: "struct IDelegationManager.QueuedWithdrawal",
        name: "queuedWithdrawal",
        type: "tuple",
      },
    ],
    name: "canCompleteQueuedWithdrawal",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IDelegationShare[]",
            name: "delegations",
            type: "address[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "shares",
            type: "uint256[]",
          },
          {
            internalType: "address",
            name: "depositor",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "withdrawer",
                type: "address",
              },
              {
                internalType: "uint96",
                name: "nonce",
                type: "uint96",
              },
            ],
            internalType: "struct IDelegationManager.WithdrawerAndNonce",
            name: "withdrawerAndNonce",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "delegatedAddress",
            type: "address",
          },
        ],
        internalType: "struct IDelegationManager.QueuedWithdrawal",
        name: "queuedWithdrawal",
        type: "tuple",
      },
      {
        internalType: "bool",
        name: "receiveAsTokens",
        type: "bool",
      },
    ],
    name: "completeQueuedWithdrawal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "delegation",
    outputs: [
      {
        internalType: "contract IDelegation",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delegationSlasher",
    outputs: [
      {
        internalType: "contract IDelegationSlasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IDelegationShare",
        name: "delegationShare",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositInto",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "depositor",
        type: "address",
      },
    ],
    name: "getDeposits",
    outputs: [
      {
        internalType: "contract IDelegationShare[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
    ],
    name: "investorDelegationLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "contract IDelegationShare",
        name: "delegationShare",
        type: "address",
      },
    ],
    name: "investorDelegationShares",
    outputs: [
      {
        internalType: "uint256",
        name: "shares",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "delegationShareIndexes",
        type: "uint256[]",
      },
      {
        internalType: "contract IDelegationShare[]",
        name: "delegationShares",
        type: "address[]",
      },
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "shareAmounts",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "withdrawer",
            type: "address",
          },
          {
            internalType: "uint96",
            name: "nonce",
            type: "uint96",
          },
        ],
        internalType: "struct IDelegationManager.WithdrawerAndNonce",
        name: "withdrawerAndNonce",
        type: "tuple",
      },
      {
        internalType: "bool",
        name: "undelegateIfPossible",
        type: "bool",
      },
    ],
    name: "queueWithdrawal",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IDelegationShare[]",
            name: "delegations",
            type: "address[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "shares",
            type: "uint256[]",
          },
          {
            internalType: "address",
            name: "depositor",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "withdrawer",
                type: "address",
              },
              {
                internalType: "uint96",
                name: "nonce",
                type: "uint96",
              },
            ],
            internalType: "struct IDelegationManager.WithdrawerAndNonce",
            name: "withdrawerAndNonce",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "delegatedAddress",
            type: "address",
          },
        ],
        internalType: "struct IDelegationManager.QueuedWithdrawal",
        name: "queuedWithdrawal",
        type: "tuple",
      },
    ],
    name: "slashQueuedWithdrawal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "slashedAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "contract IDelegationShare[]",
        name: "delegationShares",
        type: "address[]",
      },
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "delegationShareIndexes",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "shareAmounts",
        type: "uint256[]",
      },
    ],
    name: "slashShares",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "withdrawalRoot",
        type: "bytes32",
      },
      {
        internalType: "uint32",
        name: "stakeInactiveAfter",
        type: "uint32",
      },
    ],
    name: "startQueuedWithdrawalWaitingPeriod",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IDelegationManager__factory {
  static readonly abi = _abi;
  static createInterface(): IDelegationManagerInterface {
    return new utils.Interface(_abi) as IDelegationManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IDelegationManager {
    return new Contract(address, _abi, signerOrProvider) as IDelegationManager;
  }
}
