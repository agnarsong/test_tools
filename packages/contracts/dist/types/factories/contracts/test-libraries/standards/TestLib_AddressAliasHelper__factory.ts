/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestLib_AddressAliasHelper,
  TestLib_AddressAliasHelperInterface,
} from "../../../../contracts/test-libraries/standards/TestLib_AddressAliasHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "applyL1ToL2Alias",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "undoL1ToL2Alias",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610113806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063689992b31460375780637528c2c6146062575b600080fd5b6046604236600460af565b6071565b6040516001600160a01b03909116815260200160405180910390f35b6046606d36600460af565b6092565b60007311110000000000000000000000000000000011101982015b92915050565b60007311110000000000000000000000000000000011118201608c565b60006020828403121560c057600080fd5b81356001600160a01b038116811460d657600080fd5b939250505056fea2646970667358221220238cf240d9c64607fec565e8de1fdd4f791889a9b5aa432ce30914b5063ca2b364736f6c63430008090033";

type TestLib_AddressAliasHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestLib_AddressAliasHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestLib_AddressAliasHelper__factory extends ContractFactory {
  constructor(...args: TestLib_AddressAliasHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestLib_AddressAliasHelper> {
    return super.deploy(overrides || {}) as Promise<TestLib_AddressAliasHelper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestLib_AddressAliasHelper {
    return super.attach(address) as TestLib_AddressAliasHelper;
  }
  override connect(signer: Signer): TestLib_AddressAliasHelper__factory {
    return super.connect(signer) as TestLib_AddressAliasHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestLib_AddressAliasHelperInterface {
    return new utils.Interface(_abi) as TestLib_AddressAliasHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLib_AddressAliasHelper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestLib_AddressAliasHelper;
  }
}
