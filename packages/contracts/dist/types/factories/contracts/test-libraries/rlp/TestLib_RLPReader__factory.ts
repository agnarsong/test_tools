/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestLib_RLPReader,
  TestLib_RLPReaderInterface,
} from "../../../../contracts/test-libraries/rlp/TestLib_RLPReader";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes",
      },
    ],
    name: "readAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes",
      },
    ],
    name: "readBool",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes",
      },
    ],
    name: "readBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes",
      },
    ],
    name: "readBytes32",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes",
      },
    ],
    name: "readList",
    outputs: [
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes",
      },
    ],
    name: "readString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes",
      },
    ],
    name: "readUint256",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ec0806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635f71b98d1161005b5780635f71b98d146100e857806384147d531461010b5780638b33268b1461011e578063a39d36711461013157600080fd5b806316b3269e1461008257806331d12cd3146100a8578063359835b5146100c8575b600080fd5b610095610090366004610c69565b61015c565b6040519081526020015b60405180910390f35b6100bb6100b6366004610c69565b61016d565b60405161009f9190610d67565b6100db6100d6366004610c69565b610178565b60405161009f9190610d7a565b6100fb6100f6366004610c69565b61023f565b604051901515815260200161009f565b610095610119366004610c69565b61024a565b6100bb61012c366004610c69565b610255565b61014461013f366004610c69565b610260565b6040516001600160a01b03909116815260200161009f565b60006101678261026b565b92915050565b60606101678261027e565b6060600061018583610291565b90506000815167ffffffffffffffff8111156101a3576101a3610c53565b6040519080825280602002602001820160405280156101d657816020015b60608152602001906001900390816101c15790505b50905060005b8151811015610237576102078382815181106101fa576101fa610ddc565b60200260200101516102a4565b82828151811061021957610219610ddc565b6020026020010181905250808061022f90610e08565b9150506101dc565b509392505050565b6000610167826102af565b6000610167826102c2565b6060610167826102d5565b6000610167826102e8565b6000610167610279836102fb565b610328565b606061016761028c836102fb565b610333565b606061016761029f836102fb565b61033e565b60606101678261052f565b60006101676102bd836102fb565b610545565b60006101676102d0836102fb565b61062b565b60606101676102e3836102fb565b61072e565b60006101676102f6836102fb565b6107be565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b60006101678261062b565b60606101678261072e565b606060008061034c8461082d565b9193509091506001905081600181111561036857610368610e23565b146103ba5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c50206c6973742076616c75652e00000000000000000060448201526064015b60405180910390fd5b6040805160208082526104208201909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816103d35790505090506000835b8651811015610524576020821061046c5760405162461bcd60e51b815260206004820152602a60248201527f50726f766964656420524c50206c6973742065786365656473206d6178206c6960448201526939ba103632b733ba341760b11b60648201526084016103b1565b6000806104a96040518060400160405280858c6000015161048d9190610e39565b8152602001858c602001516104a29190610e50565b905261082d565b5091509150604051806040016040528083836104c59190610e50565b8152602001848b602001516104da9190610e50565b8152508585815181106104ef576104ef610ddc565b6020908102919091010152610505600185610e50565b93506105118183610e50565b61051b9084610e50565b92505050610400565b508152949350505050565b6060610167826020015160008460000151610b77565b80516000906001146105995760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020626f6f6c65616e2076616c75652e00000000000060448201526064016103b1565b6020820151805160001a8015806105b05750806001145b6106225760405162461bcd60e51b815260206004820152603860248201527f4c69625f524c505265616465723a20496e76616c696420524c5020626f6f6c6560448201527f616e2076616c75652c206d7573742062652030206f722031000000000000000060648201526084016103b1565b15159392505050565b60006021826000015111156106825760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e00000000000060448201526064016103b1565b60008060006106908561082d565b9194509250905060008160018111156106ab576106ab610e23565b146106f85760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e00000000000060448201526064016103b1565b600083866020015161070a9190610e50565b805190915060208410156107245760208490036101000a90045b9695505050505050565b6060600080600061073e8561082d565b91945092509050600081600181111561075957610759610e23565b146107a65760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c502062797465732076616c75652e000000000000000060448201526064016103b1565b6107b585602001518484610b77565b95945050505050565b8051600090600114156107d357506000919050565b81516015146108245760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020616464726573732076616c75652e00000000000060448201526064016103b1565b61016782610328565b6000806000808460000151116108855760405162461bcd60e51b815260206004820152601860248201527f524c50206974656d2063616e6e6f74206265206e756c6c2e000000000000000060448201526064016103b1565b6020840151805160001a607f81116108aa576000600160009450945094505050610b70565b60b781116109265760006108bf608083610e39565b9050808760000151116109145760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420524c502073686f727420737472696e672e0000000000000060448201526064016103b1565b60019550935060009250610b70915050565b60bf8111610a1557600061093b60b783610e39565b9050808760000151116109905760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420524c50206c6f6e6720737472696e67206c656e6774682e0060448201526064016103b1565b600183015160208290036101000a90046109aa8183610e50565b8851116109f95760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c50206c6f6e6720737472696e672e000000000000000060448201526064016103b1565b610a04826001610e50565b9650945060009350610b7092505050565b60f78111610a90576000610a2a60c083610e39565b905080876000015111610a7f5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c502073686f7274206c6973742e00000000000000000060448201526064016103b1565b600195509350849250610b70915050565b6000610a9d60f783610e39565b905080876000015111610af25760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420524c50206c6f6e67206c697374206c656e6774682e00000060448201526064016103b1565b600183015160208290036101000a9004610b0c8183610e50565b885111610b545760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b210292628103637b733903634b9ba1760511b60448201526064016103b1565b610b5f826001610e50565b9650945060019350610b7092505050565b9193909250565b606060008267ffffffffffffffff811115610b9457610b94610c53565b6040519080825280601f01601f191660200182016040528015610bbe576020820181803683370190505b509050805160001415610bd2579050610c4c565b6000610bde8587610e50565b90506020820160005b610bf2602087610e68565b811015610c295782518252610c08602084610e50565b9250610c15602083610e50565b915080610c2181610e08565b915050610be7565b5080519151601f86166020036101000a6000190192831692191691909117905290505b9392505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610c7b57600080fd5b813567ffffffffffffffff80821115610c9357600080fd5b818401915084601f830112610ca757600080fd5b813581811115610cb957610cb9610c53565b604051601f8201601f19908116603f01168101908382118183101715610ce157610ce1610c53565b81604052828152876020848701011115610cfa57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000815180845260005b81811015610d4057602081850181015186830182015201610d24565b81811115610d52576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610c4c6020830184610d1a565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610dcf57603f19888603018452610dbd858351610d1a565b94509285019290850190600101610da1565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610e1c57610e1c610df2565b5060010190565b634e487b7160e01b600052602160045260246000fd5b600082821015610e4b57610e4b610df2565b500390565b60008219821115610e6357610e63610df2565b500190565b600082610e8557634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220eb766a20f81a8dcd716f9a61b4900017d70a80ad42d9fe9f70c0aa8a89c603aa64736f6c63430008090033";

type TestLib_RLPReaderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestLib_RLPReaderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestLib_RLPReader__factory extends ContractFactory {
  constructor(...args: TestLib_RLPReaderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestLib_RLPReader> {
    return super.deploy(overrides || {}) as Promise<TestLib_RLPReader>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestLib_RLPReader {
    return super.attach(address) as TestLib_RLPReader;
  }
  override connect(signer: Signer): TestLib_RLPReader__factory {
    return super.connect(signer) as TestLib_RLPReader__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestLib_RLPReaderInterface {
    return new utils.Interface(_abi) as TestLib_RLPReaderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLib_RLPReader {
    return new Contract(address, _abi, signerOrProvider) as TestLib_RLPReader;
  }
}
