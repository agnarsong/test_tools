/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestLib_RLPWriter,
  TestLib_RLPWriterInterface,
} from "../../../../contracts/test-libraries/rlp/TestLib_RLPWriter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_in",
        type: "address",
      },
    ],
    name: "writeAddress",
    outputs: [
      {
        internalType: "bytes",
        name: "_out",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_in",
        type: "address",
      },
    ],
    name: "writeAddressWithTaintedMemory",
    outputs: [
      {
        internalType: "bytes",
        name: "_out",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_in",
        type: "bool",
      },
    ],
    name: "writeBool",
    outputs: [
      {
        internalType: "bytes",
        name: "_out",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_in",
        type: "bytes",
      },
    ],
    name: "writeBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "_out",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "_in",
        type: "bytes[]",
      },
    ],
    name: "writeList",
    outputs: [
      {
        internalType: "bytes",
        name: "_out",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_in",
        type: "string",
      },
    ],
    name: "writeString",
    outputs: [
      {
        internalType: "bytes",
        name: "_out",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_in",
        type: "uint256",
      },
    ],
    name: "writeUint",
    outputs: [
      {
        internalType: "bytes",
        name: "_out",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506118ee806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000875760003560e01c80637932db7511620000625780637932db7514620000e957806397563ac814620001005780639e5c65b71462000117578063dd206202146200012e57600080fd5b80633c5cee26146200008c5780633cbd171214620000bb5780635e25d23f14620000d2575b600080fd5b620000a36200009d36600462000841565b62000145565b604051620000b2919062000898565b60405180910390f35b620000a3620000cc366004620008cd565b62000158565b620000a3620000e3366004620008e7565b62000165565b620000a3620000fa366004620009dd565b62000172565b620000a362000111366004620008e7565b6200017f565b620000a36200012836600462000a1e565b620001b9565b620000a36200013f36600462000aef565b620001c6565b60606200015282620001d3565b92915050565b6060620001528262000242565b6060620001528262000259565b606062000152826200028e565b60606040516200018f9062000833565b604051809103906000f080158015620001ac573d6000803e3d6000fd5b5050620001528262000259565b6060620001528262000307565b6060620001528262000172565b60408051600180825281830190925260609160009190602082018180368337019050509050826200020957600160ff1b6200020f565b600160f81b5b8160008151811062000225576200022562000b3d565b60200101906001600160f81b031916908160001a90535092915050565b606062000152620002538362000351565b6200028e565b604051606082811b6bffffffffffffffffffffffff191660208301529062000152906034016040516020818303038152906040525b60608082516001148015620002c05750608083600081518110620002b657620002b662000b3d565b016020015160f81c105b15620002ce57508162000152565b620002dc83516080620004a8565b83604051602001620002f092919062000b53565b604051602081830303815290604052905092915050565b60606000620003168362000682565b905062000326815160c0620004a8565b816040516020016200033a92919062000b53565b604051602081830303815290604052915050919050565b60606000826040516020016200036991815260200190565b604051602081830303815290604052905060005b6020811015620003cc578181815181106200039c576200039c62000b3d565b01602001516001600160f81b03191615620003b757620003cc565b80620003c38162000b9c565b9150506200037d565b6000620003db82602062000bba565b67ffffffffffffffff811115620003f657620003f662000912565b6040519080825280601f01601f19166020018201604052801562000421576020820181803683370190505b50905060005b81518110156200049f5783836200043e8162000b9c565b94508151811062000453576200045362000b3d565b602001015160f81c60f81b82828151811062000473576200047362000b3d565b60200101906001600160f81b031916908160001a90535080620004968162000b9c565b91505062000427565b50949350505050565b6060806038841015620005165760408051600180825281830190925290602082018180368337019050509050620004e0838562000bd4565b60f81b81600081518110620004f957620004f962000b3d565b60200101906001600160f81b031916908160001a9053506200067b565b600060015b62000527818762000c12565b15620005535781620005398162000b9c565b92506200054b90506101008262000c29565b90506200051b565b6200056082600162000c4b565b67ffffffffffffffff8111156200057b576200057b62000912565b6040519080825280601f01601f191660200182016040528015620005a6576020820181803683370190505b509250620005b5858362000bd4565b620005c290603762000bd4565b60f81b83600081518110620005db57620005db62000b3d565b60200101906001600160f81b031916908160001a905350600190505b81811162000678576101006200060e828462000bba565b6200061c9061010062000d63565b62000628908862000c12565b62000634919062000d71565b60f81b8382815181106200064c576200064c62000b3d565b60200101906001600160f81b031916908160001a905350806200066f8162000b9c565b915050620005f7565b50505b9392505050565b6060815160001415620006a357505060408051600081526020810190915290565b6000805b8351811015620006f357838181518110620006c657620006c662000b3d565b60200260200101515182620006dc919062000c4b565b915080620006ea8162000b9c565b915050620006a7565b60008267ffffffffffffffff81111562000711576200071162000912565b6040519080825280601f01601f1916602001820160405280156200073c576020820181803683370190505b50600092509050602081015b85518310156200049f57600086848151811062000769576200076962000b3d565b6020026020010151905060006020820190506200078983828451620007ce565b8785815181106200079e576200079e62000b3d565b60200260200101515183620007b4919062000c4b565b925050508280620007c59062000b9c565b93505062000748565b8282825b60208110620008125781518352620007ec60208462000c4b565b9250620007fb60208362000c4b565b91506200080a60208262000bba565b9050620007d2565b905182516020929092036101000a6000190180199091169116179052505050565b610b308062000d8983390190565b6000602082840312156200085457600080fd5b813580151581146200067b57600080fd5b60005b838110156200088257818101518382015260200162000868565b8381111562000892576000848401525b50505050565b6020815260008251806020840152620008b981604085016020870162000865565b601f01601f19169190910160400192915050565b600060208284031215620008e057600080fd5b5035919050565b600060208284031215620008fa57600080fd5b81356001600160a01b03811681146200067b57600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562000954576200095462000912565b604052919050565b600067ffffffffffffffff83111562000979576200097962000912565b6200098e601f8401601f191660200162000928565b9050828152838383011115620009a357600080fd5b828260208301376000602084830101529392505050565b600082601f830112620009cc57600080fd5b6200067b838335602085016200095c565b600060208284031215620009f057600080fd5b813567ffffffffffffffff81111562000a0857600080fd5b62000a1684828501620009ba565b949350505050565b6000602080838503121562000a3257600080fd5b823567ffffffffffffffff8082111562000a4b57600080fd5b818501915085601f83011262000a6057600080fd5b81358181111562000a755762000a7562000912565b8060051b62000a8685820162000928565b918252838101850191858101908984111562000aa157600080fd5b86860192505b8383101562000ae25782358581111562000ac15760008081fd5b62000ad18b89838a0101620009ba565b835250918601919086019062000aa7565b9998505050505050505050565b60006020828403121562000b0257600080fd5b813567ffffffffffffffff81111562000b1a57600080fd5b8201601f8101841362000b2c57600080fd5b62000a16848235602084016200095c565b634e487b7160e01b600052603260045260246000fd5b6000835162000b6781846020880162000865565b83519083019062000b7d81836020880162000865565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141562000bb35762000bb362000b86565b5060010190565b60008282101562000bcf5762000bcf62000b86565b500390565b600060ff821660ff84168060ff0382111562000bf45762000bf462000b86565b019392505050565b634e487b7160e01b600052601260045260246000fd5b60008262000c245762000c2462000bfc565b500490565b600081600019048311821515161562000c465762000c4662000b86565b500290565b6000821982111562000c615762000c6162000b86565b500190565b600181815b8085111562000ca757816000190482111562000c8b5762000c8b62000b86565b8085161562000c9957918102915b93841c939080029062000c6b565b509250929050565b60008262000cc05750600162000152565b8162000ccf5750600062000152565b816001811462000ce8576002811462000cf35762000d13565b600191505062000152565b60ff84111562000d075762000d0762000b86565b50506001821b62000152565b5060208310610133831016604e8410600b841016171562000d38575081810a62000152565b62000d44838362000c66565b806000190482111562000d5b5762000d5b62000b86565b029392505050565b60006200067b838362000caf565b60008262000d835762000d8362000bfc565b50069056fe608060405234801561001057600080fd5b5060405180604001604052806004815260200163151154d560e21b815250604051806040016040528060038152602001621514d560ea1b815250816003908051906020019061006092919061007c565b50805161007490600490602084019061007c565b505050610150565b82805461008890610115565b90600052602060002090601f0160209004810192826100aa57600085556100f0565b82601f106100c357805160ff19168380011785556100f0565b828001600101855582156100f0579182015b828111156100f05782518255916020019190600101906100d5565b506100fc929150610100565b5090565b5b808211156100fc5760008155600101610101565b600181811c9082168061012957607f821691505b6020821081141561014a57634e487b7160e01b600052602260045260246000fd5b50919050565b6109d18061015f6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806340c10f191161007157806340c10f191461014157806370a082311461015657806395d89b411461017f578063a457c2d714610187578063a9059cbb1461019a578063dd62ed3e146101ad57600080fd5b806306fdde03146100b9578063095ea7b3146100d757806318160ddd146100fa57806323b872dd1461010c578063313ce5671461011f578063395093511461012e575b600080fd5b6100c16101e6565b6040516100ce919061080e565b60405180910390f35b6100ea6100e536600461087f565b610278565b60405190151581526020016100ce565b6002545b6040519081526020016100ce565b6100ea61011a3660046108a9565b61028e565b604051601281526020016100ce565b6100ea61013c36600461087f565b61033d565b61015461014f36600461087f565b610379565b005b6100fe6101643660046108e5565b6001600160a01b031660009081526020819052604090205490565b6100c1610387565b6100ea61019536600461087f565b610396565b6100ea6101a836600461087f565b61042f565b6100fe6101bb366004610907565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101f59061093a565b80601f01602080910402602001604051908101604052809291908181526020018280546102219061093a565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b5050505050905090565b600061028533848461043c565b50600192915050565b600061029b848484610560565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103255760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610332853385840361043c565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610285918590610374908690610975565b61043c565b610383828261072f565b5050565b6060600480546101f59061093a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104185760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161031c565b610425338585840361043c565b5060019392505050565b6000610285338484610560565b6001600160a01b03831661049e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161031c565b6001600160a01b0382166104ff5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161031c565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166105c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161031c565b6001600160a01b0382166106265760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161031c565b6001600160a01b0383166000908152602081905260409020548181101561069e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161031c565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106d5908490610975565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161072191815260200190565b60405180910390a350505050565b6001600160a01b0382166107855760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161031c565b80600260008282546107979190610975565b90915550506001600160a01b038216600090815260208190526040812080548392906107c4908490610975565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b8181101561083b5785810183015185820160400152820161081f565b8181111561084d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461087a57600080fd5b919050565b6000806040838503121561089257600080fd5b61089b83610863565b946020939093013593505050565b6000806000606084860312156108be57600080fd5b6108c784610863565b92506108d560208501610863565b9150604084013590509250925092565b6000602082840312156108f757600080fd5b61090082610863565b9392505050565b6000806040838503121561091a57600080fd5b61092383610863565b915061093160208401610863565b90509250929050565b600181811c9082168061094e57607f821691505b6020821081141561096f57634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561099657634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220f8a77a164df919a17f89be2451ca2aafb4d02ce527c31e1161f8322d048bbaa164736f6c63430008090033a2646970667358221220414f58ce0412d9fd04cd25dd0cca581ae77ef49fe252e7d858dcadc8d480439464736f6c63430008090033";

type TestLib_RLPWriterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestLib_RLPWriterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestLib_RLPWriter__factory extends ContractFactory {
  constructor(...args: TestLib_RLPWriterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestLib_RLPWriter> {
    return super.deploy(overrides || {}) as Promise<TestLib_RLPWriter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestLib_RLPWriter {
    return super.attach(address) as TestLib_RLPWriter;
  }
  override connect(signer: Signer): TestLib_RLPWriter__factory {
    return super.connect(signer) as TestLib_RLPWriter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestLib_RLPWriterInterface {
    return new utils.Interface(_abi) as TestLib_RLPWriterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLib_RLPWriter {
    return new Contract(address, _abi, signerOrProvider) as TestLib_RLPWriter;
  }
}
