/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestLib_BytesUtils,
  TestLib_BytesUtilsInterface,
} from "../../../../contracts/test-libraries/utils/TestLib_BytesUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_preBytes",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_postBytes",
        type: "bytes",
      },
    ],
    name: "concat",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytes",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_other",
        type: "bytes",
      },
    ],
    name: "equal",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytes",
        type: "bytes",
      },
    ],
    name: "fromNibbles",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytes",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_length",
        type: "uint256",
      },
    ],
    name: "slice",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytes",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_length",
        type: "uint256",
      },
    ],
    name: "sliceWithTaintedMemory",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytes",
        type: "bytes",
      },
    ],
    name: "toBytes32",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytes",
        type: "bytes",
      },
    ],
    name: "toNibbles",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytes",
        type: "bytes",
      },
    ],
    name: "toUint256",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061145f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c6fa7f7a1161005b578063c6fa7f7a14610109578063cf89ee171461011c578063e00413961461012f578063efa739761461014257600080fd5b8063235266d21461008d57806347f53431146100b55780635f3376f3146100d6578063bd37c8aa146100f6575b600080fd5b6100a061009b36600461069d565b610155565b60405190151581526020015b60405180910390f35b6100c86100c3366004610701565b610179565b6040519081526020016100ac565b6100e96100e436600461069d565b61018a565b6040516100ac9190610766565b6100c8610104366004610701565b6101b6565b6100e9610117366004610701565b6101c1565b6100e961012a366004610799565b6101cc565b6100e961013d366004610799565b61020b565b6100e9610150366004610701565b610218565b600061017283838051602091820120825192909101919091201490565b9392505050565b600061018482610223565b92915050565b6060828260405160200161019f9291906107e7565b604051602081830303815290604052905092915050565b600061018482610179565b60606101848261024b565b60606040516101da906105ec565b604051809103906000f0801580156101f6573d6000803e3d6000fd5b5050610203848484610386565b949350505050565b6060610203848484610386565b6060610184826104e2565b600060208251101561023757506020015190565b818060200190518101906101849190610816565b606060008251600261025d9190610845565b67ffffffffffffffff811115610275576102756105fa565b6040519080825280601f01601f19166020018201604052801561029f576020820181803683370190505b50905060005b835181101561037f5760048482815181106102c2576102c2610864565b01602001516001600160f81b031916901c826102df836002610845565b815181106102ef576102ef610864565b60200101906001600160f81b031916908160001a905350601084828151811061031a5761031a610864565b016020015161032c919060f81c610890565b60f81b8261033b836002610845565b6103469060016108b2565b8151811061035657610356610864565b60200101906001600160f81b031916908160001a90535080610377816108ca565b9150506102a5565b5092915050565b60608161039481601f6108b2565b10156103d85760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064015b60405180910390fd5b826103e383826108b2565b10156104225760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016103cf565b61042c82846108b2565b845110156104705760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016103cf565b60608215801561048f57604051915060008252602082016040526104d9565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156104c85780518352602092830192016104b0565b5050858452601f01601f1916604052505b50949350505050565b60606000600283516104f491906108e5565b67ffffffffffffffff81111561050c5761050c6105fa565b6040519080825280601f01601f191660200182016040528015610536576020820181803683370190505b50905060005b815181101561037f5783610551826002610845565b61055c9060016108b2565b8151811061056c5761056c610864565b01602001516001600160f81b031916600485610589846002610845565b8151811061059957610599610864565b602001015160f81c60f81b6001600160f81b031916901b178282815181106105c3576105c3610864565b60200101906001600160f81b031916908160001a905350806105e4816108ca565b91505061053c565b610b3080620008fa83390190565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261062157600080fd5b813567ffffffffffffffff8082111561063c5761063c6105fa565b604051601f8301601f19908116603f01168101908282118183101715610664576106646105fa565b8160405283815286602085880101111561067d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156106b057600080fd5b823567ffffffffffffffff808211156106c857600080fd5b6106d486838701610610565b935060208501359150808211156106ea57600080fd5b506106f785828601610610565b9150509250929050565b60006020828403121561071357600080fd5b813567ffffffffffffffff81111561072a57600080fd5b61020384828501610610565b60005b83811015610751578181015183820152602001610739565b83811115610760576000848401525b50505050565b6020815260008251806020840152610785816040850160208701610736565b601f01601f19169190910160400192915050565b6000806000606084860312156107ae57600080fd5b833567ffffffffffffffff8111156107c557600080fd5b6107d186828701610610565b9660208601359650604090950135949350505050565b600083516107f9818460208801610736565b83519083019061080d818360208801610736565b01949350505050565b60006020828403121561082857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561085f5761085f61082f565b500290565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600060ff8316806108a3576108a361087a565b8060ff84160691505092915050565b600082198211156108c5576108c561082f565b500190565b60006000198214156108de576108de61082f565b5060010190565b6000826108f4576108f461087a565b50049056fe608060405234801561001057600080fd5b5060405180604001604052806004815260200163151154d560e21b815250604051806040016040528060038152602001621514d560ea1b815250816003908051906020019061006092919061007c565b50805161007490600490602084019061007c565b505050610150565b82805461008890610115565b90600052602060002090601f0160209004810192826100aa57600085556100f0565b82601f106100c357805160ff19168380011785556100f0565b828001600101855582156100f0579182015b828111156100f05782518255916020019190600101906100d5565b506100fc929150610100565b5090565b5b808211156100fc5760008155600101610101565b600181811c9082168061012957607f821691505b6020821081141561014a57634e487b7160e01b600052602260045260246000fd5b50919050565b6109d18061015f6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806340c10f191161007157806340c10f191461014157806370a082311461015657806395d89b411461017f578063a457c2d714610187578063a9059cbb1461019a578063dd62ed3e146101ad57600080fd5b806306fdde03146100b9578063095ea7b3146100d757806318160ddd146100fa57806323b872dd1461010c578063313ce5671461011f578063395093511461012e575b600080fd5b6100c16101e6565b6040516100ce919061080e565b60405180910390f35b6100ea6100e536600461087f565b610278565b60405190151581526020016100ce565b6002545b6040519081526020016100ce565b6100ea61011a3660046108a9565b61028e565b604051601281526020016100ce565b6100ea61013c36600461087f565b61033d565b61015461014f36600461087f565b610379565b005b6100fe6101643660046108e5565b6001600160a01b031660009081526020819052604090205490565b6100c1610387565b6100ea61019536600461087f565b610396565b6100ea6101a836600461087f565b61042f565b6100fe6101bb366004610907565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101f59061093a565b80601f01602080910402602001604051908101604052809291908181526020018280546102219061093a565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b5050505050905090565b600061028533848461043c565b50600192915050565b600061029b848484610560565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103255760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610332853385840361043c565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610285918590610374908690610975565b61043c565b610383828261072f565b5050565b6060600480546101f59061093a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104185760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161031c565b610425338585840361043c565b5060019392505050565b6000610285338484610560565b6001600160a01b03831661049e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161031c565b6001600160a01b0382166104ff5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161031c565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166105c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161031c565b6001600160a01b0382166106265760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161031c565b6001600160a01b0383166000908152602081905260409020548181101561069e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161031c565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106d5908490610975565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161072191815260200190565b60405180910390a350505050565b6001600160a01b0382166107855760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161031c565b80600260008282546107979190610975565b90915550506001600160a01b038216600090815260208190526040812080548392906107c4908490610975565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b8181101561083b5785810183015185820160400152820161081f565b8181111561084d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461087a57600080fd5b919050565b6000806040838503121561089257600080fd5b61089b83610863565b946020939093013593505050565b6000806000606084860312156108be57600080fd5b6108c784610863565b92506108d560208501610863565b9150604084013590509250925092565b6000602082840312156108f757600080fd5b61090082610863565b9392505050565b6000806040838503121561091a57600080fd5b61092383610863565b915061093160208401610863565b90509250929050565b600181811c9082168061094e57607f821691505b6020821081141561096f57634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561099657634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220f8a77a164df919a17f89be2451ca2aafb4d02ce527c31e1161f8322d048bbaa164736f6c63430008090033a2646970667358221220e2dda089278cf294c15cf314552d7b8ca1d99288d4b171be33dcb419eee76ee564736f6c63430008090033";

type TestLib_BytesUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestLib_BytesUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestLib_BytesUtils__factory extends ContractFactory {
  constructor(...args: TestLib_BytesUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestLib_BytesUtils> {
    return super.deploy(overrides || {}) as Promise<TestLib_BytesUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestLib_BytesUtils {
    return super.attach(address) as TestLib_BytesUtils;
  }
  override connect(signer: Signer): TestLib_BytesUtils__factory {
    return super.connect(signer) as TestLib_BytesUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestLib_BytesUtilsInterface {
    return new utils.Interface(_abi) as TestLib_BytesUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLib_BytesUtils {
    return new Contract(address, _abi, signerOrProvider) as TestLib_BytesUtils;
  }
}
