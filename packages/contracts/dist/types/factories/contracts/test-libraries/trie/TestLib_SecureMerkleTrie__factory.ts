/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestLib_SecureMerkleTrie,
  TestLib_SecureMerkleTrieInterface,
} from "../../../../contracts/test-libraries/trie/TestLib_SecureMerkleTrie";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "get",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_value",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "verifyInclusionProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506115ca806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063120c4a221461003b578063e8e7210014610065575b600080fd5b61004e610049366004611305565b610088565b60405161005c929190611372565b60405180910390f35b6100786100733660046113d1565b6100a3565b604051901515815260200161005c565b600060606100978585856100ba565b91509150935093915050565b60006100b1858585856100e3565b95945050505050565b6000606060006100c986610107565b90506100d6818686610139565b9250925050935093915050565b6000806100ef86610107565b90506100fd81868686610219565b9695505050505050565b6060818051906020012060405160200161012391815260200190565b6040516020818303038152906040529050919050565b60006060600061014885610256565b9050600080600061015a848a89610351565b8151929550909350915015808061016e5750815b6101bf5760405162461bcd60e51b815260206004820152601a60248201527f50726f76696465642070726f6f6620697320696e76616c69642e00000000000060448201526064015b60405180910390fd5b6000816101db5760405180602001604052806000815250610207565b610207866101ea600188611477565b815181106101fa576101fa61148e565b6020026020010151610775565b919b919a509098505050505050505050565b6000806000610229878686610139565b9150915081801561024b57508051602080830191909120875191880191909120145b979650505050505050565b60606000610263836107a5565b90506000815167ffffffffffffffff81111561028157610281611262565b6040519080825280602002602001820160405280156102c657816020015b604080518082019091526060808252602082015281526020019060019003908161029f5790505b50905060005b82518110156103495760006102f98483815181106102ec576102ec61148e565b60200260200101516107d8565b90506040518060400160405280828152602001610315836107a5565b81525083838151811061032a5761032a61148e565b6020026020010181905250508080610341906114a4565b9150506102cc565b509392505050565b600060608180806103618761085f565b90506000869050600080610388604051806040016040528060608152602001606081525090565b60005b8c5181101561074d578c81815181106103a6576103a661148e565b6020026020010151915082846103bc91906114bf565b93506103c96001886114bf565b9650836104215781518051602090910120851461041c5760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e4dedee840d0c2e6d607b1b60448201526064016101b6565b6104de565b8151516020116104835781518051602090910120851461041c5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c6172676520696e7465726e616c2068617368000000000060448201526064016101b6565b84610491836000015161099a565b146104de5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420696e7465726e616c206e6f6465206861736800000000000060448201526064016101b6565b6104ea601060016114bf565b82602001515114156105635785518414156105045761074d565b60008685815181106105185761051861148e565b602001015160f81c60f81b60f81c9050600083602001518260ff16815181106105435761054361148e565b60200260200101519050610556816109c2565b965060019450505061073b565b600282602001515114156106f357600061057c836109ff565b90506000816000815181106105935761059361148e565b016020015160f81c905060006105aa6002836114ed565b6105b590600261150f565b905060006105c6848360ff16610a23565b905060006105d48b8a610a23565b905060006105e28383610a59565b905060ff8516600214806105f9575060ff85166003145b156106335780835114801561060e5750808251145b156106205761061d818b6114bf565b99505b50600160ff1b995061074d945050505050565b60ff85161580610646575060ff85166001145b1561069c57825181146106665750600160ff1b995061074d945050505050565b61068d88602001516001815181106106805761068061148e565b60200260200101516109c2565b9a50975061073b945050505050565b60405162461bcd60e51b815260206004820152602660248201527f52656365697665642061206e6f6465207769746820616e20756e6b6e6f776e206044820152650e0e4caccd2f60d31b60648201526084016101b6565b60405162461bcd60e51b815260206004820152601d60248201527f526563656976656420616e20756e706172736561626c65206e6f64652e00000060448201526064016101b6565b80610745816114a4565b91505061038b565b50600160ff1b8414866107608786610a23565b909e909d50909b509950505050505050505050565b6020810151805160609161079f9161078f90600190611477565b815181106102ec576102ec61148e565b92915050565b60408051808201825260008082526020918201528151808301909252825182528083019082015260609061079f90610ad5565b606060008060006107e885610cc1565b91945092509050600081600181111561080357610803611532565b146108505760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c502062797465732076616c75652e000000000000000060448201526064016101b6565b6100b18560200151848461100b565b60606000825160026108719190611548565b67ffffffffffffffff81111561088957610889611262565b6040519080825280601f01601f1916602001820160405280156108b3576020820181803683370190505b50905060005b83518110156109935760048482815181106108d6576108d661148e565b01602001516001600160f81b031916901c826108f3836002611548565b815181106109035761090361148e565b60200101906001600160f81b031916908160001a905350601084828151811061092e5761092e61148e565b0160200151610940919060f81c6114ed565b60f81b8261094f836002611548565b61095a9060016114bf565b8151811061096a5761096a61148e565b60200101906001600160f81b031916908160001a9053508061098b816114a4565b9150506108b9565b5092915050565b60006020825110156109ae57506020015190565b8180602001905181019061079f9190611567565b600060606020836000015110156109e3576109dc836110ea565b90506109ef565b6109ec836107d8565b90505b6109f88161099a565b9392505050565b606061079f610a1e83602001516000815181106102ec576102ec61148e565b61085f565b606082518210610a42575060408051602081019091526000815261079f565b6109f88383848651610a549190611477565b6110f5565b6000805b808451118015610a6d5750808351115b8015610abe5750828181518110610a8657610a8661148e565b602001015160f81c60f81b6001600160f81b031916848281518110610aad57610aad61148e565b01602001516001600160f81b031916145b156109f85780610acd816114a4565b915050610a5d565b6060600080610ae384610cc1565b91935090915060019050816001811115610aff57610aff611532565b14610b4c5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c50206c6973742076616c75652e00000000000000000060448201526064016101b6565b6040805160208082526104208201909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610b655790505090506000835b8651811015610cb65760208210610bfe5760405162461bcd60e51b815260206004820152602a60248201527f50726f766964656420524c50206c6973742065786365656473206d6178206c6960448201526939ba103632b733ba341760b11b60648201526084016101b6565b600080610c3b6040518060400160405280858c60000151610c1f9190611477565b8152602001858c60200151610c3491906114bf565b9052610cc1565b509150915060405180604001604052808383610c5791906114bf565b8152602001848b60200151610c6c91906114bf565b815250858581518110610c8157610c8161148e565b6020908102919091010152610c976001856114bf565b9350610ca381836114bf565b610cad90846114bf565b92505050610b92565b508152949350505050565b600080600080846000015111610d195760405162461bcd60e51b815260206004820152601860248201527f524c50206974656d2063616e6e6f74206265206e756c6c2e000000000000000060448201526064016101b6565b6020840151805160001a607f8111610d3e576000600160009450945094505050611004565b60b78111610dba576000610d53608083611477565b905080876000015111610da85760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420524c502073686f727420737472696e672e0000000000000060448201526064016101b6565b60019550935060009250611004915050565b60bf8111610ea9576000610dcf60b783611477565b905080876000015111610e245760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420524c50206c6f6e6720737472696e67206c656e6774682e0060448201526064016101b6565b600183015160208290036101000a9004610e3e81836114bf565b885111610e8d5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c50206c6f6e6720737472696e672e000000000000000060448201526064016101b6565b610e988260016114bf565b965094506000935061100492505050565b60f78111610f24576000610ebe60c083611477565b905080876000015111610f135760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c502073686f7274206c6973742e00000000000000000060448201526064016101b6565b600195509350849250611004915050565b6000610f3160f783611477565b905080876000015111610f865760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420524c50206c6f6e67206c697374206c656e6774682e00000060448201526064016101b6565b600183015160208290036101000a9004610fa081836114bf565b885111610fe85760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b210292628103637b733903634b9ba1760511b60448201526064016101b6565b610ff38260016114bf565b965094506001935061100492505050565b9193909250565b606060008267ffffffffffffffff81111561102857611028611262565b6040519080825280601f01601f191660200182016040528015611052576020820181803683370190505b5090508051600014156110665790506109f8565b600061107285876114bf565b90506020820160005b611086602087611580565b8110156110bd578251825261109c6020846114bf565b92506110a96020836114bf565b9150806110b5816114a4565b91505061107b565b5060006001602087066020036101000a039050808251168119845116178252839450505050509392505050565b606061079f8261124c565b60608161110381601f6114bf565b10156111425760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016101b6565b8261114d83826114bf565b101561118c5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016101b6565b61119682846114bf565b845110156111da5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016101b6565b6060821580156111f95760405191506000825260208201604052611243565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561123257805183526020928301920161121a565b5050858452601f01601f1916604052505b50949350505050565b606061079f82602001516000846000015161100b565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261128957600080fd5b813567ffffffffffffffff808211156112a4576112a4611262565b604051601f8301601f19908116603f011681019082821181831017156112cc576112cc611262565b816040528381528660208588010111156112e557600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561131a57600080fd5b833567ffffffffffffffff8082111561133257600080fd5b61133e87838801611278565b9450602086013591508082111561135457600080fd5b5061136186828701611278565b925050604084013590509250925092565b821515815260006020604081840152835180604085015260005b818110156113a85785810183015185820160600152820161138c565b818111156113ba576000606083870101525b50601f01601f191692909201606001949350505050565b600080600080608085870312156113e757600080fd5b843567ffffffffffffffff808211156113ff57600080fd5b61140b88838901611278565b9550602087013591508082111561142157600080fd5b61142d88838901611278565b9450604087013591508082111561144357600080fd5b5061145087828801611278565b949793965093946060013593505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561148957611489611461565b500390565b634e487b7160e01b600052603260045260246000fd5b60006000198214156114b8576114b8611461565b5060010190565b600082198211156114d2576114d2611461565b500190565b634e487b7160e01b600052601260045260246000fd5b600060ff831680611500576115006114d7565b8060ff84160691505092915050565b600060ff821660ff84168082101561152957611529611461565b90039392505050565b634e487b7160e01b600052602160045260246000fd5b600081600019048311821515161561156257611562611461565b500290565b60006020828403121561157957600080fd5b5051919050565b60008261158f5761158f6114d7565b50049056fea2646970667358221220fdbe6eccacba3ea79e33780ee127816faf43217c2ab8e5c2205e66ee3f57685e64736f6c63430008090033";

type TestLib_SecureMerkleTrieConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestLib_SecureMerkleTrieConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestLib_SecureMerkleTrie__factory extends ContractFactory {
  constructor(...args: TestLib_SecureMerkleTrieConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestLib_SecureMerkleTrie> {
    return super.deploy(overrides || {}) as Promise<TestLib_SecureMerkleTrie>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestLib_SecureMerkleTrie {
    return super.attach(address) as TestLib_SecureMerkleTrie;
  }
  override connect(signer: Signer): TestLib_SecureMerkleTrie__factory {
    return super.connect(signer) as TestLib_SecureMerkleTrie__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestLib_SecureMerkleTrieInterface {
    return new utils.Interface(_abi) as TestLib_SecureMerkleTrieInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLib_SecureMerkleTrie {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestLib_SecureMerkleTrie;
  }
}
