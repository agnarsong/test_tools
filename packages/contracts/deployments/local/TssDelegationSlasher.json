{
  "address": "0xdf3BD218A936A92be5e43592143ecc7a33cef514",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDelegationManager",
          "name": "_delegationManager",
          "type": "address"
        },
        {
          "internalType": "contract IDelegation",
          "name": "_delegation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previouslySlashedAddress",
          "type": "address"
        }
      ],
      "name": "FrozenStatusReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAdded",
          "type": "address"
        }
      ],
      "name": "GloballyPermissionedContractAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractRemoved",
          "type": "address"
        }
      ],
      "name": "GloballyPermissionedContractRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "slashedOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "slashingContract",
          "type": "address"
        }
      ],
      "name": "OperatorSlashed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "OptedIntoSlashing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "unbondedAfter",
          "type": "uint32"
        }
      ],
      "name": "SlashingAbilityRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "contracts",
          "type": "address[]"
        }
      ],
      "name": "addGloballyPermissionedContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "allowToSlash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bondedUntil",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toBeSlashed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "slashingContract",
          "type": "address"
        }
      ],
      "name": "canSlash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegation",
      "outputs": [
        {
          "internalType": "contract IDelegation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toBeFrozen",
          "type": "address"
        }
      ],
      "name": "freezeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "globallyPermissionedContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investmentManager",
      "outputs": [
        {
          "internalType": "contract IDelegationManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "isFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "contracts",
          "type": "address[]"
        }
      ],
      "name": "removeGloballyPermissionedContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "frozenAddresses",
          "type": "address[]"
        }
      ],
      "name": "resetFrozenStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "unbondedAfter",
          "type": "uint32"
        }
      ],
      "name": "revokeSlashingAbility",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x818befe8f5f9c10a92603ec948f6877e57b9cd285da6ce12c5a942d90ca91a84",
  "receipt": {
    "to": null,
    "from": "0xd5DeB9917eFbc36259164EcB89Ecf331eb663426",
    "contractAddress": "0xdf3BD218A936A92be5e43592143ecc7a33cef514",
    "transactionIndex": 0,
    "gasUsed": "843608",
    "logsBloom": "0x
    "blockHash": "0x948d634a5f509bbb8c4afe3ea82cbf413a7eaed7d6563bc4c0e12b739f3afc54",
    "transactionHash": "0x818befe8f5f9c10a92603ec948f6877e57b9cd285da6ce12c5a942d90ca91a84",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 27,
        "transactionHash": "0x818befe8f5f9c10a92603ec948f6877e57b9cd285da6ce12c5a942d90ca91a84",
        "address": "0xdf3BD218A936A92be5e43592143ecc7a33cef514",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x948d634a5f509bbb8c4afe3ea82cbf413a7eaed7d6563bc4c0e12b739f3afc54"
      }
    ],
    "blockNumber": 27,
    "cumulativeGasUsed": "843608",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD007896d9E3e4514a1f1216A91d33a72e15bf5C0",
    "0xe6cd9e7b620964bECd42c7Ad41e56724f515E284"
  ],
  "numDeployments": 1,
  "solcInputHash": "fe99b601f5497e13bda09b4a1462ee32",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDelegationManager\",\"name\":\"_delegationManager\",\"type\":\"address\"},{\"internalType\":\"contract IDelegation\",\"name\":\"_delegation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previouslySlashedAddress\",\"type\":\"address\"}],\"name\":\"FrozenStatusReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAdded\",\"type\":\"address\"}],\"name\":\"GloballyPermissionedContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractRemoved\",\"type\":\"address\"}],\"name\":\"GloballyPermissionedContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"slashedOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"slashingContract\",\"type\":\"address\"}],\"name\":\"OperatorSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"OptedIntoSlashing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"unbondedAfter\",\"type\":\"uint32\"}],\"name\":\"SlashingAbilityRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"addGloballyPermissionedContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"allowToSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondedUntil\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBeSlashed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slashingContract\",\"type\":\"address\"}],\"name\":\"canSlash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegation\",\"outputs\":[{\"internalType\":\"contract IDelegation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBeFrozen\",\"type\":\"address\"}],\"name\":\"freezeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"globallyPermissionedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investmentManager\",\"outputs\":[{\"internalType\":\"contract IDelegationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"removeGloballyPermissionedContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"frozenAddresses\",\"type\":\"address[]\"}],\"name\":\"resetFrozenStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"unbondedAfter\",\"type\":\"uint32\"}],\"name\":\"revokeSlashingAbility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addGloballyPermissionedContracts(address[])\":{\"details\":\"Callable only by the contract owner (i.e. governance).\"},\"allowToSlash(address)\":{\"details\":\"Typically, this function must be called prior to registering for a middleware.\"},\"freezeOperator(address)\":{\"details\":\"Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `allowToSlash`.\",\"params\":{\"toBeFrozen\":\"The operator to be frozen.\"}},\"isFrozen(address)\":{\"returns\":{\"_0\":\"Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated to an operator who has their status set to frozen. Otherwise returns 'false'.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeGloballyPermissionedContracts(address[])\":{\"details\":\"Callable only by the contract owner (i.e. governance).\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"resetFrozenStatus(address[])\":{\"details\":\"Callable only by the contract owner (i.e. governance).\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"The primary 'slashing' contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGloballyPermissionedContracts(address[])\":{\"notice\":\"Used to give global slashing permission to `contracts`.\"},\"allowToSlash(address)\":{\"notice\":\"Gives the `contractAddress` permission to slash the funds of the caller.\"},\"bondedUntil(address,address)\":{\"notice\":\"Returns the UTC timestamp until which `slashingContract` is allowed to slash the `operator`.\"},\"canSlash(address,address)\":{\"notice\":\"Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\"},\"delegation()\":{\"notice\":\"The Delegation contract\"},\"freezeOperator(address)\":{\"notice\":\"Used for 'slashing' a certain operator.\"},\"investmentManager()\":{\"notice\":\"The central InvestmentManager contract\"},\"isFrozen(address)\":{\"notice\":\"Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to slashing of their funds, and cannot cannot deposit or withdraw from the investmentManager until the slashing process is completed and the staker's status is reset (to 'unfrozen').\"},\"removeGloballyPermissionedContracts(address[])\":{\"notice\":\"Used to revoke global slashing permission from `contracts`.\"},\"resetFrozenStatus(address[])\":{\"notice\":\"Removes the 'frozen' status from each of the `frozenAddresses`\"},\"revokeSlashingAbility(address,uint32)\":{\"notice\":\"Called by a contract to revoke its ability to slash `operator`, once `unbondedAfter` is reached.\"}},\"notice\":\"This contract specifies details on slashing. The functionalities are: - adding contracts who have permission to perform slashing, - revoking permission for slashing from specified contracts, - calling investManager to do actual slashing.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/tss/delegation/TssDelegationSlasher.sol\":\"TssDelegationSlasher\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/L1/delegation/DelegationSlasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IDelegationSlasher.sol\\\";\\nimport \\\"./interfaces/IDelegation.sol\\\";\\nimport \\\"./interfaces/IDelegationManager.sol\\\";\\n\\n/**\\n * @title The primary 'slashing' contract.\\n * @notice This contract specifies details on slashing. The functionalities are:\\n * - adding contracts who have permission to perform slashing,\\n * - revoking permission for slashing from specified contracts,\\n * - calling investManager to do actual slashing.\\n */\\nabstract contract DelegationSlasher is Initializable, OwnableUpgradeable, PausableUpgradeable, IDelegationSlasher {\\n    // ,DSTest\\n    /// @notice The central InvestmentManager contract\\n    IDelegationManager public immutable investmentManager;\\n    /// @notice The Delegation contract\\n    IDelegation public immutable delegation;\\n    // contract address => whether or not the contract is allowed to slash any staker (or operator)\\n    mapping(address => bool) public globallyPermissionedContracts;\\n    // user => contract => the time before which the contract is allowed to slash the user\\n    mapping(address => mapping(address => uint32)) public bondedUntil;\\n    // staker => if their funds are 'frozen' and potentially subject to slashing or not\\n    mapping(address => bool) internal frozenStatus;\\n\\n    uint32 internal constant MAX_BONDED_UNTIL = type(uint32).max;\\n\\n    event GloballyPermissionedContractAdded(address indexed contractAdded);\\n    event GloballyPermissionedContractRemoved(address indexed contractRemoved);\\n    event OptedIntoSlashing(address indexed operator, address indexed contractAddress);\\n    event SlashingAbilityRevoked(address indexed operator, address indexed contractAddress, uint32 unbondedAfter);\\n    event OperatorSlashed(address indexed slashedOperator, address indexed slashingContract);\\n    event FrozenStatusReset(address indexed previouslySlashedAddress);\\n\\n    constructor(IDelegationManager _investmentManager, IDelegation _delegation) {\\n        investmentManager = _investmentManager;\\n        delegation = _delegation;\\n        _disableInitializers();\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n    function initialize(\\n        address initialOwner\\n    ) external initializer {\\n        _transferOwnership(initialOwner);\\n        // add InvestmentManager & Delegation to list of permissioned contracts\\n        _addGloballyPermissionedContract(address(investmentManager));\\n        _addGloballyPermissionedContract(address(delegation));\\n    }\\n\\n    /**\\n     * @notice Gives the `contractAddress` permission to slash the funds of the caller.\\n     * @dev Typically, this function must be called prior to registering for a middleware.\\n     */\\n    function allowToSlash(address contractAddress) external {\\n        _optIntoSlashing(msg.sender, contractAddress);\\n    }\\n\\n    /*\\n     TODO: we still need to figure out how/when to appropriately call this function\\n     perhaps a registry can safely call this function after an operator has been deregistered for a very safe amount of time (like a month)\\n    */\\n    /// @notice Called by a contract to revoke its ability to slash `operator`, once `unbondedAfter` is reached.\\n    function revokeSlashingAbility(address operator, uint32 unbondedAfter) external {\\n        _revokeSlashingAbility(operator, msg.sender, unbondedAfter);\\n    }\\n\\n    /**\\n     * @notice Used for 'slashing' a certain operator.\\n     * @param toBeFrozen The operator to be frozen.\\n     * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\\n     * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `allowToSlash`.\\n     */\\n    function freezeOperator(address toBeFrozen) external whenNotPaused {\\n        require(\\n            canSlash(toBeFrozen, msg.sender),\\n            \\\"Slasher.freezeOperator: msg.sender does not have permission to slash this operator\\\"\\n        );\\n        _freezeOperator(toBeFrozen, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Used to give global slashing permission to `contracts`.\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function addGloballyPermissionedContracts(address[] calldata contracts) external onlyOwner {\\n        for (uint256 i = 0; i < contracts.length;) {\\n            _addGloballyPermissionedContract(contracts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Used to revoke global slashing permission from `contracts`.\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function removeGloballyPermissionedContracts(address[] calldata contracts) external onlyOwner {\\n        for (uint256 i = 0; i < contracts.length;) {\\n            _removeGloballyPermissionedContract(contracts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes the 'frozen' status from each of the `frozenAddresses`\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function resetFrozenStatus(address[] calldata frozenAddresses) external onlyOwner {\\n        for (uint256 i = 0; i < frozenAddresses.length;) {\\n            _resetFrozenStatus(frozenAddresses[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n    function _optIntoSlashing(address operator, address contractAddress) internal {\\n        //allow the contract to slash anytime before a time VERY far in the future\\n        bondedUntil[operator][contractAddress] = MAX_BONDED_UNTIL;\\n        emit OptedIntoSlashing(operator, contractAddress);\\n    }\\n\\n    function _revokeSlashingAbility(address operator, address contractAddress, uint32 unbondedAfter) internal {\\n        if (bondedUntil[operator][contractAddress] == MAX_BONDED_UNTIL) {\\n            //contractAddress can now only slash operator before unbondedAfter\\n            bondedUntil[operator][contractAddress] = unbondedAfter;\\n            emit SlashingAbilityRevoked(operator, contractAddress, unbondedAfter);\\n        }\\n    }\\n\\n    function _addGloballyPermissionedContract(address contractToAdd) internal {\\n        if (!globallyPermissionedContracts[contractToAdd]) {\\n            globallyPermissionedContracts[contractToAdd] = true;\\n            emit GloballyPermissionedContractAdded(contractToAdd);\\n        }\\n    }\\n\\n    function _removeGloballyPermissionedContract(address contractToRemove) internal {\\n        if (globallyPermissionedContracts[contractToRemove]) {\\n            globallyPermissionedContracts[contractToRemove] = false;\\n            emit GloballyPermissionedContractRemoved(contractToRemove);\\n        }\\n    }\\n\\n    function _freezeOperator(address toBeFrozen, address slashingContract) internal {\\n        if (!frozenStatus[toBeFrozen]) {\\n            frozenStatus[toBeFrozen] = true;\\n            emit OperatorSlashed(toBeFrozen, slashingContract);\\n        }\\n    }\\n\\n    function _resetFrozenStatus(address previouslySlashedAddress) internal {\\n        if (frozenStatus[previouslySlashedAddress]) {\\n            frozenStatus[previouslySlashedAddress] = false;\\n            emit FrozenStatusReset(previouslySlashedAddress);\\n        }\\n    }\\n\\n    // VIEW FUNCTIONS\\n    /**\\n     * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\\n     * slashing of their funds, and cannot cannot deposit or withdraw from the investmentManager until the slashing process is completed\\n     * and the staker's status is reset (to 'unfrozen').\\n     * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\\n     * to an operator who has their status set to frozen. Otherwise returns 'false'.\\n     */\\n    function isFrozen(address staker) external view returns (bool) {\\n        if (frozenStatus[staker]) {\\n            return true;\\n        } else if (delegation.isDelegated(staker)) {\\n            address operatorAddress = delegation.delegatedTo(staker);\\n            return (frozenStatus[operatorAddress]);\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\\n    function canSlash(address toBeSlashed, address slashingContract) public view returns (bool) {\\n        if (globallyPermissionedContracts[slashingContract]) {\\n            return true;\\n        } else if (block.timestamp < bondedUntil[toBeSlashed][slashingContract]) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb845bf8a425b107cfbd0b0e769d660dbde0f22f2ac421985663aacf78d2c5aac\",\"license\":\"MIT\"},\"contracts/L1/delegation/interfaces/IDelegation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IDelegationCallback.sol\\\";\\n\\n/**\\n * @title Interface for the primary delegation contract.\\n * @notice See the `Delegation` contract itself for implementation details.\\n */\\ninterface IDelegation {\\n    enum DelegationStatus {\\n        UNDELEGATED,\\n        DELEGATED\\n    }\\n\\n    /**\\n     * @notice This will be called by an operator to register itself as an operator that stakers can choose to delegate to.\\n     * @param dt is the `DelegationTerms` contract that the operator has for those who delegate to them.\\n     * @dev An operator can set `dt` equal to their own address (or another EOA address), in the event that they want to split payments\\n     * in a more 'trustful' manner.\\n     * @dev In the present design, once set, there is no way for an operator to ever modify the address of their DelegationTerms contract.\\n     */\\n    function registerAsOperator(IDelegationCallback dt) external;\\n\\n    /**\\n     *  @notice This will be called by a staker to delegate its assets to some operator.\\n     *  @param operator is the operator to whom staker (msg.sender) is delegating its assets\\n     */\\n    function delegateTo(address operator) external;\\n\\n    /**\\n     * @notice Delegates from `staker` to `operator`.\\n     * @dev requires that r, vs are a valid ECSDA signature from `staker` indicating their intention for this action\\n     */\\n    function delegateToSignature(address staker, address operator, uint256 expiry, bytes32 r, bytes32 vs) external;\\n\\n    /**\\n     * @notice Undelegates `staker` from the operator who they are delegated to.\\n     * @notice Callable only by the InvestmentManager\\n     * @dev Should only ever be called in the event that the `staker` has no active deposits.\\n     */\\n    function undelegate(address staker) external;\\n\\n    /// @notice returns the address of the operator that `staker` is delegated to.\\n    function delegatedTo(address staker) external view returns (address);\\n\\n    /// @notice returns the delegationCallback of the `operator`, which may mediate their interactions with stakers who delegate to them.\\n    function delegationCallback(address operator) external view returns (IDelegationCallback);\\n\\n    /// @notice returns the total number of shares in `DelegationShare` that are delegated to `operator`.\\n    function operatorShares(address operator, IDelegationShare delegationShare) external view returns (uint256);\\n\\n    /// @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n    function isDelegated(address staker) external view returns (bool);\\n\\n    /// @notice Returns 'true' if `staker` is *not* actively delegated, and 'false' otherwise.\\n    function isNotDelegated(address staker) external returns (bool);\\n\\n    /// @notice Returns if an operator can be delegated to, i.e. it has called `registerAsOperator`.\\n    function isOperator(address operator) external view returns (bool);\\n\\n    /**\\n     * @notice Increases the `staker`'s delegated shares in `delegationShare` by `shares`, typically called when the staker has further deposits.\\n     * @dev Callable only by the DelegationManager\\n     */\\n    function increaseDelegatedShares(address staker, IDelegationShare delegationShare, uint256 shares) external;\\n\\n    /**\\n     * @notice Decreases the `staker`'s delegated shares in `delegationShare` by `shares, typically called when the staker withdraws\\n     * @dev Callable only by the DelegationManager\\n     */\\n    function decreaseDelegatedShares(address staker, IDelegationShare delegationShare, uint256 shares) external;\\n\\n    /// @notice Version of `decreaseDelegatedShares` that accepts an array of inputs.\\n    function decreaseDelegatedShares(\\n        address staker,\\n        IDelegationShare[] calldata delegationShares,\\n        uint256[] calldata shares\\n    ) external;\\n}\\n\",\"keccak256\":\"0x74a6e95e0fceefae2e95a4da46889c392dbad8ced9527f56654ede584f5798c3\",\"license\":\"MIT\"},\"contracts/L1/delegation/interfaces/IDelegationCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IDelegationShare.sol\\\";\\n\\n/**\\n * @title Abstract interface for a contract that helps structure the delegation relationship.\\n * @notice The gas budget provided to this contract in calls from contracts is limited.\\n */\\n//TODO: discuss if we can structure the inputs of these functions better\\ninterface IDelegationCallback {\\n    function payForService(IERC20 token, uint256 amount) external payable;\\n\\n    function onDelegationReceived(\\n        address delegator,\\n        address operator,\\n        IDelegationShare[] memory delegationShares,\\n        uint256[] memory investorShares\\n    ) external;\\n\\n    function onDelegationWithdrawn(\\n        address delegator,\\n        address operator,\\n        IDelegationShare[] memory delegationShares,\\n        uint256[] memory investorShares\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7eb42fdfd9e9a2cddfcd5910d9e7cee042935f8c8918cc53580b9a3033695236\",\"license\":\"MIT\"},\"contracts/L1/delegation/interfaces/IDelegationManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IDelegationShare.sol\\\";\\nimport \\\"./IDelegationSlasher.sol\\\";\\nimport \\\"./IDelegation.sol\\\";\\n\\n/**\\n * @title Interface for the primary entrypoint for funds.\\n * @author Layr Labs, Inc.\\n * @notice See the `DelegationManager` contract itself for implementation details.\\n */\\ninterface IDelegationManager {\\n    // used for storing details of queued withdrawals\\n    struct WithdrawalStorage {\\n        uint32 initTimestamp;\\n        uint32 unlockTimestamp;\\n        address withdrawer;\\n    }\\n\\n    // packed struct for queued withdrawals\\n    struct WithdrawerAndNonce {\\n        address withdrawer;\\n        uint96 nonce;\\n    }\\n\\n    /**\\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n     * In functions that operate on existing queued withdrawals -- e.g. `startQueuedWithdrawalWaitingPeriod` or `completeQueuedWithdrawal`,\\n     * the data is resubmitted and the hash of the submitted data is computed by `calculateWithdrawalRoot` and checked against the\\n     * stored hash in order to confirm the integrity of the submitted data.\\n     */\\n    struct QueuedWithdrawal {\\n        IDelegationShare[] delegations;\\n        IERC20[] tokens;\\n        uint256[] shares;\\n        address depositor;\\n        WithdrawerAndNonce withdrawerAndNonce;\\n        address delegatedAddress;\\n    }\\n\\n    /**\\n     * @notice Deposits `amount` of `token` into the specified `DelegationShare`, with the resultant shares credited to `depositor`\\n     * @param delegationShare is the specified shares record where investment is to be made,\\n     * @param token is the ERC20 token in which the investment is to be made,\\n     * @param amount is the amount of token to be invested in the delegationShare by the depositor\\n     */\\n    function depositInto(IDelegationShare delegationShare, IERC20 token, uint256 amount)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Returns the current shares of `user` in `delegationShare`\\n    function investorDelegationShares(address user, IDelegationShare delegationShare) external view returns (uint256 shares);\\n\\n    /**\\n     * @notice Get all details on the depositor's investments and corresponding shares\\n     * @return (depositor's delegationShare record, shares in these DelegationShare contract)\\n     */\\n    function getDeposits(address depositor) external view returns (IDelegationShare[] memory, uint256[] memory);\\n\\n    /// @notice Simple getter function that returns `investorDelegations[staker].length`.\\n    function investorDelegationLength(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Called by a staker to queue a withdraw in the given token and shareAmount from each of the respective given strategies.\\n     * @dev Stakers will complete their withdrawal by calling the 'completeQueuedWithdrawal' function.\\n     * User shares are decreased in this function, but the total number of shares in each delegation strategy remains the same.\\n     * The total number of shares is decremented in the 'completeQueuedWithdrawal' function instead, which is where\\n     * the funds are actually sent to the user through use of the delegation strategies' 'withdrawal' function. This ensures\\n     * that the value per share reported by each strategy will remain consistent, and that the shares will continue\\n     * to accrue gains during the enforced WITHDRAWAL_WAITING_PERIOD.\\n     * @param delegationShareIndexes is a list of the indices in `investorDelegationShare[msg.sender]` that correspond to the delegation strategies\\n     * for which `msg.sender` is withdrawing 100% of their shares\\n     * @dev strategies are removed from `delegationShare` by swapping the last entry with the entry to be removed, then\\n     * popping off the last entry in `delegationShares`. The simplest way to calculate the correct `delegationShareIndexes` to input\\n     * is to order the strategies *for which `msg.sender` is withdrawing 100% of their shares* from highest index in\\n     * `delegationShares` to lowest index\\n     */\\n    function queueWithdrawal(\\n        uint256[] calldata delegationShareIndexes,\\n        IDelegationShare[] calldata delegationShares,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata shareAmounts,\\n        WithdrawerAndNonce calldata withdrawerAndNonce,\\n        bool undelegateIfPossible\\n    )\\n        external returns(bytes32);\\n\\n    function startQueuedWithdrawalWaitingPeriod(\\n        bytes32 withdrawalRoot,\\n        uint32 stakeInactiveAfter\\n    ) external;\\n\\n    /**\\n     * @notice Used to complete the specified `queuedWithdrawal`. The function caller must match `queuedWithdrawal.withdrawer`\\n     * @param queuedWithdrawal The QueuedWithdrawal to complete.\\n     * @param receiveAsTokens If true, the shares specified in the queued withdrawal will be withdrawn from the specified delegation strategies themselves\\n     * and sent to the caller, through calls to `queuedWithdrawal.strategies[i].withdraw`. If false, then the shares in the specified delegation strategies\\n     * will simply be transferred to the caller directly.\\n     */\\n    function completeQueuedWithdrawal(\\n        QueuedWithdrawal calldata queuedWithdrawal,\\n        bool receiveAsTokens\\n    )\\n        external;\\n\\n    /**\\n     * @notice Slashes the shares of 'frozen' operator (or a staker delegated to one)\\n     * @param slashedAddress is the frozen address that is having its shares slashes\\n     * @param delegationShareIndexes is a list of the indices in `investorStrats[msg.sender]` that correspond to the strategies\\n     * for which `msg.sender` is withdrawing 100% of their shares\\n     * @param recipient The slashed funds are withdrawn as tokens to this address.\\n     * @dev strategies are removed from `investorStrats` by swapping the last entry with the entry to be removed, then\\n     * popping off the last entry in `investorStrats`. The simplest way to calculate the correct `strategyIndexes` to input\\n     * is to order the strategies *for which `msg.sender` is withdrawing 100% of their shares* from highest index in\\n     * `investorStrats` to lowest index\\n     */\\n    function slashShares(\\n        address slashedAddress,\\n        address recipient,\\n        IDelegationShare[] calldata delegationShares,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata delegationShareIndexes,\\n        uint256[] calldata shareAmounts\\n    )\\n        external;\\n\\n    function slashQueuedWithdrawal(\\n        address recipient,\\n        QueuedWithdrawal calldata queuedWithdrawal\\n    )\\n        external;\\n\\n    /**\\n     * @notice Used to check if a queued withdrawal can be completed. Returns 'true' if the withdrawal can be immediately\\n     * completed, and 'false' otherwise.\\n     * @dev This function will revert if the specified `queuedWithdrawal` does not exist\\n     */\\n    function canCompleteQueuedWithdrawal(\\n        QueuedWithdrawal calldata queuedWithdrawal\\n    )\\n        external\\n        returns (bool);\\n\\n    /// @notice Returns the keccak256 hash of `queuedWithdrawal`.\\n    function calculateWithdrawalRoot(\\n        QueuedWithdrawal memory queuedWithdrawal\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /// @notice Returns the single, central Delegation contract\\n    function delegation() external view returns (IDelegation);\\n\\n    /// @notice Returns the single, central DelegationSlasher contract\\n    function delegationSlasher() external view returns (IDelegationSlasher);\\n}\\n\",\"keccak256\":\"0x04c93ba37c2c333e38fc5315aef7e6f1d052586defe5490e3a54ee428263f2c4\",\"license\":\"UNLICENSED\"},\"contracts/L1/delegation/interfaces/IDelegationShare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Minimal interface for an `IDelegationShares` contract.\\n * @notice Custom `DelegationShares` implementations may expand extensively on this interface.\\n */\\ninterface IDelegationShare {\\n    /**\\n     * @notice Used to deposit tokens into this DelegationShares\\n     * @param token is the ERC20 token being deposited\\n     * @param amount is the amount of token being deposited\\n     * @dev This function is only callable by the delegationManager contract. It is invoked inside of the delegationManager's\\n     * `depositInto` function, and individual share balances are recorded in the delegationManager as well.\\n     * @return newShares is the number of new shares issued at the current exchange ratio.\\n     */\\n    function deposit(address depositor, IERC20 token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Used to withdraw tokens from this DelegationLedger, to the `depositor`'s address\\n     * @param token is the ERC20 token being transferred out\\n     * @param amountShares is the amount of shares being withdrawn\\n     * @dev This function is only callable by the delegationManager contract. It is invoked inside of the delegationManager's\\n     * other functions, and individual share balances are recorded in the delegationManager as well.\\n     */\\n    function withdraw(address depositor, IERC20 token, uint256 amountShares) external;\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function sharesToUnderlying(uint256 amountShares) external returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this ledger.\\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into ledger shares\\n     * @dev Implementation for these functions in particular may vary signifcantly for different ledgers\\n     */\\n    function underlyingToShares(uint256 amountUnderlying) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this ledger. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n     */\\n    function userUnderlying(address user) external returns (uint256);\\n\\n     /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this ledger.\\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @dev Implementation for these functions in particular may vary signifcantly for different ledgers\\n     */\\n    function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this ledger.\\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into ledger shares\\n     * @dev Implementation for these functions in particular may vary signifcantly for different ledgers\\n     */\\n    function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this ledger. In contrast to `userUnderlying`, this function guarantees no state modifications\\n     */\\n    function userUnderlyingView(address user) external view returns (uint256);\\n\\n    /// @notice The underyling token for shares in this DelegationShares\\n    function underlyingToken() external view returns (IERC20);\\n\\n    /// @notice The total number of extant shares in thie InvestmentStrategy\\n    function totalShares() external view returns (uint256);\\n\\n    /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\\n    function explanation() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xafef22ce9d64eadc4a1177a1eca0feaa243aac318fc7b7e9e3de776ca0302701\",\"license\":\"MIT\"},\"contracts/L1/delegation/interfaces/IDelegationSlasher.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Interface for the primary 'slashing' contract for EigenLayr.\\n * @author Layr Labs, Inc.\\n * @notice See the `Slasher` contract itself for implementation details.\\n */\\ninterface IDelegationSlasher {\\n    /**\\n     * @notice Gives the `contractAddress` permission to slash the funds of the caller.\\n     * @dev Typically, this function must be called prior to registering for a middleware.\\n     */\\n    function allowToSlash(address contractAddress) external;\\n\\n    /// @notice Called by a contract to revoke its ability to slash `operator`, once `unbondedAfter` is reached.\\n    function revokeSlashingAbility(address operator, uint32 unbondedAfter) external;\\n\\n    /**\\n     * @notice Used for 'slashing' a certain operator.\\n     * @param toBeFrozen The operator to be frozen.\\n     * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\\n     * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `allowToSlash`.\\n     */\\n    function freezeOperator(address toBeFrozen) external;\\n\\n    /**\\n     * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\\n     * slashing of their funds, and cannot cannot deposit or withdraw from the investmentManager until the slashing process is completed\\n     * and the staker's status is reset (to 'unfrozen').\\n     * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\\n     * to an operator who has their status set to frozen. Otherwise returns 'false'.\\n     */\\n    function isFrozen(address staker) external view returns (bool);\\n\\n    /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\\n    function canSlash(address toBeSlashed, address slashingContract) external view returns (bool);\\n\\n    /// @notice Returns the UTC timestamp until which `slashingContract` is allowed to slash the `operator`.\\n    function bondedUntil(address operator, address slashingContract) external view returns (uint32);\\n\\n    /**\\n     * @notice Removes the 'frozen' status from each of the `frozenAddresses`\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function resetFrozenStatus(address[] calldata frozenAddresses) external;\\n\\n    /**\\n     * @notice Used to give global slashing permission to `contracts`.\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function addGloballyPermissionedContracts(address[] calldata contracts) external;\\n\\n    /**\\n     * @notice Used to revoke global slashing permission from `contracts`.\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function removeGloballyPermissionedContracts(address[] calldata contracts) external;\\n}\\n\",\"keccak256\":\"0x82568e400a4fcd69fdb669db0f6dd194fb6f7a515f6f113535fa58762dc68f6b\",\"license\":\"UNLICENSED\"},\"contracts/L1/tss/delegation/TssDelegationSlasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../delegation/DelegationSlasher.sol\\\";\\n\\n/**\\n * @title The primary 'slashing' contract.\\n * @notice This contract specifies details on slashing. The functionalities are:\\n * - adding contracts who have permission to perform slashing,\\n * - revoking permission for slashing from specified contracts,\\n * - calling investManager to do actual slashing.\\n */\\ncontract TssDelegationSlasher is DelegationSlasher {\\n    constructor(IDelegationManager _delegationManager, IDelegation _delegation)\\n    DelegationSlasher(_delegationManager, _delegation)\\n    {\\n        _disableInitializers();\\n    }\\n}\\n\",\"keccak256\":\"0x6f6aaa6e33f92d0d875565cdd844cb69e0d2c9f205d3bb4ae2cf5b9393a33045\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610f76380380610f7683398101604081905261002f91610136565b6001600160a01b03808316608052811660a052818161004c61005e565b50610057905061005e565b5050610170565b600054610100900460ff16156100ca5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116101561011c576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b038116811461013357600080fd5b50565b6000806040838503121561014957600080fd5b82516101548161011e565b60208401519092506101658161011e565b809150509250929050565b60805160a051610dc56101b16000396000818161026a015281816105370152818161065b01526106fc015260008181610162015261050e0152610dc56000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80639f114f1c116100a2578063df5cf72311610071578063df5cf72314610265578063e58398361461028c578063ec73f8081461029f578063f2fde38b146102b2578063fb3f2922146102c557600080fd5b80639f114f1c14610219578063bcdf8d141461022c578063c4d66de81461023f578063d98128c01461025257600080fd5b8063715018a6116100de578063715018a6146101a7578063755defe4146101af5780637cf72bba146101f55780638da5cb5b1461020857600080fd5b806328648d791461011057806338c8ee64146101485780634b31bb101461015d5780635c975abb1461019c575b600080fd5b61013361011e366004610c31565b60976020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61015b610156366004610c31565b6102d8565b005b6101847f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013f565b60655460ff16610133565b61015b610389565b6101e06101bd366004610c55565b609860209081526000928352604080842090915290825290205463ffffffff1681565b60405163ffffffff909116815260200161013f565b61015b610203366004610c8e565b61039d565b6033546001600160a01b0316610184565b61015b610227366004610c31565b6103ec565b61015b61023a366004610c8e565b6103f6565b61015b61024d366004610c31565b610440565b610133610260366004610c55565b6105a5565b6101847f000000000000000000000000000000000000000000000000000000000000000081565b61013361029a366004610c31565b610613565b61015b6102ad366004610c8e565b6107a2565b61015b6102c0366004610c31565b6107ec565b61015b6102d3366004610d03565b610862565b6102e061086d565b6102ea81336105a5565b61037c5760405162461bcd60e51b815260206004820152605260248201527f536c61736865722e667265657a654f70657261746f723a206d73672e73656e6460448201527f657220646f6573206e6f742068617665207065726d697373696f6e20746f20736064820152713630b9b4103a3434b99037b832b930ba37b960711b608482015260a4015b60405180910390fd5b61038681336108b3565b50565b610391610925565b61039b600061097f565b565b6103a5610925565b60005b818110156103e7576103df8383838181106103c5576103c5610d3a565b90506020020160208101906103da9190610c31565b6109d1565b6001016103a8565b505050565b6103863382610a3b565b6103fe610925565b60005b818110156103e75761043883838381811061041e5761041e610d3a565b90506020020160208101906104339190610c31565b610a9e565b600101610401565b600054610100900460ff16158080156104605750600054600160ff909116105b8061047a5750303b15801561047a575060005460ff166001145b6104dd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610373565b6000805460ff191660011790558015610500576000805461ff0019166101001790555b6105098261097f565b6105327f0000000000000000000000000000000000000000000000000000000000000000610b08565b61055b7f0000000000000000000000000000000000000000000000000000000000000000610b08565b80156105a1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6001600160a01b03811660009081526097602052604081205460ff16156105ce5750600161060d565b6001600160a01b0380841660009081526098602090815260408083209386168352929052205463ffffffff164210156106095750600161060d565b5060005b92915050565b6001600160a01b03811660009081526099602052604081205460ff161561063c57506001919050565b604051633e28391d60e01b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690633e28391d9060240160206040518083038186803b15801561069d57600080fd5b505afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d59190610d50565b1561079a57604051631976849960e21b81526001600160a01b0383811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906365da12649060240160206040518083038186803b15801561074057600080fd5b505afa158015610754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107789190610d72565b6001600160a01b031660009081526099602052604090205460ff169392505050565b506000919050565b6107aa610925565b60005b818110156103e7576107e48383838181106107ca576107ca610d3a565b90506020020160208101906107df9190610c31565b610b08565b6001016107ad565b6107f4610925565b6001600160a01b0381166108595760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610373565b6103868161097f565b6105a1823383610b74565b60655460ff161561039b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610373565b6001600160a01b03821660009081526099602052604090205460ff166105a1576001600160a01b03808316600081815260996020526040808220805460ff1916600117905551928416927ff4acf64f79205932079da891a26db757fc3c07818c0d1b1f9cdab0dcc45941539190a35050565b6033546001600160a01b0316331461039b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610373565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811660009081526099602052604090205460ff1615610386576001600160a01b038116600081815260996020526040808220805460ff19169055517fd4cef0af27800d466fcacd85779857378b85cb61569005ff1464fa6e5ced69d89190a250565b6001600160a01b03808316600081815260986020908152604080832094861680845294909152808220805463ffffffff191663ffffffff179055517fefa9fb38e813d53c15edf501e03852843a3fed691960523391d71a092b3627d89190a35050565b6001600160a01b03811660009081526097602052604090205460ff1615610386576001600160a01b038116600081815260976020526040808220805460ff19169055517f7a536e216e18c96837fc3462941e45c8537eecb729fe74b2c16b3e322e17d0f79190a250565b6001600160a01b03811660009081526097602052604090205460ff16610386576001600160a01b038116600081815260976020526040808220805460ff19166001179055517f255c4db16a16879fcabc9798880abb8d43877ae0c53d36e34d27409e0a6577499190a250565b6001600160a01b0380841660009081526098602090815260408083209386168352929052205463ffffffff90811614156103e7576001600160a01b03838116600081815260986020908152604080832094871680845294825291829020805463ffffffff191663ffffffff871690811790915591519182527f9aa1b1391f35c672ed1f3b7ece632f4513e618366bef7a2f67b7c6bc1f2d2b14910160405180910390a3505050565b6001600160a01b038116811461038657600080fd5b600060208284031215610c4357600080fd5b8135610c4e81610c1c565b9392505050565b60008060408385031215610c6857600080fd5b8235610c7381610c1c565b91506020830135610c8381610c1c565b809150509250929050565b60008060208385031215610ca157600080fd5b823567ffffffffffffffff80821115610cb957600080fd5b818501915085601f830112610ccd57600080fd5b813581811115610cdc57600080fd5b8660208260051b8501011115610cf157600080fd5b60209290920196919550909350505050565b60008060408385031215610d1657600080fd5b8235610d2181610c1c565b9150602083013563ffffffff81168114610c8357600080fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215610d6257600080fd5b81518015158114610c4e57600080fd5b600060208284031215610d8457600080fd5b8151610c4e81610c1c56fea26469706673582212205de67160131229859eb4c4e7370a7d295ef12cebea1c9b0dfefb51dcde9c9d1c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80639f114f1c116100a2578063df5cf72311610071578063df5cf72314610265578063e58398361461028c578063ec73f8081461029f578063f2fde38b146102b2578063fb3f2922146102c557600080fd5b80639f114f1c14610219578063bcdf8d141461022c578063c4d66de81461023f578063d98128c01461025257600080fd5b8063715018a6116100de578063715018a6146101a7578063755defe4146101af5780637cf72bba146101f55780638da5cb5b1461020857600080fd5b806328648d791461011057806338c8ee64146101485780634b31bb101461015d5780635c975abb1461019c575b600080fd5b61013361011e366004610c31565b60976020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61015b610156366004610c31565b6102d8565b005b6101847f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013f565b60655460ff16610133565b61015b610389565b6101e06101bd366004610c55565b609860209081526000928352604080842090915290825290205463ffffffff1681565b60405163ffffffff909116815260200161013f565b61015b610203366004610c8e565b61039d565b6033546001600160a01b0316610184565b61015b610227366004610c31565b6103ec565b61015b61023a366004610c8e565b6103f6565b61015b61024d366004610c31565b610440565b610133610260366004610c55565b6105a5565b6101847f000000000000000000000000000000000000000000000000000000000000000081565b61013361029a366004610c31565b610613565b61015b6102ad366004610c8e565b6107a2565b61015b6102c0366004610c31565b6107ec565b61015b6102d3366004610d03565b610862565b6102e061086d565b6102ea81336105a5565b61037c5760405162461bcd60e51b815260206004820152605260248201527f536c61736865722e667265657a654f70657261746f723a206d73672e73656e6460448201527f657220646f6573206e6f742068617665207065726d697373696f6e20746f20736064820152713630b9b4103a3434b99037b832b930ba37b960711b608482015260a4015b60405180910390fd5b61038681336108b3565b50565b610391610925565b61039b600061097f565b565b6103a5610925565b60005b818110156103e7576103df8383838181106103c5576103c5610d3a565b90506020020160208101906103da9190610c31565b6109d1565b6001016103a8565b505050565b6103863382610a3b565b6103fe610925565b60005b818110156103e75761043883838381811061041e5761041e610d3a565b90506020020160208101906104339190610c31565b610a9e565b600101610401565b600054610100900460ff16158080156104605750600054600160ff909116105b8061047a5750303b15801561047a575060005460ff166001145b6104dd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610373565b6000805460ff191660011790558015610500576000805461ff0019166101001790555b6105098261097f565b6105327f0000000000000000000000000000000000000000000000000000000000000000610b08565b61055b7f0000000000000000000000000000000000000000000000000000000000000000610b08565b80156105a1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6001600160a01b03811660009081526097602052604081205460ff16156105ce5750600161060d565b6001600160a01b0380841660009081526098602090815260408083209386168352929052205463ffffffff164210156106095750600161060d565b5060005b92915050565b6001600160a01b03811660009081526099602052604081205460ff161561063c57506001919050565b604051633e28391d60e01b81526001600160a01b0383811660048301527f00000000000000000000000000000000000000000000000000000000000000001690633e28391d9060240160206040518083038186803b15801561069d57600080fd5b505afa1580156106b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d59190610d50565b1561079a57604051631976849960e21b81526001600160a01b0383811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906365da12649060240160206040518083038186803b15801561074057600080fd5b505afa158015610754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107789190610d72565b6001600160a01b031660009081526099602052604090205460ff169392505050565b506000919050565b6107aa610925565b60005b818110156103e7576107e48383838181106107ca576107ca610d3a565b90506020020160208101906107df9190610c31565b610b08565b6001016107ad565b6107f4610925565b6001600160a01b0381166108595760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610373565b6103868161097f565b6105a1823383610b74565b60655460ff161561039b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610373565b6001600160a01b03821660009081526099602052604090205460ff166105a1576001600160a01b03808316600081815260996020526040808220805460ff1916600117905551928416927ff4acf64f79205932079da891a26db757fc3c07818c0d1b1f9cdab0dcc45941539190a35050565b6033546001600160a01b0316331461039b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610373565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811660009081526099602052604090205460ff1615610386576001600160a01b038116600081815260996020526040808220805460ff19169055517fd4cef0af27800d466fcacd85779857378b85cb61569005ff1464fa6e5ced69d89190a250565b6001600160a01b03808316600081815260986020908152604080832094861680845294909152808220805463ffffffff191663ffffffff179055517fefa9fb38e813d53c15edf501e03852843a3fed691960523391d71a092b3627d89190a35050565b6001600160a01b03811660009081526097602052604090205460ff1615610386576001600160a01b038116600081815260976020526040808220805460ff19169055517f7a536e216e18c96837fc3462941e45c8537eecb729fe74b2c16b3e322e17d0f79190a250565b6001600160a01b03811660009081526097602052604090205460ff16610386576001600160a01b038116600081815260976020526040808220805460ff19166001179055517f255c4db16a16879fcabc9798880abb8d43877ae0c53d36e34d27409e0a6577499190a250565b6001600160a01b0380841660009081526098602090815260408083209386168352929052205463ffffffff90811614156103e7576001600160a01b03838116600081815260986020908152604080832094871680845294825291829020805463ffffffff191663ffffffff871690811790915591519182527f9aa1b1391f35c672ed1f3b7ece632f4513e618366bef7a2f67b7c6bc1f2d2b14910160405180910390a3505050565b6001600160a01b038116811461038657600080fd5b600060208284031215610c4357600080fd5b8135610c4e81610c1c565b9392505050565b60008060408385031215610c6857600080fd5b8235610c7381610c1c565b91506020830135610c8381610c1c565b809150509250929050565b60008060208385031215610ca157600080fd5b823567ffffffffffffffff80821115610cb957600080fd5b818501915085601f830112610ccd57600080fd5b813581811115610cdc57600080fd5b8660208260051b8501011115610cf157600080fd5b60209290920196919550909350505050565b60008060408385031215610d1657600080fd5b8235610d2181610c1c565b9150602083013563ffffffff81168114610c8357600080fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215610d6257600080fd5b81518015158114610c4e57600080fd5b600060208284031215610d8457600080fd5b8151610c4e81610c1c56fea26469706673582212205de67160131229859eb4c4e7370a7d295ef12cebea1c9b0dfefb51dcde9c9d1c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addGloballyPermissionedContracts(address[])": {
        "details": "Callable only by the contract owner (i.e. governance)."
      },
      "allowToSlash(address)": {
        "details": "Typically, this function must be called prior to registering for a middleware."
      },
      "freezeOperator(address)": {
        "details": "Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `allowToSlash`.",
        "params": {
          "toBeFrozen": "The operator to be frozen."
        }
      },
      "isFrozen(address)": {
        "returns": {
          "_0": "Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated to an operator who has their status set to frozen. Otherwise returns 'false'."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeGloballyPermissionedContracts(address[])": {
        "details": "Callable only by the contract owner (i.e. governance)."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "resetFrozenStatus(address[])": {
        "details": "Callable only by the contract owner (i.e. governance)."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "The primary 'slashing' contract.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGloballyPermissionedContracts(address[])": {
        "notice": "Used to give global slashing permission to `contracts`."
      },
      "allowToSlash(address)": {
        "notice": "Gives the `contractAddress` permission to slash the funds of the caller."
      },
      "bondedUntil(address,address)": {
        "notice": "Returns the UTC timestamp until which `slashingContract` is allowed to slash the `operator`."
      },
      "canSlash(address,address)": {
        "notice": "Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`."
      },
      "delegation()": {
        "notice": "The Delegation contract"
      },
      "freezeOperator(address)": {
        "notice": "Used for 'slashing' a certain operator."
      },
      "investmentManager()": {
        "notice": "The central InvestmentManager contract"
      },
      "isFrozen(address)": {
        "notice": "Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to slashing of their funds, and cannot cannot deposit or withdraw from the investmentManager until the slashing process is completed and the staker's status is reset (to 'unfrozen')."
      },
      "removeGloballyPermissionedContracts(address[])": {
        "notice": "Used to revoke global slashing permission from `contracts`."
      },
      "resetFrozenStatus(address[])": {
        "notice": "Removes the 'frozen' status from each of the `frozenAddresses`"
      },
      "revokeSlashingAbility(address,uint32)": {
        "notice": "Called by a contract to revoke its ability to slash `operator`, once `unbondedAfter` is reached."
      }
    },
    "notice": "This contract specifies details on slashing. The functionalities are: - adding contracts who have permission to perform slashing, - revoking permission for slashing from specified contracts, - calling investManager to do actual slashing.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 216,
        "contract": "contracts/L1/tss/delegation/TssDelegationSlasher.sol:TssDelegationSlasher",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 219,
        "contract": "contracts/L1/tss/delegation/TssDelegationSlasher.sol:TssDelegationSlasher",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2492,
        "contract": "contracts/L1/tss/delegation/TssDelegationSlasher.sol:TssDelegationSlasher",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/L1/tss/delegation/TssDelegationSlasher.sol:TssDelegationSlasher",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/L1/tss/delegation/TssDelegationSlasher.sol:TssDelegationSlasher",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 381,
        "contract": "contracts/L1/tss/delegation/TssDelegationSlasher.sol:TssDelegationSlasher",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 486,
        "contract": "contracts/L1/tss/delegation/TssDelegationSlasher.sol:TssDelegationSlasher",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11887,
        "contract": "contracts/L1/tss/delegation/TssDelegationSlasher.sol:TssDelegationSlasher",
        "label": "globallyPermissionedContracts",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11893,
        "contract": "contracts/L1/tss/delegation/TssDelegationSlasher.sol:TssDelegationSlasher",
        "label": "bondedUntil",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint32))"
      },
      {
        "astId": 11897,
        "contract": "contracts/L1/tss/delegation/TssDelegationSlasher.sol:TssDelegationSlasher",
        "label": "frozenStatus",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint32)"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}