{
  "address": "0x7B2a516Ef6016699c918C95dc57b0427e17d1c70",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDelegation",
          "name": "_delegation",
          "type": "address"
        },
        {
          "internalType": "contract IDelegationSlasher",
          "name": "_delegationSlasher",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "withdrawalRoot",
          "type": "bytes32"
        }
      ],
      "name": "WithdrawalCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegatedAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "withdrawalRoot",
          "type": "bytes32"
        }
      ],
      "name": "WithdrawalQueued",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REASONABLE_STAKES_UPDATE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_WAITING_PERIOD",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "toAddAddresses",
          "type": "address[]"
        }
      ],
      "name": "addToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IDelegationShare[]",
              "name": "delegations",
              "type": "address[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "depositor",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "withdrawer",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "nonce",
                  "type": "uint96"
                }
              ],
              "internalType": "struct IDelegationManager.WithdrawerAndNonce",
              "name": "withdrawerAndNonce",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "delegatedAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IDelegationManager.QueuedWithdrawal",
          "name": "queuedWithdrawal",
          "type": "tuple"
        }
      ],
      "name": "calculateWithdrawalRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IDelegationShare[]",
              "name": "delegations",
              "type": "address[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "depositor",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "withdrawer",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "nonce",
                  "type": "uint96"
                }
              ],
              "internalType": "struct IDelegationManager.WithdrawerAndNonce",
              "name": "withdrawerAndNonce",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "delegatedAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IDelegationManager.QueuedWithdrawal",
          "name": "queuedWithdrawal",
          "type": "tuple"
        }
      ],
      "name": "canCompleteQueuedWithdrawal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IDelegationShare[]",
              "name": "delegations",
              "type": "address[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "depositor",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "withdrawer",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "nonce",
                  "type": "uint96"
                }
              ],
              "internalType": "struct IDelegationManager.WithdrawerAndNonce",
              "name": "withdrawerAndNonce",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "delegatedAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IDelegationManager.QueuedWithdrawal",
          "name": "queuedWithdrawal",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "receiveAsTokens",
          "type": "bool"
        }
      ],
      "name": "completeQueuedWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IDelegationShare[]",
              "name": "delegations",
              "type": "address[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "depositor",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "withdrawer",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "nonce",
                  "type": "uint96"
                }
              ],
              "internalType": "struct IDelegationManager.WithdrawerAndNonce",
              "name": "withdrawerAndNonce",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "delegatedAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IDelegationManager.QueuedWithdrawal",
          "name": "queuedWithdrawal",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "receiveAsTokens",
          "type": "bool"
        }
      ],
      "name": "completeQueuedWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegation",
      "outputs": [
        {
          "internalType": "contract IDelegation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegationSlasher",
      "outputs": [
        {
          "internalType": "contract IDelegationSlasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDelegationShare",
          "name": "delegationShare",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "depositInto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDelegationShare",
          "name": "delegationShare",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositInto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "contract IDelegationShare",
          "name": "delegationShare",
          "type": "address"
        }
      ],
      "name": "getDelegationShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "getDeposits",
      "outputs": [
        {
          "internalType": "contract IDelegationShare[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getWithdrawNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingSlashing",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tssGroupManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minStakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "name": "initializeT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "investorDelegationLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IDelegationShare",
          "name": "",
          "type": "address"
        }
      ],
      "name": "investorDelegationShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "investorDelegations",
      "outputs": [
        {
          "internalType": "contract IDelegationShare",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "contract IDelegationShare",
          "name": "delegationShare",
          "type": "address"
        }
      ],
      "name": "isCanOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numWithdrawalsQueued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "delegationIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "contract IDelegationShare[]",
          "name": "delegationShares",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "withdrawer",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "nonce",
              "type": "uint96"
            }
          ],
          "internalType": "struct IDelegationManager.WithdrawerAndNonce",
          "name": "withdrawerAndNonce",
          "type": "tuple"
        }
      ],
      "name": "queueWithdrawal",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "delegationIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "contract IDelegationShare[]",
          "name": "delegationShares",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "withdrawer",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "nonce",
              "type": "uint96"
            }
          ],
          "internalType": "struct IDelegationManager.WithdrawerAndNonce",
          "name": "withdrawerAndNonce",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "undelegateIfPossible",
          "type": "bool"
        }
      ],
      "name": "queueWithdrawal",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "queuedWithdrawals",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "initTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "unlockTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "toRemoveAddresses",
          "type": "address[]"
        }
      ],
      "name": "removeFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setMinStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setStakingSlash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setTssGroupManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IDelegationShare[]",
              "name": "delegations",
              "type": "address[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "depositor",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "withdrawer",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "nonce",
                  "type": "uint96"
                }
              ],
              "internalType": "struct IDelegationManager.WithdrawerAndNonce",
              "name": "withdrawerAndNonce",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "delegatedAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IDelegationManager.QueuedWithdrawal",
          "name": "queuedWithdrawal",
          "type": "tuple"
        }
      ],
      "name": "slashQueuedWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "slashedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "contract IDelegationShare[]",
          "name": "delegationShares",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "delegationIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shareAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "slashShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingSlash",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "withdrawalRoot",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "stakeInactiveAfter",
          "type": "uint32"
        }
      ],
      "name": "startQueuedWithdrawalWaitingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "withdrawalRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "stakeInactiveAfter",
          "type": "uint32"
        }
      ],
      "name": "startQueuedWithdrawalWaitingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tssGroupManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "undelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1487cfd9136eb0a2a5e5f1b0d1c42009cde515e56eb17cb28bb3313afad82f69",
  "receipt": {
    "to": null,
    "from": "0xd5DeB9917eFbc36259164EcB89Ecf331eb663426",
    "contractAddress": "0x7B2a516Ef6016699c918C95dc57b0427e17d1c70",
    "transactionIndex": 0,
    "gasUsed": "4649063",
    "logsBloom": "0x
    "blockHash": "0xcf33b8b286c9758a940be63a27092084633b486b305d8a92b3f22339e4a16a7d",
    "transactionHash": "0x1487cfd9136eb0a2a5e5f1b0d1c42009cde515e56eb17cb28bb3313afad82f69",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26,
        "transactionHash": "0x1487cfd9136eb0a2a5e5f1b0d1c42009cde515e56eb17cb28bb3313afad82f69",
        "address": "0x7B2a516Ef6016699c918C95dc57b0427e17d1c70",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xcf33b8b286c9758a940be63a27092084633b486b305d8a92b3f22339e4a16a7d"
      }
    ],
    "blockNumber": 26,
    "cumulativeGasUsed": "4649063",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe6cd9e7b620964bECd42c7Ad41e56724f515E284",
    "0xE6A251EefaEE70E8645FBAdf21E9B1246e07C374"
  ],
  "numDeployments": 1,
  "solcInputHash": "fe99b601f5497e13bda09b4a1462ee32",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDelegation\",\"name\":\"_delegation\",\"type\":\"address\"},{\"internalType\":\"contract IDelegationSlasher\",\"name\":\"_delegationSlasher\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalQueued\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REASONABLE_STAKES_UPDATE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_WAITING_PERIOD\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toAddAddresses\",\"type\":\"address[]\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IDelegationShare[]\",\"name\":\"delegations\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"}],\"internalType\":\"struct IDelegationManager.WithdrawerAndNonce\",\"name\":\"withdrawerAndNonce\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"delegatedAddress\",\"type\":\"address\"}],\"internalType\":\"struct IDelegationManager.QueuedWithdrawal\",\"name\":\"queuedWithdrawal\",\"type\":\"tuple\"}],\"name\":\"calculateWithdrawalRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IDelegationShare[]\",\"name\":\"delegations\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"}],\"internalType\":\"struct IDelegationManager.WithdrawerAndNonce\",\"name\":\"withdrawerAndNonce\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"delegatedAddress\",\"type\":\"address\"}],\"internalType\":\"struct IDelegationManager.QueuedWithdrawal\",\"name\":\"queuedWithdrawal\",\"type\":\"tuple\"}],\"name\":\"canCompleteQueuedWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IDelegationShare[]\",\"name\":\"delegations\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"}],\"internalType\":\"struct IDelegationManager.WithdrawerAndNonce\",\"name\":\"withdrawerAndNonce\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"delegatedAddress\",\"type\":\"address\"}],\"internalType\":\"struct IDelegationManager.QueuedWithdrawal\",\"name\":\"queuedWithdrawal\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"receiveAsTokens\",\"type\":\"bool\"}],\"name\":\"completeQueuedWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IDelegationShare[]\",\"name\":\"delegations\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"}],\"internalType\":\"struct IDelegationManager.WithdrawerAndNonce\",\"name\":\"withdrawerAndNonce\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"delegatedAddress\",\"type\":\"address\"}],\"internalType\":\"struct IDelegationManager.QueuedWithdrawal\",\"name\":\"queuedWithdrawal\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"receiveAsTokens\",\"type\":\"bool\"}],\"name\":\"completeQueuedWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegation\",\"outputs\":[{\"internalType\":\"contract IDelegation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationSlasher\",\"outputs\":[{\"internalType\":\"contract IDelegationSlasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDelegationShare\",\"name\":\"delegationShare\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"depositInto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDelegationShare\",\"name\":\"delegationShare\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositInto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"contract IDelegationShare\",\"name\":\"delegationShare\",\"type\":\"address\"}],\"name\":\"getDelegationShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"internalType\":\"contract IDelegationShare[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getWithdrawNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingSlashing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tssGroupManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initializeT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"investorDelegationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IDelegationShare\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorDelegationShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorDelegations\",\"outputs\":[{\"internalType\":\"contract IDelegationShare\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"contract IDelegationShare\",\"name\":\"delegationShare\",\"type\":\"address\"}],\"name\":\"isCanOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numWithdrawalsQueued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"delegationIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IDelegationShare[]\",\"name\":\"delegationShares\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"}],\"internalType\":\"struct IDelegationManager.WithdrawerAndNonce\",\"name\":\"withdrawerAndNonce\",\"type\":\"tuple\"}],\"name\":\"queueWithdrawal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"delegationIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IDelegationShare[]\",\"name\":\"delegationShares\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"}],\"internalType\":\"struct IDelegationManager.WithdrawerAndNonce\",\"name\":\"withdrawerAndNonce\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"undelegateIfPossible\",\"type\":\"bool\"}],\"name\":\"queueWithdrawal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queuedWithdrawals\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"initTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unlockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toRemoveAddresses\",\"type\":\"address[]\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStakingSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTssGroupManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IDelegationShare[]\",\"name\":\"delegations\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"}],\"internalType\":\"struct IDelegationManager.WithdrawerAndNonce\",\"name\":\"withdrawerAndNonce\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"delegatedAddress\",\"type\":\"address\"}],\"internalType\":\"struct IDelegationManager.QueuedWithdrawal\",\"name\":\"queuedWithdrawal\",\"type\":\"tuple\"}],\"name\":\"slashQueuedWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"slashedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IDelegationShare[]\",\"name\":\"delegationShares\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"delegationIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shareAmounts\",\"type\":\"uint256[]\"}],\"name\":\"slashShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingSlash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakeInactiveAfter\",\"type\":\"uint32\"}],\"name\":\"startQueuedWithdrawalWaitingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"stakeInactiveAfter\",\"type\":\"uint32\"}],\"name\":\"startQueuedWithdrawalWaitingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tssGroupManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canCompleteQueuedWithdrawal((address[],address[],uint256[],address,(address,uint96),address))\":{\"details\":\"This function will revert if the specified `queuedWithdrawal` does not exist\"},\"completeQueuedWithdrawal((address[],address[],uint256[],address,(address,uint96),address),bool)\":{\"params\":{\"queuedWithdrawal\":\"The QueuedWithdrawal to complete.\",\"receiveAsTokens\":\"If true, the shares specified in the queued withdrawal will be withdrawn from the specified strategies themselves and sent to the caller, through calls to `queuedWithdrawal.delegations[i].withdraw`. If false, then the shares in the specified strategies will simply be transferred to the caller directly.\"}},\"constructor\":{\"params\":{\"_delegation\":\"The delegation contract.\",\"_delegationSlasher\":\"The primary slashing contract.\"}},\"depositInto(address,address,uint256)\":{\"details\":\"The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\",\"params\":{\"amount\":\"is the amount of token to be invested in the delegation contract by the depositor\",\"delegationShare\":\"is the specified delegation contract where investment is to be made,\",\"token\":\"is the denomination in which the investment is to be made,\"}},\"getDeposits(address)\":{\"returns\":{\"_0\":\"(depositor's strategies, shares in these strategies)\"}},\"initialize(address)\":{\"params\":{\"initialOwner\":\"Ownership of this contract is transferred to this address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"queueWithdrawal(uint256[],address[],address[],uint256[],(address,uint96),bool)\":{\"details\":\"Stakers will complete their withdrawal by calling the 'completeQueuedWithdrawal' function. User shares are decreased in this function, but the total number of shares in each delegation contract remains the same. The total number of shares is decremented in the 'completeQueuedWithdrawal' function instead, which is where the funds are actually sent to the user through use of the strategies' 'withdrawal' function. This ensures that the value per share reported by each delegation contract will remain consistent, and that the shares will continue to accrue gains during the enforced WITHDRAWAL_WAITING_PERIOD.strategies are removed from `investorStrats` by swapping the last entry with the entry to be removed, then popping off the last entry in `investorStrats`. The simplest way to calculate the correct `delegationIndexes` to input is to order the strategies *for which `msg.sender` is withdrawing 100% of their shares* from highest index in `investorStrats` to lowest index\",\"params\":{\"delegationIndexes\":\"is a list of the indices in `investorStrats[msg.sender]` that correspond to the strategies for which `msg.sender` is withdrawing 100% of their shares\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"slashQueuedWithdrawal(address,(address[],address[],uint256[],address,(address,uint96),address))\":{\"params\":{\"recipient\":\"The funds in the slashed withdrawal are withdrawn as tokens to this address.\"}},\"slashShares(address,address,address[],address[],uint256[],uint256[])\":{\"details\":\"delegationShares are removed from `investorStrats` by swapping the last entry with the entry to be removed, then popping off the last entry in `investorStrats`. The simplest way to calculate the correct `delegationIndexes` to input is to order the strategies *for which `msg.sender` is withdrawing 100% of their shares* from highest index in `investorStrats` to lowest index\",\"params\":{\"delegationIndexes\":\"is a list of the indices in `investorStrats[msg.sender]` that correspond to the strategies for which `msg.sender` is withdrawing 100% of their shares\",\"recipient\":\"The slashed funds are withdrawn as tokens to this address.\",\"slashedAddress\":\"is the frozen address that is having its shares slashed\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"The primary entry- and exit-point for funds into and out.\",\"version\":1},\"userdoc\":{\"events\":{\"WithdrawalCompleted(address,address,bytes32)\":{\"notice\":\"Emitted when a queued withdrawal is completed\"},\"WithdrawalQueued(address,address,address,bytes32)\":{\"notice\":\"Emitted when a new withdrawal is queued by `depositor`.\"}},\"kind\":\"user\",\"methods\":{\"DEPOSIT_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the deposit struct used by the contract\"},\"DOMAIN_SEPARATOR()\":{\"notice\":\"EIP-712 Domain separator\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"REASONABLE_STAKES_UPDATE_PERIOD()\":{\"notice\":\"When a staker undelegates or an operator deregisters, their stake can still be slashed based on tasks/services created within `REASONABLE_STAKES_UPDATE_PERIOD` of the present moment. In other words, this is the lag between undelegation/deregistration and the staker's/operator's funds no longer being slashable due to misbehavior *on a new task*.\"},\"addToWhitelist(address[])\":{\"notice\":\"Add to whitelist\"},\"calculateWithdrawalRoot((address[],address[],uint256[],address,(address,uint96),address))\":{\"notice\":\"Returns the keccak256 hash of `queuedWithdrawal`.\"},\"canCompleteQueuedWithdrawal((address[],address[],uint256[],address,(address,uint96),address))\":{\"notice\":\"Used to check if a queued withdrawal can be completed. Returns 'true' if the withdrawal can be immediately completed, and 'false' otherwise.\"},\"completeQueuedWithdrawal((address[],address[],uint256[],address,(address,uint96),address),bool)\":{\"notice\":\"Used to complete the specified `queuedWithdrawal`. The function caller must match `queuedWithdrawal.withdrawer`\"},\"delegation()\":{\"notice\":\"Returns the single, central Delegation contract\"},\"delegationSlasher()\":{\"notice\":\"Returns the single, central DelegationSlasher contract\"},\"depositInto(address,address,uint256)\":{\"notice\":\"Deposits `amount` of `token` into the specified `delegationShare`, with the resultant shares credited to `depositor`\"},\"getDeposits(address)\":{\"notice\":\"Get all details on the depositor's investments and corresponding shares\"},\"initialize(address)\":{\"notice\":\"Initializes the investment manager contract. Sets the `pauserRegistry` (currently **not** modifiable after being set), and transfers contract ownership to the specified `initialOwner`.\"},\"investorDelegationLength(address)\":{\"notice\":\"Simple getter function that returns `investorStrats[staker].length`.\"},\"investorDelegationShares(address,address)\":{\"notice\":\"Returns the current shares of `user` in `delegationShare`\"},\"queueWithdrawal(uint256[],address[],address[],uint256[],(address,uint96),bool)\":{\"notice\":\"Called by a staker to queue a withdraw in the given token and shareAmount from each of the respective given strategies.\"},\"removeFromWhitelist(address[])\":{\"notice\":\"Remove from whitelist\"},\"slashQueuedWithdrawal(address,(address[],address[],uint256[],address,(address,uint96),address))\":{\"notice\":\"Slashes an existing queued withdrawal that was created by a 'frozen' operator (or a staker delegated to one)\"},\"slashShares(address,address,address[],address[],uint256[],uint256[])\":{\"notice\":\"Slashes the shares of a 'frozen' operator (or a staker delegated to one)\"},\"undelegate()\":{\"notice\":\"Called by a staker to undelegate entirely. The staker must first withdraw all of their existing deposits (through use of the `queueWithdrawal` function), or else otherwise have never deposited prior to delegating.\"}},\"notice\":\"This contract is for managing investments in different strategies. The main functionalities are: - adding and removing investment strategies that any delegator can invest into - enabling deposit of assets into specified investment delegation(s) - enabling removal of assets from specified investment delegation(s) - recording deposit of ETH into settlement layer - recording deposit for securing - slashing of assets for permissioned strategies\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/tss/delegation/TssDelegationManager.sol\":\"TssDelegationManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/L1/delegation/Delegation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./DelegationStorage.sol\\\";\\nimport \\\"./DelegationSlasher.sol\\\";\\nimport \\\"./WhiteListBase.sol\\\";\\n/**\\n * @title The primary delegation contract.\\n * @notice  This is the contract for delegation. The main functionalities of this contract are\\n * - for enabling any staker to register as a delegate and specify the delegation terms it has agreed to\\n * - for enabling anyone to register as an operator\\n * - for a registered staker to delegate its stake to the operator of its agreed upon delegation terms contract\\n * - for a staker to undelegate its assets\\n * - for anyone to challenge a staker's claim to have fulfilled all its obligation before undelegation\\n */\\nabstract contract Delegation is Initializable, OwnableUpgradeable, PausableUpgradeable, WhiteList, DelegationStorage {\\n    /// @notice Simple permission for functions that are only callable by the InvestmentManager contract.\\n    modifier onlyDelegationManager() {\\n        require(msg.sender == address(delegationManager), \\\"onlyDelegationManager\\\");\\n        _;\\n    }\\n\\n    // INITIALIZING FUNCTIONS\\n    constructor(IDelegationManager _delegationManager)\\n        DelegationStorage(_delegationManager)\\n    {\\n        _disableInitializers();\\n    }\\n\\n    /// @dev Emitted when a low-level call to `delegationTerms.onDelegationReceived` fails, returning `returnData`\\n    event OnDelegationReceivedCallFailure(IDelegationCallback indexed delegationTerms, bytes32 returnData);\\n\\n    /// @dev Emitted when a low-level call to `delegationTerms.onDelegationWithdrawn` fails, returning `returnData`\\n    event OnDelegationWithdrawnCallFailure(IDelegationCallback indexed delegationTerms, bytes32 returnData);\\n\\n    event RegisterOperator(address delegationCallback, address register);\\n\\n    event DelegateTo(address delegatior, address operator);\\n\\n    event DecreaseDelegatedShares(address delegatedShare, address operator, uint256 share);\\n\\n    event IncreaseDelegatedShares(address delegatedShare, address operator, uint256 share);\\n\\n    function initialize(address initialOwner)\\n        external\\n        initializer\\n    {\\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, bytes(\\\"Mantle\\\"), block.chainid, address(this)));\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    // PERMISSION FUNCTIONS\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n    /**\\n     * @notice This will be called by an operator to register itself as an operator that stakers can choose to delegate to.\\n     * @param dt is the `DelegationTerms` contract that the operator has for those who delegate to them.\\n     * @dev An operator can set `dt` equal to their own address (or another EOA address), in the event that they want to split payments\\n     * in a more 'trustful' manner.\\n     * @dev In the present design, once set, there is no way for an operator to ever modify the address of their DelegationTerms contract.\\n     */\\n    function registerAsOperator(IDelegationCallback dt) external whitelistOnly(msg.sender) {\\n        require(\\n            address(delegationCallback[msg.sender]) == address(0),\\n            \\\"Delegation.registerAsOperator: Delegate has already registered\\\"\\n        );\\n        // store the address of the delegation contract that the operator is providing.\\n        delegationCallback[msg.sender] = dt;\\n        _delegate(msg.sender, msg.sender);\\n        emit RegisterOperator(address(dt),msg.sender);\\n    }\\n\\n    /**\\n     *  @notice This will be called by a staker to delegate its assets to some operator.\\n     *  @param operator is the operator to whom staker (msg.sender) is delegating its assets\\n     */\\n    function delegateTo(address operator) external whenNotPaused {\\n        _delegate(msg.sender, operator);\\n    }\\n\\n    /**\\n     * @notice Delegates from `staker` to `operator`.\\n     * @dev requires that r, vs are a valid ECSDA signature from `staker` indicating their intention for this action\\n     */\\n    function delegateToSignature(address staker, address operator, uint256 expiry, bytes32 r, bytes32 vs)\\n        external\\n        whenNotPaused\\n    {\\n        require(expiry == 0 || expiry >= block.timestamp, \\\"delegation signature expired\\\");\\n        // calculate struct hash, then increment `staker`'s nonce\\n        // EIP-712 standard\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, staker, operator, nonces[staker]++, expiry));\\n        bytes32 digestHash = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, structHash));\\n        //check validity of signature\\n\\n        address recoveredAddress = ECDSA.recover(digestHash, r, vs);\\n\\n        require(recoveredAddress == staker, \\\"Delegation.delegateToBySignature: sig not from staker\\\");\\n        _delegate(staker, operator);\\n    }\\n\\n    /**\\n     * @notice Undelegates `staker` from the operator who they are delegated to.\\n     * @notice Callable only by the InvestmentManager\\n     * @dev Should only ever be called in the event that the `staker` has no active deposits.\\n     */\\n    function undelegate(address staker) external onlyDelegationManager {\\n        delegationStatus[staker] = DelegationStatus.UNDELEGATED;\\n        delegatedTo[staker] = address(0);\\n    }\\n\\n    /**\\n     * @notice Increases the `staker`'s delegated shares in `strategy` by `shares, typically called when the staker has further deposits\\n     * @dev Callable only by the InvestmentManager\\n     */\\n    function increaseDelegatedShares(address staker, IDelegationShare delegationShare, uint256 shares)\\n        external\\n        onlyDelegationManager\\n    {\\n        //if the staker is delegated to an operator\\n        if (isDelegated(staker)) {\\n            address operator = delegatedTo[staker];\\n\\n            // add strategy shares to delegate's shares\\n            operatorShares[operator][delegationShare] += shares;\\n\\n            //Calls into operator's delegationTerms contract to update weights of individual staker\\n            IDelegationShare[] memory investorDelegations = new IDelegationShare[](1);\\n            uint256[] memory investorShares = new uint[](1);\\n            investorDelegations[0] = delegationShare;\\n            investorShares[0] = shares;\\n\\n            // call into hook in delegationCallback contract\\n            IDelegationCallback dt = delegationCallback[operator];\\n            _delegationReceivedHook(dt, staker, operator, investorDelegations, investorShares);\\n            emit IncreaseDelegatedShares(address(delegationShare), operator, shares);\\n        }\\n    }\\n\\n    /**\\n     * @notice Decreases the `staker`'s delegated shares in `strategy` by `shares, typically called when the staker withdraws\\n     * @dev Callable only by the InvestmentManager\\n     */\\n    function decreaseDelegatedShares(address staker, IDelegationShare delegationShare, uint256 shares)\\n        external\\n        onlyDelegationManager\\n    {\\n        //if the staker is delegated to an operator\\n        if (isDelegated(staker)) {\\n            address operator = delegatedTo[staker];\\n\\n            // subtract strategy shares from delegate's shares\\n            operatorShares[operator][delegationShare] -= shares;\\n\\n            //Calls into operator's delegationCallback contract to update weights of individual staker\\n            IDelegationShare[] memory investorDelegationShares = new IDelegationShare[](1);\\n            uint256[] memory investorShares = new uint[](1);\\n            investorDelegationShares[0] = delegationShare;\\n            investorShares[0] = shares;\\n\\n            // call into hook in delegationCallback contract\\n            IDelegationCallback dt = delegationCallback[operator];\\n            _delegationWithdrawnHook(dt, staker, operator, investorDelegationShares, investorShares);\\n            emit DecreaseDelegatedShares(address(delegationShare), operator, shares);\\n        }\\n    }\\n\\n    /// @notice Version of `decreaseDelegatedShares` that accepts an array of inputs.\\n    function decreaseDelegatedShares(\\n        address staker,\\n        IDelegationShare[] calldata strategies,\\n        uint256[] calldata shares\\n    )\\n        external\\n        onlyDelegationManager\\n    {\\n        if (isDelegated(staker)) {\\n            address operator = delegatedTo[staker];\\n\\n            // subtract strategy shares from delegate's shares\\n            uint256 stratsLength = strategies.length;\\n            for (uint256 i = 0; i < stratsLength;) {\\n                operatorShares[operator][strategies[i]] -= shares[i];\\n                emit DecreaseDelegatedShares(address(strategies[i]), operator, shares[i]);\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n\\n            // call into hook in delegationCallback contract\\n            IDelegationCallback dt = delegationCallback[operator];\\n            _delegationWithdrawnHook(dt, staker, operator, strategies, shares);\\n        }\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /**\\n     * @notice Makes a low-level call to `dt.onDelegationReceived(staker, strategies, shares)`, ignoring reverts and with a gas budget\\n     * equal to `LOW_LEVEL_GAS_BUDGET` (a constant defined in this contract).\\n     * @dev *If* the low-level call fails, then this function emits the event `OnDelegationReceivedCallFailure(dt, returnData)`, where\\n     * `returnData` is *only the first 32 bytes* returned by the call to `dt`.\\n     */\\n    function _delegationReceivedHook(\\n        IDelegationCallback dt,\\n        address staker,\\n        address operator,\\n        IDelegationShare[] memory delegationShares,\\n        uint256[] memory shares\\n    )\\n        internal\\n    {\\n        /**\\n         * We use low-level call functionality here to ensure that an operator cannot maliciously make this function fail in order to prevent undelegation.\\n         * In particular, in-line assembly is also used to prevent the copying of uncapped return data which is also a potential DoS vector.\\n         */\\n        // format calldata\\n        (bool success, bytes memory returnData) = address(dt).call{gas: LOW_LEVEL_GAS_BUDGET}(\\n            abi.encodeWithSelector(IDelegationCallback.onDelegationReceived.selector, staker, operator, delegationShares, shares)\\n        );\\n\\n        // if the call fails, we emit a special event rather than reverting\\n        if (!success) {\\n            emit OnDelegationReceivedCallFailure(dt, returnData[0]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Makes a low-level call to `dt.onDelegationWithdrawn(staker, strategies, shares)`, ignoring reverts and with a gas budget\\n     * equal to `LOW_LEVEL_GAS_BUDGET` (a constant defined in this contract).\\n     * @dev *If* the low-level call fails, then this function emits the event `OnDelegationReceivedCallFailure(dt, returnData)`, where\\n     * `returnData` is *only the first 32 bytes* returned by the call to `dt`.\\n     */\\n    function _delegationWithdrawnHook(\\n        IDelegationCallback dt,\\n        address staker,\\n        address operator,\\n        IDelegationShare[] memory delegationShares,\\n        uint256[] memory shares\\n    )\\n        internal\\n    {\\n        /**\\n         * We use low-level call functionality here to ensure that an operator cannot maliciously make this function fail in order to prevent undelegation.\\n         * In particular, in-line assembly is also used to prevent the copying of uncapped return data which is also a potential DoS vector.\\n         */\\n\\n        (bool success, bytes memory returnData) = address(dt).call{gas: LOW_LEVEL_GAS_BUDGET}(\\n            abi.encodeWithSelector(IDelegationCallback.onDelegationWithdrawn.selector, staker, operator, delegationShares, shares)\\n        );\\n\\n        // if the call fails, we emit a special event rather than reverting\\n        if (!success) {\\n            emit OnDelegationWithdrawnCallFailure(dt, returnData[0]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function implementing the delegation *from* `staker` *to* `operator`.\\n     * @param staker The address to delegate *from* -- this address is delegating control of its own assets.\\n     * @param operator The address to delegate *to* -- this address is being given power to place the `staker`'s assets at risk on services\\n     * @dev Ensures that the operator has registered as a delegate (`address(dt) != address(0)`), verifies that `staker` is not already\\n     * delegated, and records the new delegation.\\n     */\\n    function _delegate(address staker, address operator) internal {\\n\\n        IDelegationCallback dt = delegationCallback[operator];\\n        require(\\n            address(dt) != address(0), \\\"Delegation._delegate: operator has not yet registered as a delegate\\\"\\n        );\\n        require(isNotDelegated(staker), \\\"Delegation._delegate: staker has existing delegation\\\");\\n\\n        // checks that operator has not been frozen\\n        IDelegationSlasher slasher = delegationManager.delegationSlasher();\\n        require(!slasher.isFrozen(operator), \\\"Delegation._delegate: cannot delegate to a frozen operator\\\");\\n        // record delegation relation between the staker and operator\\n        delegatedTo[staker] = operator;\\n\\n        // record that the staker is delegated\\n        delegationStatus[staker] = DelegationStatus.DELEGATED;\\n        // retrieve list of strategies and their shares from investment manager\\n        (IDelegationShare[] memory delegationShares, uint256[] memory shares) = delegationManager.getDeposits(staker);\\n\\n        // add strategy shares to delegate's shares\\n        uint256 delegationLength = delegationShares.length;\\n        for (uint256 i = 0; i < delegationLength;) {\\n            // update the share amounts for each of the operator's strategies\\n            operatorShares[operator][delegationShares[i]] += shares[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        // call into hook in delegationCallback contract\\n        _delegationReceivedHook(dt, staker, operator, delegationShares, shares);\\n        emit DelegateTo(staker, operator);\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    /// @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n    function isDelegated(address staker) public view returns (bool) {\\n        return (delegationStatus[staker] == DelegationStatus.DELEGATED);\\n    }\\n\\n    /// @notice Returns 'true' if `staker` is *not* actively delegated, and 'false' otherwise.\\n    function isNotDelegated(address staker) public view returns (bool) {\\n        return (delegationStatus[staker] == DelegationStatus.UNDELEGATED);\\n    }\\n\\n    /// @notice Returns if an operator can be delegated to, i.e. it has called `registerAsOperator`.\\n    function isOperator(address operator) external view returns (bool) {\\n        return (address(delegationCallback[operator]) != address(0));\\n    }\\n}\\n\",\"keccak256\":\"0xc4066c4ef2aeb305a90635c4d9cf09603747c14970dfa8eb3486fbd2bea2b7d1\",\"license\":\"MIT\"},\"contracts/L1/delegation/DelegationCallbackBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IDelegationCallback.sol\\\";\\nimport \\\"./interfaces/IDelegation.sol\\\";\\n\\n/**\\n * @title Base implementation of `IInvestmentStrategy` interface, designed to be inherited from by more complex strategies.\\n * @notice Simple, basic, \\\"do-nothing\\\" InvestmentStrategy that holds a single underlying token and returns it on withdrawals.\\n * Implements minimal versions of the IInvestmentStrategy functions, this contract is designed to be inherited by\\n * more complex investment strategies, which can then override its functions as necessary.\\n */\\nabstract contract DelegationCallbackBase is Initializable, PausableUpgradeable, IDelegationCallback {\\n    /// @notice DelegationManager contract\\n    IDelegation public delegation;\\n\\n    /// @notice Simply checks that the `msg.sender` is the `DelegationManager`, which is an address stored immutably at construction.\\n    modifier onlyDelegation() {\\n        require(msg.sender == address(delegation), \\\"DelegationShareBase.onlyDelegationManager\\\");\\n        _;\\n    }\\n\\n    function payForService(IERC20 token, uint256 amount) external payable {}\\n\\n    function onDelegationWithdrawn(\\n        address delegator,\\n        IDelegationShare[] memory investorDelegationShares,\\n        uint256[] memory investorShares\\n    ) external {}\\n\\n    function onDelegationReceived(\\n        address delegator,\\n        IDelegationShare[] memory investorDelegationShares,\\n        uint256[] memory investorShares\\n    ) external {}\\n}\\n\",\"keccak256\":\"0x20990f370cca1dc8f07db8122d9c53d6a263b90c871959f67972037f21d31238\",\"license\":\"MIT\"},\"contracts/L1/delegation/DelegationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IDelegation.sol\\\";\\nimport \\\"./DelegationManagerStorage.sol\\\";\\nimport \\\"./WhiteListBase.sol\\\";\\n/**\\n * @title The primary entry- and exit-point for funds into and out.\\n * @author Layr Labs, Inc.\\n * @notice This contract is for managing investments in different strategies. The main\\n * functionalities are:\\n * - adding and removing investment strategies that any delegator can invest into\\n * - enabling deposit of assets into specified investment delegation(s)\\n * - enabling removal of assets from specified investment delegation(s)\\n * - recording deposit of ETH into settlement layer\\n * - recording deposit for securing\\n * - slashing of assets for permissioned strategies\\n */\\nabstract contract DelegationManager is\\n    Initializable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    DelegationManagerStorage,\\n    WhiteList\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Value to which `initTimestamp` and `unlockTimestamp` to is set to indicate a withdrawal is queued/initialized,\\n     * but has not yet had its waiting period triggered\\n     */\\n    uint32 internal constant QUEUED_WITHDRAWAL_INITIALIZED_VALUE = type(uint32).max;\\n\\n    /**\\n     * @notice Emitted when a new withdrawal is queued by `depositor`.\\n     * @param depositor Is the staker who is withdrawing funds.\\n     * @param withdrawer Is the party specified by `staker` who will be able to complete the queued withdrawal and receive the withdrawn funds.\\n     * @param delegatedAddress Is the party who the `staker` was delegated to at the time of creating the queued withdrawal\\n     * @param withdrawalRoot Is a hash of the input data for the withdrawal.\\n     */\\n    event WithdrawalQueued(\\n        address indexed depositor, address indexed withdrawer, address indexed delegatedAddress, bytes32 withdrawalRoot\\n    );\\n\\n    /// @notice Emitted when a queued withdrawal is completed\\n    event WithdrawalCompleted(address indexed depositor, address indexed withdrawer, bytes32 withdrawalRoot);\\n\\n    modifier onlyNotFrozen(address staker) {\\n        require(\\n            !delegationSlasher.isFrozen(staker),\\n            \\\"DelegationManager.onlyNotFrozen: staker has been frozen and may be subject to slashing\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyFrozen(address staker) {\\n        require(delegationSlasher.isFrozen(staker), \\\"DelegationManager.onlyFrozen: staker has not been frozen\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @param _delegation The delegation contract.\\n     * @param _delegationSlasher The primary slashing contract.\\n     */\\n    constructor(IDelegation _delegation, IDelegationSlasher _delegationSlasher)\\n        DelegationManagerStorage(_delegation, _delegationSlasher)\\n    {\\n        _disableInitializers();\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /**\\n     * @notice Initializes the investment manager contract. Sets the `pauserRegistry` (currently **not** modifiable after being set),\\n     * and transfers contract ownership to the specified `initialOwner`.\\n     * @param initialOwner Ownership of this contract is transferred to this address.\\n     */\\n    function initialize(address initialOwner)\\n        external\\n        initializer\\n    {\\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, bytes(\\\"Mantle\\\"), block.chainid, address(this)));\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @notice Deposits `amount` of `token` into the specified `delegationShare`, with the resultant shares credited to `depositor`\\n     * @param delegationShare is the specified delegation contract where investment is to be made,\\n     * @param token is the denomination in which the investment is to be made,\\n     * @param amount is the amount of token to be invested in the delegation contract by the depositor\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n     */\\n    function depositInto(IDelegationShare delegationShare, IERC20 token, uint256 amount)\\n        external\\n        onlyNotFrozen(msg.sender)\\n        nonReentrant\\n        whitelistOnly(address(delegationShare))\\n        returns (uint256 shares)\\n    {\\n        shares = _depositInto(msg.sender, delegationShare, token, amount);\\n    }\\n\\n    /**\\n     * @notice Called by a staker to undelegate entirely. The staker must first withdraw all of their existing deposits\\n     * (through use of the `queueWithdrawal` function), or else otherwise have never deposited prior to delegating.\\n     */\\n    function undelegate() external {\\n        _undelegate(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Called by a staker to queue a withdraw in the given token and shareAmount from each of the respective given strategies.\\n     * @dev Stakers will complete their withdrawal by calling the 'completeQueuedWithdrawal' function.\\n     * User shares are decreased in this function, but the total number of shares in each delegation contract remains the same.\\n     * The total number of shares is decremented in the 'completeQueuedWithdrawal' function instead, which is where\\n     * the funds are actually sent to the user through use of the strategies' 'withdrawal' function. This ensures\\n     * that the value per share reported by each delegation contract will remain consistent, and that the shares will continue\\n     * to accrue gains during the enforced WITHDRAWAL_WAITING_PERIOD.\\n     * @param delegationIndexes is a list of the indices in `investorStrats[msg.sender]` that correspond to the strategies\\n     * for which `msg.sender` is withdrawing 100% of their shares\\n     * @dev strategies are removed from `investorStrats` by swapping the last entry with the entry to be removed, then\\n     * popping off the last entry in `investorStrats`. The simplest way to calculate the correct `delegationIndexes` to input\\n     * is to order the strategies *for which `msg.sender` is withdrawing 100% of their shares* from highest index in\\n     * `investorStrats` to lowest index\\n     */\\n    function queueWithdrawal(\\n        uint256[] calldata delegationIndexes,\\n        IDelegationShare[] calldata delegationShares,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata shares,\\n        WithdrawerAndNonce calldata withdrawerAndNonce,\\n        bool undelegateIfPossible\\n    )\\n        external\\n        virtual\\n        whenNotPaused\\n        onlyNotFrozen(msg.sender)\\n        nonReentrant\\n        returns (bytes32)\\n    {\\n        require(\\n            withdrawerAndNonce.nonce == numWithdrawalsQueued[msg.sender],\\n            \\\"DelegationManager.queueWithdrawal: provided nonce incorrect\\\"\\n        );\\n        // increment the numWithdrawalsQueued of the sender\\n        unchecked {\\n            ++numWithdrawalsQueued[msg.sender];\\n        }\\n\\n        uint256 delegationIndex;\\n\\n        // modify delegated shares accordingly, if applicable\\n        delegation.decreaseDelegatedShares(msg.sender, delegationShares, shares);\\n\\n        for (uint256 i = 0; i < delegationShares.length;) {\\n            // the internal function will return 'true' in the event the delegation contrat was\\n            // removed from the depositor's array of strategies -- i.e. investorStrats[depositor]\\n            if (_removeShares(msg.sender, delegationIndexes[delegationIndex], delegationShares[i], shares[i])) {\\n                unchecked {\\n                    ++delegationIndex;\\n                }\\n            }\\n\\n            //increment the loop\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // fetch the address that the `msg.sender` is delegated to\\n        address delegatedAddress = delegation.delegatedTo(msg.sender);\\n\\n        // copy arguments into struct and pull delegation info\\n        QueuedWithdrawal memory queuedWithdrawal = QueuedWithdrawal({\\n            delegations: delegationShares,\\n            tokens: tokens,\\n            shares: shares,\\n            depositor: msg.sender,\\n            withdrawerAndNonce: withdrawerAndNonce,\\n            delegatedAddress: delegatedAddress\\n        });\\n\\n        // calculate the withdrawal root\\n        bytes32 withdrawalRoot = calculateWithdrawalRoot(queuedWithdrawal);\\n\\n        //update storage in mapping of queued withdrawals\\n        queuedWithdrawals[withdrawalRoot] = WithdrawalStorage({\\n            /**\\n             * @dev We add `REASONABLE_STAKES_UPDATE_PERIOD` to the current time here to account for the fact that it may take some time for\\n             * the operator's stake to be updated on all the middlewares. New tasks created between now at this 'initTimestamp' may still\\n             * subject the `msg.sender` to slashing!\\n             */\\n            initTimestamp: uint32(block.timestamp + REASONABLE_STAKES_UPDATE_PERIOD),\\n            withdrawer: withdrawerAndNonce.withdrawer,\\n            unlockTimestamp: QUEUED_WITHDRAWAL_INITIALIZED_VALUE\\n        });\\n\\n        // If the `msg.sender` has withdrawn all of their funds in this transaction, then they can choose to also undelegate\\n        /**\\n         * Checking that `investorStrats[msg.sender].length == 0` is not strictly necessary here, but prevents reverting very late in logic,\\n         * in the case that 'undelegate' is set to true but the `msg.sender` still has active deposits.\\n         */\\n        if (undelegateIfPossible && investorDelegations[msg.sender].length == 0) {\\n            _undelegate(msg.sender);\\n        }\\n\\n        emit WithdrawalQueued(msg.sender, withdrawerAndNonce.withdrawer, delegatedAddress, withdrawalRoot);\\n\\n        return withdrawalRoot;\\n    }\\n\\n    /*\\n    *\\n    * @notice The withdrawal flow is:\\n    * - Depositor starts a queued withdrawal, setting the receiver of the withdrawn funds as withdrawer\\n    * - Withdrawer then waits for the queued withdrawal tx to be included in the chain, and then sets the stakeInactiveAfter. This cannot\\n    *   be set when starting the queued withdrawal, as it is there may be transactions the increase the tasks upon which the stake is active\\n    *   that get mined before the withdrawal.\\n    * - The withdrawer completes the queued withdrawal after the stake is inactive or a withdrawal fraud proof period has passed,\\n    *   whichever is longer. They specify whether they would like the withdrawal in shares or in tokens.\\n    */\\n    function startQueuedWithdrawalWaitingPeriod(bytes32 withdrawalRoot, uint32 stakeInactiveAfter) external virtual {\\n        require(\\n            queuedWithdrawals[withdrawalRoot].unlockTimestamp == QUEUED_WITHDRAWAL_INITIALIZED_VALUE,\\n            \\\"DelegationManager.startQueuedWithdrawalWaitingPeriod: Withdrawal stake inactive claim has already been made\\\"\\n        );\\n        require(\\n            queuedWithdrawals[withdrawalRoot].withdrawer == msg.sender,\\n            \\\"DelegationManager.startQueuedWithdrawalWaitingPeriod: Sender is not the withdrawer\\\"\\n        );\\n        require(\\n            block.timestamp > queuedWithdrawals[withdrawalRoot].initTimestamp,\\n            \\\"DelegationManager.startQueuedWithdrawalWaitingPeriod: Stake may still be subject to slashing based on new tasks. Wait to set stakeInactiveAfter.\\\"\\n        );\\n        //they can only unlock after a withdrawal waiting period or after they are claiming their stake is inactive\\n        queuedWithdrawals[withdrawalRoot].unlockTimestamp = max((uint32(block.timestamp) + WITHDRAWAL_WAITING_PERIOD), stakeInactiveAfter);\\n    }\\n\\n    /**\\n     * @notice Used to complete the specified `queuedWithdrawal`. The function caller must match `queuedWithdrawal.withdrawer`\\n     * @param queuedWithdrawal The QueuedWithdrawal to complete.\\n     * @param receiveAsTokens If true, the shares specified in the queued withdrawal will be withdrawn from the specified strategies themselves\\n     * and sent to the caller, through calls to `queuedWithdrawal.delegations[i].withdraw`. If false, then the shares in the specified strategies\\n     * will simply be transferred to the caller directly.\\n     */\\n    function completeQueuedWithdrawal(QueuedWithdrawal calldata queuedWithdrawal, bool receiveAsTokens)\\n        external\\n        whenNotPaused\\n        // check that the address that the staker *was delegated to* \\u2013 at the time that they queued the withdrawal \\u2013 is not frozen\\n        onlyNotFrozen(queuedWithdrawal.delegatedAddress)\\n        nonReentrant\\n    {\\n        // find the withdrawalRoot\\n        bytes32 withdrawalRoot = calculateWithdrawalRoot(queuedWithdrawal);\\n        // copy storage to memory\\n        WithdrawalStorage memory withdrawalStorageCopy = queuedWithdrawals[withdrawalRoot];\\n\\n        // verify that the queued withdrawal actually exists\\n        require(\\n            withdrawalStorageCopy.unlockTimestamp != 0,\\n            \\\"DelegationManager.completeQueuedWithdrawal: withdrawal does not exist\\\"\\n        );\\n\\n        require(\\n            uint32(block.timestamp) >= withdrawalStorageCopy.unlockTimestamp\\n                || (queuedWithdrawal.delegatedAddress == address(0)),\\n            \\\"DelegationManager.completeQueuedWithdrawal: withdrawal waiting period has not yet passed and depositor was delegated when withdrawal initiated\\\"\\n        );\\n\\n        // TODO: add testing coverage for this\\n        require(\\n            msg.sender == queuedWithdrawal.withdrawerAndNonce.withdrawer,\\n            \\\"DelegationManager.completeQueuedWithdrawal: only specified withdrawer can complete a queued withdrawal\\\"\\n        );\\n\\n        // reset the storage slot in mapping of queued withdrawals\\n        delete queuedWithdrawals[withdrawalRoot];\\n\\n        // store length for gas savings\\n        uint256 strategiesLength = queuedWithdrawal.delegations.length;\\n        // if the withdrawer has flagged to receive the funds as tokens, withdraw from strategies\\n        if (receiveAsTokens) {\\n            // actually withdraw the funds\\n            for (uint256 i = 0; i < strategiesLength;) {\\n                // tell the delegation to send the appropriate amount of funds to the depositor\\n                queuedWithdrawal.delegations[i].withdraw(\\n                    withdrawalStorageCopy.withdrawer, queuedWithdrawal.tokens[i], queuedWithdrawal.shares[i]\\n                );\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } else {\\n            // else increase their shares\\n            for (uint256 i = 0; i < strategiesLength;) {\\n                _addShares(withdrawalStorageCopy.withdrawer, queuedWithdrawal.delegations[i], queuedWithdrawal.shares[i]);\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        emit WithdrawalCompleted(queuedWithdrawal.depositor, withdrawalStorageCopy.withdrawer, withdrawalRoot);\\n    }\\n\\n    /**\\n     * @notice Slashes the shares of a 'frozen' operator (or a staker delegated to one)\\n     * @param slashedAddress is the frozen address that is having its shares slashed\\n     * @param delegationIndexes is a list of the indices in `investorStrats[msg.sender]` that correspond to the strategies\\n     * for which `msg.sender` is withdrawing 100% of their shares\\n     * @param recipient The slashed funds are withdrawn as tokens to this address.\\n     * @dev delegationShares are removed from `investorStrats` by swapping the last entry with the entry to be removed, then\\n     * popping off the last entry in `investorStrats`. The simplest way to calculate the correct `delegationIndexes` to input\\n     * is to order the strategies *for which `msg.sender` is withdrawing 100% of their shares* from highest index in\\n     * `investorStrats` to lowest index\\n     */\\n    function slashShares(\\n        address slashedAddress,\\n        address recipient,\\n        IDelegationShare[] calldata delegationShares,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata delegationIndexes,\\n        uint256[] calldata shareAmounts\\n    )\\n        external\\n        virtual\\n        whenNotPaused\\n        onlyOwner\\n        onlyFrozen(slashedAddress)\\n        nonReentrant\\n    {\\n        uint256 delegationIndex;\\n        uint256 strategiesLength = delegationShares.length;\\n        for (uint256 i = 0; i < strategiesLength;) {\\n            // the internal function will return 'true' in the event the delegation contract was\\n            // removed from the slashedAddress's array of strategies -- i.e. investorStrats[slashedAddress]\\n            if (_removeShares(slashedAddress, delegationIndexes[delegationIndex], delegationShares[i], shareAmounts[i])) {\\n                unchecked {\\n                    ++delegationIndex;\\n                }\\n            }\\n\\n            // withdraw the shares and send funds to the recipient\\n            delegationShares[i].withdraw(recipient, tokens[i], shareAmounts[i]);\\n\\n            // increment the loop\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // modify delegated shares accordingly, if applicable\\n        delegation.decreaseDelegatedShares(slashedAddress, delegationShares, shareAmounts);\\n    }\\n\\n    /**\\n     * @notice Slashes an existing queued withdrawal that was created by a 'frozen' operator (or a staker delegated to one)\\n     * @param recipient The funds in the slashed withdrawal are withdrawn as tokens to this address.\\n     */\\n    function slashQueuedWithdrawal(address recipient, QueuedWithdrawal calldata queuedWithdrawal)\\n        external\\n        whenNotPaused\\n        onlyOwner\\n        nonReentrant\\n    {\\n        // find the withdrawalRoot\\n        bytes32 withdrawalRoot = calculateWithdrawalRoot(queuedWithdrawal);\\n\\n        // verify that the queued withdrawal actually exists\\n        require(\\n            queuedWithdrawals[withdrawalRoot].unlockTimestamp != 0,\\n            \\\"DelegationManager.slashQueuedWithdrawal: withdrawal does not exist\\\"\\n        );\\n\\n        // verify that *either* the queued withdrawal has been successfully challenged, *or* the `depositor` has been frozen\\n        require(\\n            queuedWithdrawals[withdrawalRoot].withdrawer == address(0) || delegationSlasher.isFrozen(queuedWithdrawal.depositor),\\n            \\\"DelegationManager.slashQueuedWithdrawal: withdrawal has not been successfully challenged or depositor is not frozen\\\"\\n        );\\n\\n        // reset the storage slot in mapping of queued withdrawals\\n        delete queuedWithdrawals[withdrawalRoot];\\n\\n        uint256 strategiesLength = queuedWithdrawal.delegations.length;\\n        for (uint256 i = 0; i < strategiesLength;) {\\n            // tell the delegation contract to send the appropriate amount of funds to the recipient\\n            queuedWithdrawal.delegations[i].withdraw(recipient, queuedWithdrawal.tokens[i], queuedWithdrawal.shares[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /**\\n     * @notice This function adds `shares` for a given `delegationShare` to the `depositor` and runs through the necessary update logic.\\n     * @dev In particular, this function calls `delegation.increaseDelegatedShares(depositor, delegationShare, shares)` to ensure that all\\n     * delegated shares are tracked, increases the stored share amount in `investorStratShares[depositor][delegationShare]`, and adds `delegationShare`\\n     * to the `depositor`'s list of strategies, if it is not in the list already.\\n     */\\n    function _addShares(address depositor, IDelegationShare delegationShare, uint256 shares) internal {\\n        // sanity check on `shares` input\\n        require(shares != 0, \\\"DelegationManager._addShares: shares should not be zero!\\\");\\n\\n        // if they dont have existing shares of this delegation contract, add it to their strats\\n        if (investorDelegationShares[depositor][delegationShare] == 0) {\\n            require(\\n                investorDelegations[depositor].length <= MAX_INVESTOR_DELEGATION_LENGTH,\\n                \\\"DelegationManager._addShares: deposit would exceed MAX_INVESTOR_DELEGATION_LENGTH\\\"\\n            );\\n            investorDelegations[depositor].push(delegationShare);\\n        }\\n\\n        // add the returned shares to their existing shares for this delegation contract\\n        investorDelegationShares[depositor][delegationShare] += shares;\\n\\n        // if applicable, increase delegated shares accordingly\\n        delegation.increaseDelegatedShares(depositor, delegationShare, shares);\\n    }\\n\\n    /**\\n     * @notice Internal function in which `amount` of ERC20 `token` is transferred from `msg.sender` to the InvestmentDelegation-type contract\\n     * `delegationShare`, with the resulting shares credited to `depositor`.\\n     * @return shares The amount of *new* shares in `delegationShare` that have been credited to the `depositor`.\\n     */\\n    function _depositInto(address depositor, IDelegationShare delegationShare, IERC20 token, uint256 amount)\\n        internal\\n        returns (uint256 shares)\\n    {\\n\\n        // transfer tokens from the sender to the delegation contract\\n        token.safeTransferFrom(depositor, address(delegationShare), amount);\\n\\n        // deposit the assets into the specified delegation contract and get the equivalent amount of shares in that delegation contract\\n        shares = delegationShare.deposit(depositor, token, amount);\\n\\n        // add the returned shares to the depositor's existing shares for this delegation contract\\n        _addShares(depositor, delegationShare, shares);\\n\\n        return shares;\\n    }\\n\\n    /**\\n     * @notice Decreases the shares that `depositor` holds in `delegationShare` by `shareAmount`.\\n     * @dev If the amount of shares represents all of the depositor`s shares in said delegation contract,\\n     * then the delegation contract is removed from investorStrats[depositor] and 'true' is returned. Otherwise 'false' is returned.\\n     */\\n    function _removeShares(address depositor, uint256 delegationIndex, IDelegationShare delegationShare, uint256 shareAmount)\\n        internal\\n        returns (bool)\\n    {\\n        // sanity check on `shareAmount` input\\n        require(shareAmount != 0, \\\"DelegationManager._removeShares: shareAmount should not be zero!\\\");\\n\\n        //check that the user has sufficient shares\\n        uint256 userShares = investorDelegationShares[depositor][delegationShare];\\n\\n\\n        require(shareAmount <= userShares, \\\"DelegationManager._removeShares: shareAmount too high\\\");\\n        //unchecked arithmetic since we just checked this above\\n        unchecked {\\n            userShares = userShares - shareAmount;\\n        }\\n\\n        // subtract the shares from the depositor's existing shares for this delegation contract\\n        investorDelegationShares[depositor][delegationShare] = userShares;\\n        // if no existing shares, remove is from this investors strats\\n\\n        if (userShares == 0) {\\n            // remove the delegation contract from the depositor's dynamic array of strategies\\n            _removeDelegationFromInvestorDelegations(depositor, delegationIndex, delegationShare);\\n\\n            // return true in the event that the delegation contract was removed from investorStrats[depositor]\\n            return true;\\n        }\\n        // return false in the event that the delegation contract was *not* removed from investorStrats[depositor]\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Removes `delegationShare` from `depositor`'s dynamic array of strategies, i.e. from `investorStrats[depositor]`\\n     * @dev the provided `delegationIndex` input is optimistically used to find the delegation contract quickly in the list. If the specified\\n     * index is incorrect, then we revert to a brute-force search.\\n     */\\n    function _removeDelegationFromInvestorDelegations(address depositor, uint256 delegationIndex, IDelegationShare delegationShare) internal {\\n        // if the delegation contract matches with the delegation contract index provided\\n        if (investorDelegations[depositor][delegationIndex] == delegationShare) {\\n            // replace the delegation contract with the last delegation contract in the list\\n            investorDelegations[depositor][delegationIndex] =\\n            investorDelegations[depositor][investorDelegations[depositor].length - 1];\\n        } else {\\n            //loop through all of the strategies, find the right one, then replace\\n            uint256 delegationLength = investorDelegations[depositor].length;\\n\\n            for (uint256 j = 0; j < delegationLength;) {\\n                if (investorDelegations[depositor][j] == delegationShare) {\\n                    //replace the delegation contract with the last delegation contract in the list\\n                    investorDelegations[depositor][j] = investorDelegations[depositor][investorDelegations[depositor].length - 1];\\n                    break;\\n                }\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n        }\\n\\n        // pop off the last entry in the list of strategies\\n        investorDelegations[depositor].pop();\\n    }\\n\\n    /**\\n     * @notice If the `depositor` has no existing shares, then they can `undelegate` themselves.\\n     * This allows people a \\\"hard reset\\\" in their relationship after withdrawing all of their stake.\\n     */\\n    function _undelegate(address depositor) internal {\\n        require(investorDelegations[depositor].length == 0, \\\"InvestmentManager._undelegate: depositor has active deposits\\\");\\n        delegation.undelegate(depositor);\\n    }\\n\\n    function max(uint32 x, uint32 y) internal pure returns (uint32) {\\n        return x > y ? x : y;\\n    }\\n\\n    // VIEW FUNCTIONS\\n\\n    /**\\n     * @notice Used to check if a queued withdrawal can be completed. Returns 'true' if the withdrawal can be immediately\\n     * completed, and 'false' otherwise.\\n     * @dev This function will revert if the specified `queuedWithdrawal` does not exist\\n     */\\n    function canCompleteQueuedWithdrawal(QueuedWithdrawal calldata queuedWithdrawal) external view returns (bool) {\\n        // find the withdrawalRoot\\n        bytes32 withdrawalRoot = calculateWithdrawalRoot(queuedWithdrawal);\\n\\n        // verify that the queued withdrawal actually exists\\n        require(\\n            queuedWithdrawals[withdrawalRoot].unlockTimestamp != 0,\\n            \\\"DelegationManager.canCompleteQueuedWithdrawal: withdrawal does not exist\\\"\\n        );\\n\\n        if (delegationSlasher.isFrozen(queuedWithdrawal.delegatedAddress)) {\\n            return false;\\n        }\\n\\n        return (\\n            uint32(block.timestamp) >= queuedWithdrawals[withdrawalRoot].unlockTimestamp\\n                || (queuedWithdrawal.delegatedAddress == address(0))\\n        );\\n    }\\n\\n    /**\\n     * @notice Get all details on the depositor's investments and corresponding shares\\n     * @return (depositor's strategies, shares in these strategies)\\n     */\\n    function getDeposits(address depositor) external view returns (IDelegationShare[] memory, uint256[] memory) {\\n        uint256 delegationLength = investorDelegations[depositor].length;\\n        uint256[] memory shares = new uint256[](delegationLength);\\n\\n        for (uint256 i = 0; i < delegationLength;) {\\n            shares[i] = investorDelegationShares[depositor][investorDelegations[depositor][i]];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return (investorDelegations[depositor], shares);\\n    }\\n\\n    /// @notice Simple getter function that returns `investorStrats[staker].length`.\\n    function investorDelegationLength(address staker) external view returns (uint256) {\\n        return investorDelegations[staker].length;\\n    }\\n\\n    /// @notice Returns the keccak256 hash of `queuedWithdrawal`.\\n    function calculateWithdrawalRoot(QueuedWithdrawal memory queuedWithdrawal) public pure returns (bytes32) {\\n        return (\\n            keccak256(\\n                abi.encode(\\n                    queuedWithdrawal.delegations,\\n                    queuedWithdrawal.tokens,\\n                    queuedWithdrawal.shares,\\n                    queuedWithdrawal.depositor,\\n                    queuedWithdrawal.withdrawerAndNonce,\\n                    queuedWithdrawal.delegatedAddress\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcf477877209bb73377f8c76ed60a8d0aaa646ab66d95d1307d1704d4deccfbe0\",\"license\":\"MIT\"},\"contracts/L1/delegation/DelegationManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./interfaces/IDelegationManager.sol\\\";\\nimport \\\"./interfaces/IDelegationShare.sol\\\";\\nimport \\\"./interfaces/IDelegation.sol\\\";\\nimport \\\"./interfaces/IDelegationSlasher.sol\\\";\\n\\n/**\\n * @title Storage variables for the `InvestmentManager` contract.\\n * @author Layr Labs, Inc.\\n * @notice This storage contract is separate from the logic to simplify the upgrade process.\\n */\\nabstract contract DelegationManagerStorage is IDelegationManager {\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    /// @notice The EIP-712 typehash for the deposit struct used by the contract\\n    bytes32 public constant DEPOSIT_TYPEHASH =\\n        keccak256(\\\"Deposit(address strategy,address token,uint256 amount,uint256 nonce,uint256 expiry)\\\");\\n    /// @notice EIP-712 Domain separator\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // staker => number of signed deposit nonce (used in depositIntoStrategyOnBehalfOf)\\n    mapping(address => uint256) public nonces;\\n    /**\\n     * @notice When a staker undelegates or an operator deregisters, their stake can still be slashed based on tasks/services created\\n     * within `REASONABLE_STAKES_UPDATE_PERIOD` of the present moment. In other words, this is the lag between undelegation/deregistration\\n     * and the staker's/operator's funds no longer being slashable due to misbehavior *on a new task*.\\n     */\\n    uint256 public constant REASONABLE_STAKES_UPDATE_PERIOD = 30 seconds;\\n\\n    // fixed waiting period for withdrawals\\n    // TODO: set this to a proper interval for production\\n    uint32 public constant WITHDRAWAL_WAITING_PERIOD = 10 seconds;\\n\\n    // maximum length of dynamic arrays in `investorStrats` mapping, for sanity's sake\\n    uint8 internal constant MAX_INVESTOR_DELEGATION_LENGTH = 32;\\n\\n    // delegation system contracts\\n    IDelegation public immutable delegation;\\n    IDelegationSlasher public immutable delegationSlasher;\\n\\n    // staker => IDelegationShare => number of shares which they currently hold\\n    mapping(address => mapping(IDelegationShare => uint256)) public investorDelegationShares;\\n    // staker => array of DelegationShare in which they have nonzero shares\\n    mapping(address => IDelegationShare[]) public investorDelegations;\\n    // hash of withdrawal inputs, aka 'withdrawalRoot' => timestamps & address related to the withdrawal\\n    mapping(bytes32 => WithdrawalStorage) public queuedWithdrawals;\\n    // staker => cumulative number of queued withdrawals they have ever initiated. only increments (doesn't decrement)\\n    mapping(address => uint256) public numWithdrawalsQueued;\\n\\n    constructor(IDelegation _delegation, IDelegationSlasher _delegationSlasher) {\\n        delegation = _delegation;\\n        delegationSlasher = _delegationSlasher;\\n    }\\n}\\n\",\"keccak256\":\"0x870854229f7d240cc639fafefba4cf08393790bd86a2af1d410a075a1a632448\",\"license\":\"MIT\"},\"contracts/L1/delegation/DelegationShareBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IDelegationManager.sol\\\";\\n\\n/**\\n * @title Base implementation of `IDelegationShare` interface, designed to be inherited from by more complex strategies.\\n * @author Layr Labs, Inc.\\n * @notice Simple, basic, \\\"do-nothing\\\" DelegationShare that holds a single underlying token and returns it on withdrawals.\\n * Implements minimal versions of the IDelegationShare functions, this contract is designed to be inherited by\\n * more complex delegation contracts, which can then override its functions as necessary.\\n */\\nabstract contract DelegationShareBase is Initializable, PausableUpgradeable, IDelegationShare {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice DelegationManager contract\\n    IDelegationManager public delegationManager;\\n\\n    /// @notice The underyling token for shares in this DelegationShare\\n    IERC20 public underlyingToken;\\n\\n    /// @notice The total number of extant shares in the DelegationShare\\n    uint256 public totalShares;\\n\\n    event Deposit(address depositor, address token, uint256 amount);\\n\\n    event Withdraw(address depositor, address token, uint256 amount);\\n\\n    /// @notice Simply checks that the `msg.sender` is the `DelegationManager`, which is an address stored immutably at construction.\\n    modifier onlyDelegationManager() {\\n        require(msg.sender == address(delegationManager), \\\"DelegationShareBase.onlyDelegationManager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Used to deposit tokens into this DelegationShare\\n     * @param token is the ERC20 token being deposited\\n     * @param amount is the amount of token being deposited\\n     * @dev This function is only callable by the DelegationManager contract. It is invoked inside of the delegationManager's\\n     * `depositIntoStrategy` function, and individual share balances are recorded in the delegationManager as well.\\n     * @return newShares is the number of new shares issued at the current exchange ratio.\\n     */\\n    function deposit(address depositor, IERC20 token, uint256 amount)\\n        external\\n        virtual\\n        override\\n        whenNotPaused\\n        onlyDelegationManager\\n        returns (uint256 newShares)\\n    {\\n        require(token == underlyingToken, \\\"DelegationShareBase.deposit: Can only deposit underlyingToken\\\");\\n\\n        /**\\n         * @notice calculation of newShares *mirrors* `underlyingToShares(amount)`, but is different since the balance of `underlyingToken`\\n         * has already been increased due to the `delegationManager` transferring tokens to this delegation contract prior to calling this function\\n         */\\n        uint256 priorTokenBalance = _tokenBalance() - amount;\\n        if (priorTokenBalance == 0 || totalShares == 0) {\\n            newShares = amount;\\n        } else {\\n            newShares = (amount * totalShares) / priorTokenBalance;\\n        }\\n\\n        totalShares += newShares;\\n        emit Deposit(depositor, address(token), amount);\\n        return newShares;\\n    }\\n\\n    /**\\n     * @notice Used to withdraw tokens from this DelegationShare, to the `depositor`'s address\\n     * @param token is the ERC20 token being transferred out\\n     * @param amountShares is the amount of shares being withdrawn\\n     * @dev This function is only callable by the delegationManager contract. It is invoked inside of the delegationManager's\\n     * other functions, and individual share balances are recorded in the delegationManager as well.\\n     */\\n    function withdraw(address depositor, IERC20 token, uint256 amountShares)\\n        external\\n        virtual\\n        override\\n        whenNotPaused\\n        onlyDelegationManager\\n    {\\n        require(token == underlyingToken, \\\"DelegationShareBase.withdraw: Can only withdraw the strategy token\\\");\\n        require(\\n            amountShares <= totalShares,\\n            \\\"DelegationShareBase.withdraw: amountShares must be less than or equal to totalShares\\\"\\n        );\\n        // copy `totalShares` value prior to decrease\\n        uint256 priorTotalShares = totalShares;\\n        // Decrease `totalShares` to reflect withdrawal. Unchecked arithmetic since we just checked this above.\\n        unchecked {\\n            totalShares -= amountShares;\\n        }\\n        /**\\n         * @notice calculation of amountToSend *mirrors* `sharesToUnderlying(amountShares)`, but is different since the `totalShares` has already\\n         * been decremented\\n         */\\n        uint256 amountToSend;\\n        if (priorTotalShares == amountShares) {\\n            amountToSend = _tokenBalance();\\n        } else {\\n            amountToSend = (_tokenBalance() * amountShares) / priorTotalShares;\\n        }\\n        underlyingToken.safeTransfer(depositor, amountToSend);\\n        emit Withdraw(depositor, address(token), amountToSend);\\n    }\\n\\n    /**\\n     * @notice Currently returns a brief string explaining the strategy's goal & purpose, but for more complex\\n     * strategies, may be a link to metadata that explains in more detail.\\n     */\\n    function explanation() external pure virtual override returns (string memory) {\\n        // return \\\"Base DelegationShare implementation to inherit from for more complex implementations\\\";\\n        return \\\"Mantle token DelegationShare implementation for submodules as an example\\\";\\n    }\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function sharesToUnderlyingView(uint256 amountShares) public view virtual override returns (uint256) {\\n        if (totalShares == 0) {\\n            return amountShares;\\n        } else {\\n            return (_tokenBalance() * amountShares) / totalShares;\\n        }\\n    }\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function sharesToUnderlying(uint256 amountShares) public view virtual override returns (uint256) {\\n        return sharesToUnderlyingView(amountShares);\\n    }\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function underlyingToSharesView(uint256 amountUnderlying) public view virtual returns (uint256) {\\n        uint256 tokenBalance = _tokenBalance();\\n        if (tokenBalance == 0 || totalShares == 0) {\\n            return amountUnderlying;\\n        } else {\\n            return (amountUnderlying * totalShares) / tokenBalance;\\n        }\\n    }\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function underlyingToShares(uint256 amountUnderlying) external view virtual returns (uint256) {\\n        return underlyingToSharesView(amountUnderlying);\\n    }\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\\n     */\\n    function userUnderlyingView(address user) external view virtual returns (uint256) {\\n        return sharesToUnderlyingView(shares(user));\\n    }\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n     */\\n    function userUnderlying(address user) external virtual returns (uint256) {\\n        return sharesToUnderlying(shares(user));\\n    }\\n\\n    /**\\n     * @notice convenience function for fetching the current total shares of `user` in this strategy, by\\n     * querying the `delegationManager` contract\\n     */\\n    function shares(address user) public view virtual returns (uint256) {\\n        return IDelegationManager(delegationManager).investorDelegationShares(user, IDelegationShare(address(this)));\\n    }\\n\\n    /// @notice Internal function used to fetch this contract's current balance of `underlyingToken`.\\n    // slither-disable-next-line dead-code\\n    function _tokenBalance() internal view virtual returns (uint256) {\\n        return underlyingToken.balanceOf(address(this));\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x571fa3ee56900f1f7bd8ce32486b55bb318d54f87f20eb79fb65f24c2302a3a0\",\"license\":\"MIT\"},\"contracts/L1/delegation/DelegationSlasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IDelegationSlasher.sol\\\";\\nimport \\\"./interfaces/IDelegation.sol\\\";\\nimport \\\"./interfaces/IDelegationManager.sol\\\";\\n\\n/**\\n * @title The primary 'slashing' contract.\\n * @notice This contract specifies details on slashing. The functionalities are:\\n * - adding contracts who have permission to perform slashing,\\n * - revoking permission for slashing from specified contracts,\\n * - calling investManager to do actual slashing.\\n */\\nabstract contract DelegationSlasher is Initializable, OwnableUpgradeable, PausableUpgradeable, IDelegationSlasher {\\n    // ,DSTest\\n    /// @notice The central InvestmentManager contract\\n    IDelegationManager public immutable investmentManager;\\n    /// @notice The Delegation contract\\n    IDelegation public immutable delegation;\\n    // contract address => whether or not the contract is allowed to slash any staker (or operator)\\n    mapping(address => bool) public globallyPermissionedContracts;\\n    // user => contract => the time before which the contract is allowed to slash the user\\n    mapping(address => mapping(address => uint32)) public bondedUntil;\\n    // staker => if their funds are 'frozen' and potentially subject to slashing or not\\n    mapping(address => bool) internal frozenStatus;\\n\\n    uint32 internal constant MAX_BONDED_UNTIL = type(uint32).max;\\n\\n    event GloballyPermissionedContractAdded(address indexed contractAdded);\\n    event GloballyPermissionedContractRemoved(address indexed contractRemoved);\\n    event OptedIntoSlashing(address indexed operator, address indexed contractAddress);\\n    event SlashingAbilityRevoked(address indexed operator, address indexed contractAddress, uint32 unbondedAfter);\\n    event OperatorSlashed(address indexed slashedOperator, address indexed slashingContract);\\n    event FrozenStatusReset(address indexed previouslySlashedAddress);\\n\\n    constructor(IDelegationManager _investmentManager, IDelegation _delegation) {\\n        investmentManager = _investmentManager;\\n        delegation = _delegation;\\n        _disableInitializers();\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n    function initialize(\\n        address initialOwner\\n    ) external initializer {\\n        _transferOwnership(initialOwner);\\n        // add InvestmentManager & Delegation to list of permissioned contracts\\n        _addGloballyPermissionedContract(address(investmentManager));\\n        _addGloballyPermissionedContract(address(delegation));\\n    }\\n\\n    /**\\n     * @notice Gives the `contractAddress` permission to slash the funds of the caller.\\n     * @dev Typically, this function must be called prior to registering for a middleware.\\n     */\\n    function allowToSlash(address contractAddress) external {\\n        _optIntoSlashing(msg.sender, contractAddress);\\n    }\\n\\n    /*\\n     TODO: we still need to figure out how/when to appropriately call this function\\n     perhaps a registry can safely call this function after an operator has been deregistered for a very safe amount of time (like a month)\\n    */\\n    /// @notice Called by a contract to revoke its ability to slash `operator`, once `unbondedAfter` is reached.\\n    function revokeSlashingAbility(address operator, uint32 unbondedAfter) external {\\n        _revokeSlashingAbility(operator, msg.sender, unbondedAfter);\\n    }\\n\\n    /**\\n     * @notice Used for 'slashing' a certain operator.\\n     * @param toBeFrozen The operator to be frozen.\\n     * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\\n     * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `allowToSlash`.\\n     */\\n    function freezeOperator(address toBeFrozen) external whenNotPaused {\\n        require(\\n            canSlash(toBeFrozen, msg.sender),\\n            \\\"Slasher.freezeOperator: msg.sender does not have permission to slash this operator\\\"\\n        );\\n        _freezeOperator(toBeFrozen, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Used to give global slashing permission to `contracts`.\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function addGloballyPermissionedContracts(address[] calldata contracts) external onlyOwner {\\n        for (uint256 i = 0; i < contracts.length;) {\\n            _addGloballyPermissionedContract(contracts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Used to revoke global slashing permission from `contracts`.\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function removeGloballyPermissionedContracts(address[] calldata contracts) external onlyOwner {\\n        for (uint256 i = 0; i < contracts.length;) {\\n            _removeGloballyPermissionedContract(contracts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes the 'frozen' status from each of the `frozenAddresses`\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function resetFrozenStatus(address[] calldata frozenAddresses) external onlyOwner {\\n        for (uint256 i = 0; i < frozenAddresses.length;) {\\n            _resetFrozenStatus(frozenAddresses[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n    function _optIntoSlashing(address operator, address contractAddress) internal {\\n        //allow the contract to slash anytime before a time VERY far in the future\\n        bondedUntil[operator][contractAddress] = MAX_BONDED_UNTIL;\\n        emit OptedIntoSlashing(operator, contractAddress);\\n    }\\n\\n    function _revokeSlashingAbility(address operator, address contractAddress, uint32 unbondedAfter) internal {\\n        if (bondedUntil[operator][contractAddress] == MAX_BONDED_UNTIL) {\\n            //contractAddress can now only slash operator before unbondedAfter\\n            bondedUntil[operator][contractAddress] = unbondedAfter;\\n            emit SlashingAbilityRevoked(operator, contractAddress, unbondedAfter);\\n        }\\n    }\\n\\n    function _addGloballyPermissionedContract(address contractToAdd) internal {\\n        if (!globallyPermissionedContracts[contractToAdd]) {\\n            globallyPermissionedContracts[contractToAdd] = true;\\n            emit GloballyPermissionedContractAdded(contractToAdd);\\n        }\\n    }\\n\\n    function _removeGloballyPermissionedContract(address contractToRemove) internal {\\n        if (globallyPermissionedContracts[contractToRemove]) {\\n            globallyPermissionedContracts[contractToRemove] = false;\\n            emit GloballyPermissionedContractRemoved(contractToRemove);\\n        }\\n    }\\n\\n    function _freezeOperator(address toBeFrozen, address slashingContract) internal {\\n        if (!frozenStatus[toBeFrozen]) {\\n            frozenStatus[toBeFrozen] = true;\\n            emit OperatorSlashed(toBeFrozen, slashingContract);\\n        }\\n    }\\n\\n    function _resetFrozenStatus(address previouslySlashedAddress) internal {\\n        if (frozenStatus[previouslySlashedAddress]) {\\n            frozenStatus[previouslySlashedAddress] = false;\\n            emit FrozenStatusReset(previouslySlashedAddress);\\n        }\\n    }\\n\\n    // VIEW FUNCTIONS\\n    /**\\n     * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\\n     * slashing of their funds, and cannot cannot deposit or withdraw from the investmentManager until the slashing process is completed\\n     * and the staker's status is reset (to 'unfrozen').\\n     * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\\n     * to an operator who has their status set to frozen. Otherwise returns 'false'.\\n     */\\n    function isFrozen(address staker) external view returns (bool) {\\n        if (frozenStatus[staker]) {\\n            return true;\\n        } else if (delegation.isDelegated(staker)) {\\n            address operatorAddress = delegation.delegatedTo(staker);\\n            return (frozenStatus[operatorAddress]);\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\\n    function canSlash(address toBeSlashed, address slashingContract) public view returns (bool) {\\n        if (globallyPermissionedContracts[slashingContract]) {\\n            return true;\\n        } else if (block.timestamp < bondedUntil[toBeSlashed][slashingContract]) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb845bf8a425b107cfbd0b0e769d660dbde0f22f2ac421985663aacf78d2c5aac\",\"license\":\"MIT\"},\"contracts/L1/delegation/DelegationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./interfaces/IDelegationManager.sol\\\";\\nimport \\\"./interfaces/IDelegationCallback.sol\\\";\\nimport \\\"./interfaces/IDelegation.sol\\\";\\n\\n/**\\n * @title Storage variables for the `Delegation` contract.\\n * @author Layr Labs, Inc.\\n * @notice This storage contract is separate from the logic to simplify the upgrade process.\\n */\\nabstract contract DelegationStorage is IDelegation {\\n    /// @notice Gas budget provided in calls to DelegationTerms contracts\\n    uint256 internal constant LOW_LEVEL_GAS_BUDGET = 1e5;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegator,address operator,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice EIP-712 Domain separator\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    /// @notice The InvestmentManager contract\\n    IDelegationManager public immutable delegationManager;\\n\\n    // operator => investment strategy => total number of shares delegated to them\\n    mapping(address => mapping(IDelegationShare => uint256)) public operatorShares;\\n\\n    // operator => delegation terms contract\\n    mapping(address => IDelegationCallback) public delegationCallback;\\n\\n    // staker => operator\\n    mapping(address => address) public delegatedTo;\\n\\n    // staker => whether they are delegated or not\\n    mapping(address => IDelegation.DelegationStatus) public delegationStatus;\\n\\n    // delegator => number of signed delegation nonce (used in delegateToBySignature)\\n    mapping(address => uint256) public nonces;\\n\\n    constructor(IDelegationManager _investmentManager) {\\n        delegationManager = _investmentManager;\\n    }\\n}\\n\",\"keccak256\":\"0x67e031ef0cf500e43d7304093de36858b5967a2edee0398256849bc0256674bb\",\"license\":\"MIT\"},\"contracts/L1/delegation/WhiteListBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract WhiteList is OwnableUpgradeable {\\n    modifier whitelistOnly(address checkAddr) {\\n        if (!whitelist[checkAddr]) {\\n            revert(\\\"NOT_IN_WHITELIST\\\");\\n        }\\n        _;\\n    }\\n\\n    mapping(address => bool) public whitelist;\\n\\n    /**\\n     * @notice Add to whitelist\\n     */\\n    function addToWhitelist(address[] calldata toAddAddresses) external onlyOwner {\\n        for (uint i = 0; i < toAddAddresses.length; i++) {\\n            whitelist[toAddAddresses[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Remove from whitelist\\n     */\\n    function removeFromWhitelist(address[] calldata toRemoveAddresses) external onlyOwner {\\n        for (uint i = 0; i < toRemoveAddresses.length; i++) {\\n            delete whitelist[toRemoveAddresses[i]];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a046eb1133e2e94b6743056d6b2067d221b88e1093b1a2deaf0068ebbf29059\",\"license\":\"MIT\"},\"contracts/L1/delegation/interfaces/IDelegation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IDelegationCallback.sol\\\";\\n\\n/**\\n * @title Interface for the primary delegation contract.\\n * @notice See the `Delegation` contract itself for implementation details.\\n */\\ninterface IDelegation {\\n    enum DelegationStatus {\\n        UNDELEGATED,\\n        DELEGATED\\n    }\\n\\n    /**\\n     * @notice This will be called by an operator to register itself as an operator that stakers can choose to delegate to.\\n     * @param dt is the `DelegationTerms` contract that the operator has for those who delegate to them.\\n     * @dev An operator can set `dt` equal to their own address (or another EOA address), in the event that they want to split payments\\n     * in a more 'trustful' manner.\\n     * @dev In the present design, once set, there is no way for an operator to ever modify the address of their DelegationTerms contract.\\n     */\\n    function registerAsOperator(IDelegationCallback dt) external;\\n\\n    /**\\n     *  @notice This will be called by a staker to delegate its assets to some operator.\\n     *  @param operator is the operator to whom staker (msg.sender) is delegating its assets\\n     */\\n    function delegateTo(address operator) external;\\n\\n    /**\\n     * @notice Delegates from `staker` to `operator`.\\n     * @dev requires that r, vs are a valid ECSDA signature from `staker` indicating their intention for this action\\n     */\\n    function delegateToSignature(address staker, address operator, uint256 expiry, bytes32 r, bytes32 vs) external;\\n\\n    /**\\n     * @notice Undelegates `staker` from the operator who they are delegated to.\\n     * @notice Callable only by the InvestmentManager\\n     * @dev Should only ever be called in the event that the `staker` has no active deposits.\\n     */\\n    function undelegate(address staker) external;\\n\\n    /// @notice returns the address of the operator that `staker` is delegated to.\\n    function delegatedTo(address staker) external view returns (address);\\n\\n    /// @notice returns the delegationCallback of the `operator`, which may mediate their interactions with stakers who delegate to them.\\n    function delegationCallback(address operator) external view returns (IDelegationCallback);\\n\\n    /// @notice returns the total number of shares in `DelegationShare` that are delegated to `operator`.\\n    function operatorShares(address operator, IDelegationShare delegationShare) external view returns (uint256);\\n\\n    /// @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n    function isDelegated(address staker) external view returns (bool);\\n\\n    /// @notice Returns 'true' if `staker` is *not* actively delegated, and 'false' otherwise.\\n    function isNotDelegated(address staker) external returns (bool);\\n\\n    /// @notice Returns if an operator can be delegated to, i.e. it has called `registerAsOperator`.\\n    function isOperator(address operator) external view returns (bool);\\n\\n    /**\\n     * @notice Increases the `staker`'s delegated shares in `delegationShare` by `shares`, typically called when the staker has further deposits.\\n     * @dev Callable only by the DelegationManager\\n     */\\n    function increaseDelegatedShares(address staker, IDelegationShare delegationShare, uint256 shares) external;\\n\\n    /**\\n     * @notice Decreases the `staker`'s delegated shares in `delegationShare` by `shares, typically called when the staker withdraws\\n     * @dev Callable only by the DelegationManager\\n     */\\n    function decreaseDelegatedShares(address staker, IDelegationShare delegationShare, uint256 shares) external;\\n\\n    /// @notice Version of `decreaseDelegatedShares` that accepts an array of inputs.\\n    function decreaseDelegatedShares(\\n        address staker,\\n        IDelegationShare[] calldata delegationShares,\\n        uint256[] calldata shares\\n    ) external;\\n}\\n\",\"keccak256\":\"0x74a6e95e0fceefae2e95a4da46889c392dbad8ced9527f56654ede584f5798c3\",\"license\":\"MIT\"},\"contracts/L1/delegation/interfaces/IDelegationCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IDelegationShare.sol\\\";\\n\\n/**\\n * @title Abstract interface for a contract that helps structure the delegation relationship.\\n * @notice The gas budget provided to this contract in calls from contracts is limited.\\n */\\n//TODO: discuss if we can structure the inputs of these functions better\\ninterface IDelegationCallback {\\n    function payForService(IERC20 token, uint256 amount) external payable;\\n\\n    function onDelegationReceived(\\n        address delegator,\\n        address operator,\\n        IDelegationShare[] memory delegationShares,\\n        uint256[] memory investorShares\\n    ) external;\\n\\n    function onDelegationWithdrawn(\\n        address delegator,\\n        address operator,\\n        IDelegationShare[] memory delegationShares,\\n        uint256[] memory investorShares\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7eb42fdfd9e9a2cddfcd5910d9e7cee042935f8c8918cc53580b9a3033695236\",\"license\":\"MIT\"},\"contracts/L1/delegation/interfaces/IDelegationManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IDelegationShare.sol\\\";\\nimport \\\"./IDelegationSlasher.sol\\\";\\nimport \\\"./IDelegation.sol\\\";\\n\\n/**\\n * @title Interface for the primary entrypoint for funds.\\n * @author Layr Labs, Inc.\\n * @notice See the `DelegationManager` contract itself for implementation details.\\n */\\ninterface IDelegationManager {\\n    // used for storing details of queued withdrawals\\n    struct WithdrawalStorage {\\n        uint32 initTimestamp;\\n        uint32 unlockTimestamp;\\n        address withdrawer;\\n    }\\n\\n    // packed struct for queued withdrawals\\n    struct WithdrawerAndNonce {\\n        address withdrawer;\\n        uint96 nonce;\\n    }\\n\\n    /**\\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n     * In functions that operate on existing queued withdrawals -- e.g. `startQueuedWithdrawalWaitingPeriod` or `completeQueuedWithdrawal`,\\n     * the data is resubmitted and the hash of the submitted data is computed by `calculateWithdrawalRoot` and checked against the\\n     * stored hash in order to confirm the integrity of the submitted data.\\n     */\\n    struct QueuedWithdrawal {\\n        IDelegationShare[] delegations;\\n        IERC20[] tokens;\\n        uint256[] shares;\\n        address depositor;\\n        WithdrawerAndNonce withdrawerAndNonce;\\n        address delegatedAddress;\\n    }\\n\\n    /**\\n     * @notice Deposits `amount` of `token` into the specified `DelegationShare`, with the resultant shares credited to `depositor`\\n     * @param delegationShare is the specified shares record where investment is to be made,\\n     * @param token is the ERC20 token in which the investment is to be made,\\n     * @param amount is the amount of token to be invested in the delegationShare by the depositor\\n     */\\n    function depositInto(IDelegationShare delegationShare, IERC20 token, uint256 amount)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Returns the current shares of `user` in `delegationShare`\\n    function investorDelegationShares(address user, IDelegationShare delegationShare) external view returns (uint256 shares);\\n\\n    /**\\n     * @notice Get all details on the depositor's investments and corresponding shares\\n     * @return (depositor's delegationShare record, shares in these DelegationShare contract)\\n     */\\n    function getDeposits(address depositor) external view returns (IDelegationShare[] memory, uint256[] memory);\\n\\n    /// @notice Simple getter function that returns `investorDelegations[staker].length`.\\n    function investorDelegationLength(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Called by a staker to queue a withdraw in the given token and shareAmount from each of the respective given strategies.\\n     * @dev Stakers will complete their withdrawal by calling the 'completeQueuedWithdrawal' function.\\n     * User shares are decreased in this function, but the total number of shares in each delegation strategy remains the same.\\n     * The total number of shares is decremented in the 'completeQueuedWithdrawal' function instead, which is where\\n     * the funds are actually sent to the user through use of the delegation strategies' 'withdrawal' function. This ensures\\n     * that the value per share reported by each strategy will remain consistent, and that the shares will continue\\n     * to accrue gains during the enforced WITHDRAWAL_WAITING_PERIOD.\\n     * @param delegationShareIndexes is a list of the indices in `investorDelegationShare[msg.sender]` that correspond to the delegation strategies\\n     * for which `msg.sender` is withdrawing 100% of their shares\\n     * @dev strategies are removed from `delegationShare` by swapping the last entry with the entry to be removed, then\\n     * popping off the last entry in `delegationShares`. The simplest way to calculate the correct `delegationShareIndexes` to input\\n     * is to order the strategies *for which `msg.sender` is withdrawing 100% of their shares* from highest index in\\n     * `delegationShares` to lowest index\\n     */\\n    function queueWithdrawal(\\n        uint256[] calldata delegationShareIndexes,\\n        IDelegationShare[] calldata delegationShares,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata shareAmounts,\\n        WithdrawerAndNonce calldata withdrawerAndNonce,\\n        bool undelegateIfPossible\\n    )\\n        external returns(bytes32);\\n\\n    function startQueuedWithdrawalWaitingPeriod(\\n        bytes32 withdrawalRoot,\\n        uint32 stakeInactiveAfter\\n    ) external;\\n\\n    /**\\n     * @notice Used to complete the specified `queuedWithdrawal`. The function caller must match `queuedWithdrawal.withdrawer`\\n     * @param queuedWithdrawal The QueuedWithdrawal to complete.\\n     * @param receiveAsTokens If true, the shares specified in the queued withdrawal will be withdrawn from the specified delegation strategies themselves\\n     * and sent to the caller, through calls to `queuedWithdrawal.strategies[i].withdraw`. If false, then the shares in the specified delegation strategies\\n     * will simply be transferred to the caller directly.\\n     */\\n    function completeQueuedWithdrawal(\\n        QueuedWithdrawal calldata queuedWithdrawal,\\n        bool receiveAsTokens\\n    )\\n        external;\\n\\n    /**\\n     * @notice Slashes the shares of 'frozen' operator (or a staker delegated to one)\\n     * @param slashedAddress is the frozen address that is having its shares slashes\\n     * @param delegationShareIndexes is a list of the indices in `investorStrats[msg.sender]` that correspond to the strategies\\n     * for which `msg.sender` is withdrawing 100% of their shares\\n     * @param recipient The slashed funds are withdrawn as tokens to this address.\\n     * @dev strategies are removed from `investorStrats` by swapping the last entry with the entry to be removed, then\\n     * popping off the last entry in `investorStrats`. The simplest way to calculate the correct `strategyIndexes` to input\\n     * is to order the strategies *for which `msg.sender` is withdrawing 100% of their shares* from highest index in\\n     * `investorStrats` to lowest index\\n     */\\n    function slashShares(\\n        address slashedAddress,\\n        address recipient,\\n        IDelegationShare[] calldata delegationShares,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata delegationShareIndexes,\\n        uint256[] calldata shareAmounts\\n    )\\n        external;\\n\\n    function slashQueuedWithdrawal(\\n        address recipient,\\n        QueuedWithdrawal calldata queuedWithdrawal\\n    )\\n        external;\\n\\n    /**\\n     * @notice Used to check if a queued withdrawal can be completed. Returns 'true' if the withdrawal can be immediately\\n     * completed, and 'false' otherwise.\\n     * @dev This function will revert if the specified `queuedWithdrawal` does not exist\\n     */\\n    function canCompleteQueuedWithdrawal(\\n        QueuedWithdrawal calldata queuedWithdrawal\\n    )\\n        external\\n        returns (bool);\\n\\n    /// @notice Returns the keccak256 hash of `queuedWithdrawal`.\\n    function calculateWithdrawalRoot(\\n        QueuedWithdrawal memory queuedWithdrawal\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /// @notice Returns the single, central Delegation contract\\n    function delegation() external view returns (IDelegation);\\n\\n    /// @notice Returns the single, central DelegationSlasher contract\\n    function delegationSlasher() external view returns (IDelegationSlasher);\\n}\\n\",\"keccak256\":\"0x04c93ba37c2c333e38fc5315aef7e6f1d052586defe5490e3a54ee428263f2c4\",\"license\":\"UNLICENSED\"},\"contracts/L1/delegation/interfaces/IDelegationShare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Minimal interface for an `IDelegationShares` contract.\\n * @notice Custom `DelegationShares` implementations may expand extensively on this interface.\\n */\\ninterface IDelegationShare {\\n    /**\\n     * @notice Used to deposit tokens into this DelegationShares\\n     * @param token is the ERC20 token being deposited\\n     * @param amount is the amount of token being deposited\\n     * @dev This function is only callable by the delegationManager contract. It is invoked inside of the delegationManager's\\n     * `depositInto` function, and individual share balances are recorded in the delegationManager as well.\\n     * @return newShares is the number of new shares issued at the current exchange ratio.\\n     */\\n    function deposit(address depositor, IERC20 token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Used to withdraw tokens from this DelegationLedger, to the `depositor`'s address\\n     * @param token is the ERC20 token being transferred out\\n     * @param amountShares is the amount of shares being withdrawn\\n     * @dev This function is only callable by the delegationManager contract. It is invoked inside of the delegationManager's\\n     * other functions, and individual share balances are recorded in the delegationManager as well.\\n     */\\n    function withdraw(address depositor, IERC20 token, uint256 amountShares) external;\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @dev Implementation for these functions in particular may vary signifcantly for different strategies\\n     */\\n    function sharesToUnderlying(uint256 amountShares) external returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this ledger.\\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into ledger shares\\n     * @dev Implementation for these functions in particular may vary signifcantly for different ledgers\\n     */\\n    function underlyingToShares(uint256 amountUnderlying) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this ledger. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n     */\\n    function userUnderlying(address user) external returns (uint256);\\n\\n     /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this ledger.\\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @dev Implementation for these functions in particular may vary signifcantly for different ledgers\\n     */\\n    function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this ledger.\\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into ledger shares\\n     * @dev Implementation for these functions in particular may vary signifcantly for different ledgers\\n     */\\n    function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this ledger. In contrast to `userUnderlying`, this function guarantees no state modifications\\n     */\\n    function userUnderlyingView(address user) external view returns (uint256);\\n\\n    /// @notice The underyling token for shares in this DelegationShares\\n    function underlyingToken() external view returns (IERC20);\\n\\n    /// @notice The total number of extant shares in thie InvestmentStrategy\\n    function totalShares() external view returns (uint256);\\n\\n    /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\\n    function explanation() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xafef22ce9d64eadc4a1177a1eca0feaa243aac318fc7b7e9e3de776ca0302701\",\"license\":\"MIT\"},\"contracts/L1/delegation/interfaces/IDelegationSlasher.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Interface for the primary 'slashing' contract for EigenLayr.\\n * @author Layr Labs, Inc.\\n * @notice See the `Slasher` contract itself for implementation details.\\n */\\ninterface IDelegationSlasher {\\n    /**\\n     * @notice Gives the `contractAddress` permission to slash the funds of the caller.\\n     * @dev Typically, this function must be called prior to registering for a middleware.\\n     */\\n    function allowToSlash(address contractAddress) external;\\n\\n    /// @notice Called by a contract to revoke its ability to slash `operator`, once `unbondedAfter` is reached.\\n    function revokeSlashingAbility(address operator, uint32 unbondedAfter) external;\\n\\n    /**\\n     * @notice Used for 'slashing' a certain operator.\\n     * @param toBeFrozen The operator to be frozen.\\n     * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\\n     * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `allowToSlash`.\\n     */\\n    function freezeOperator(address toBeFrozen) external;\\n\\n    /**\\n     * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\\n     * slashing of their funds, and cannot cannot deposit or withdraw from the investmentManager until the slashing process is completed\\n     * and the staker's status is reset (to 'unfrozen').\\n     * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\\n     * to an operator who has their status set to frozen. Otherwise returns 'false'.\\n     */\\n    function isFrozen(address staker) external view returns (bool);\\n\\n    /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\\n    function canSlash(address toBeSlashed, address slashingContract) external view returns (bool);\\n\\n    /// @notice Returns the UTC timestamp until which `slashingContract` is allowed to slash the `operator`.\\n    function bondedUntil(address operator, address slashingContract) external view returns (uint32);\\n\\n    /**\\n     * @notice Removes the 'frozen' status from each of the `frozenAddresses`\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function resetFrozenStatus(address[] calldata frozenAddresses) external;\\n\\n    /**\\n     * @notice Used to give global slashing permission to `contracts`.\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function addGloballyPermissionedContracts(address[] calldata contracts) external;\\n\\n    /**\\n     * @notice Used to revoke global slashing permission from `contracts`.\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function removeGloballyPermissionedContracts(address[] calldata contracts) external;\\n}\\n\",\"keccak256\":\"0x82568e400a4fcd69fdb669db0f6dd194fb6f7a515f6f113535fa58762dc68f6b\",\"license\":\"UNLICENSED\"},\"contracts/L1/tss/ITssGroupManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\ninterface ITssGroupManager {\\n    enum MemberStatus {\\n        unJail,\\n        jail\\n    }\\n\\n    struct TssMember {\\n        bytes         publicKey;\\n        address       nodeAddress;\\n        MemberStatus  status;\\n    }\\n\\n    function setTssGroupMember(uint256 _threshold, bytes[] memory _batchPublicKey) external;\\n    function setGroupPublicKey(bytes memory _publicKey, bytes memory _groupPublicKey) external;\\n    function getTssGroupInfo() external returns (uint256, uint256, bytes memory, bytes[] memory);\\n    function getTssInactiveGroupInfo() external returns (uint256, uint256, bytes[] memory);\\n    function memberJail(bytes memory _publicKey) external;\\n    function memberUnJail(bytes memory _publicKey) external;\\n    function removeMember(bytes memory _publicKey) external;\\n    function getTssGroupUnJailMembers() external returns (address[] memory);\\n    function getTssGroupMembers() external returns (bytes[] memory);\\n    function getTssMember(bytes memory _publicKey) external returns (TssMember memory);\\n    function memberExistActive(bytes memory _publicKey) external returns (bool);\\n    function memberExistInActive(bytes memory _publicKey) external returns (bool);\\n    function inActiveIsEmpty() external returns (bool);\\n    function verifySign(bytes32 _message, bytes memory _sig) external returns (bool);\\n    function publicKeyToAddress (bytes memory publicKey) external returns (address);\\n    function isTssGroupUnJailMembers(address _addr) external returns (bool);\\n    function memberExistActive(address _addr) external returns (bool);\\n}\\n\",\"keccak256\":\"0x8a55df018436564dd2b9b36583c557e34249a7e573bccab612907d936ce82ac0\",\"license\":\"MIT\"},\"contracts/L1/tss/ITssStakingSlashing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\ninterface IStakingSlashing {\\n\\n    // tx\\n    function setTokenAddress(address) external;\\n    function setTssGroupAddress(address) external;\\n    function setRegulatoryAccount(address) external;\\n    function setClaimer(address, address) external;\\n    function setSlashingParams(uint256[2] calldata) external;\\n    function setPublicKey(bytes calldata) external;\\n    function quitRequest() external;\\n    function clearQuitRequestList() external;\\n    function slashing(bytes calldata, bytes calldata) external;\\n    function unJail() external;\\n\\n    // query\\n    function getSlashingParams() external view returns (uint256[2] memory);\\n    function getQuitRequestList() external view returns (address[] memory);\\n    function getSlashRecord(uint256, address) external view returns (bool);\\n    function isJailed(address) external returns (bool);\\n    function isCanOperator(address) external returns (bool);\\n\\n    //fund\\n    function deposit(uint256 amount) external returns (uint256);\\n    function withdraw() external;\\n    function completeWithdraw() external;\\n    function startWithdraw() external;\\n    function canCompleteQueuedWithdrawal() external returns (bool);\\n\\n    //delegation\\n    function registerAsOperator(bytes calldata) external;\\n    function delegateTo(address) external;\\n\\n\\n\\n\\n}\\n\",\"keccak256\":\"0xdd295e4b4f306501cb1c9bf7bbbbfe12c0692a67b104d5159e0669e9e1102809\",\"license\":\"MIT\"},\"contracts/L1/tss/TssStakingSlashing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport {DelegationShareBase} from \\\"../delegation/DelegationShareBase.sol\\\";\\nimport {DelegationCallbackBase} from \\\"../delegation/DelegationCallbackBase.sol\\\";\\nimport {IDelegationManager} from \\\"../delegation/interfaces/IDelegationManager.sol\\\";\\nimport {IDelegationShare} from \\\"../delegation/interfaces/IDelegation.sol\\\";\\nimport {IDelegation} from \\\"../delegation/interfaces/IDelegation.sol\\\";\\nimport {CrossDomainEnabled} from \\\"../../libraries/bridge/CrossDomainEnabled.sol\\\";\\nimport {ITssRewardContract} from \\\"../../L2/predeploys/iTssRewardContract.sol\\\";\\nimport {TssDelegationManager} from \\\"./delegation/TssDelegationManager.sol\\\";\\nimport {TssDelegation} from \\\"./delegation/TssDelegation.sol\\\";\\nimport {WhiteList} from \\\"../delegation/WhiteListBase.sol\\\";\\n\\nimport \\\"./ITssGroupManager.sol\\\";\\nimport \\\"./ITssStakingSlashing.sol\\\";\\n\\ncontract TssStakingSlashing is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IStakingSlashing,\\n    DelegationShareBase,\\n    DelegationCallbackBase,\\n    CrossDomainEnabled\\n{\\n    enum SlashType {\\n        uptime,\\n        animus\\n    }\\n\\n    struct SlashMsg {\\n        uint256 batchIndex;\\n        address jailNode;\\n        address[] tssNodes;\\n        SlashType slashType;\\n    }\\n    // tss group contract address\\n    address public tssGroupContract;\\n    //tss delegation manager address\\n    address public tssDelegationManagerContract;\\n    //tss delegation address\\n    address public tssDelegationContract;\\n    // storage operator infos (key:staker address)\\n    mapping(address => bytes) public operators;\\n\\n    // slashing parameter settings\\n    // record the quit request\\n    address[] public quitRequestList;\\n    // slashing amount of type uptime and animus (0:uptime, 1:animus)\\n    uint256[2] public slashAmount;\\n    // record the slash operate (map[batchIndex] -> (map[staker] -> slashed))\\n    mapping(uint256 => mapping(address => bool)) slashRecord;\\n    //EOA address\\n    address public regulatoryAccount;\\n    //msg sender => withdraw event\\n    mapping(address => bytes32) public withdrawalRoots;\\n    //msg sender => withdrawal\\n    mapping(address => IDelegationManager.QueuedWithdrawal) public withdrawals;\\n    //operator => stakers\\n    mapping(address => address[]) public stakers;\\n    //staker => operator\\n    mapping(address => address) public delegators;\\n    //operator => claimer\\n    mapping(address => address) public operatorClaimers;\\n    //claimer => operator\\n    mapping(address => address) public claimerOperators;\\n    bool public isSetParam;\\n\\n\\n    /**\\n     * @notice slash tssnode\\n     * @param 0 slashed address\\n     * @param 1 slash type\\n     */\\n    event Slashing(address, SlashType);\\n\\n    event WithdrawQueue(address,uint256);\\n\\n    constructor()  CrossDomainEnabled(address(0)) {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice initializes the contract setting and the deployer as the initial owner\\n     * @param _mantleToken mantle token contract address\\n     * @param _tssGroupContract address tss group manager contract address\\n     */\\n    function initialize(address _mantleToken,\\n        address _tssGroupContract,\\n        address _delegationManager,\\n        address _delegation,\\n        address _l1messenger,\\n        address _regulatoryAccount\\n        ) public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        underlyingToken = IERC20(_mantleToken);\\n        tssGroupContract = _tssGroupContract;\\n        tssDelegationManagerContract = _delegationManager;\\n        tssDelegationContract = _delegation;\\n        //initialize delegation\\n        delegationManager = IDelegationManager(_delegationManager);\\n        delegation = IDelegation(_delegation);\\n        messenger = _l1messenger;\\n        regulatoryAccount = _regulatoryAccount;\\n    }\\n\\n    /**\\n     * @notice change the mantle token and tssGroup contract address\\n     * @param _token the erc20 mantle token contract address\\n     */\\n    function setTokenAddress(address _token) public onlyOwner {\\n        require(_token != address(0),\\\"Invalid address\\\");\\n        underlyingToken = IERC20(_token);\\n    }\\n\\n    function setTssGroupAddress(address _tssGroup) public onlyOwner{\\n        require(_tssGroup != address(0),\\\"Invalid address\\\");\\n        tssGroupContract = _tssGroup;\\n    }\\n\\n    function setRegulatoryAccount(address _account) public onlyOwner {\\n        require(_account != address(0),\\\"Invalid address\\\");\\n        regulatoryAccount = _account;\\n    }\\n\\n    function setPublicKey(bytes calldata _pubKey) public nonReentrant {\\n        require(delegation.isOperator(msg.sender),\\\"msg sender has not registered operator\\\");\\n        operators[msg.sender] = _pubKey;\\n\\n    }\\n\\n    function setClaimer(\\n        address _operator,\\n        address _claimer\\n    ) external {\\n        require(msg.sender == _operator, \\\"msg sender is diff with operator address\\\");\\n        require(delegation.isOperator(msg.sender), \\\"msg sender is not registered operator\\\");\\n        require(claimerOperators[_claimer] == address(0), \\\"the claimer has been used\\\");\\n        if (operatorClaimers[_operator] != address(0)) {\\n            delete claimerOperators[operatorClaimers[_operator]];\\n        }\\n        operatorClaimers[_operator] = _claimer;\\n        claimerOperators[_claimer] = _operator;\\n\\n        bytes memory message = abi.encodeWithSelector(\\n            ITssRewardContract.setClaimer.selector,\\n            _operator,\\n            _claimer\\n        );\\n        // send call data into L2, hardcode address\\n        sendCrossDomainMessage(\\n            address(0x4200000000000000000000000000000000000020),\\n            2000000,\\n            message\\n        );\\n    }\\n\\n    /**\\n     * @notice set the slashing params (0 -> uptime , 1 -> animus)\\n     * @param _slashAmount the amount to be deducted for each type\\n     */\\n    function setSlashingParams(uint256[2] calldata _slashAmount)\\n        public\\n        onlyOwner\\n    {\\n        require(_slashAmount[1] > _slashAmount[0], \\\"invalid param slashAmount, animus <= uptime\\\");\\n\\n        for (uint256 i = 0; i < 2; i++) {\\n            require(_slashAmount[i] > 0, \\\"invalid amount\\\");\\n            slashAmount[i] = _slashAmount[i];\\n        }\\n        isSetParam = true;\\n    }\\n\\n    /**\\n     * @notice set the slashing params (0 -> uptime, 1 -> animus)\\n     */\\n    function getSlashingParams() public view returns (uint256[2] memory) {\\n        return slashAmount;\\n    }\\n\\n    /**\\n     * @notice send quit request for the next election\\n     */\\n    function quitRequest() public nonReentrant {\\n\\n        require(delegation.operatorShares(msg.sender, this) > 0, \\\"do not have deposit\\\");\\n        // when not in consensus period\\n        require(\\n            ITssGroupManager(tssGroupContract).memberExistInActive(operators[msg.sender]) ||\\n                ITssGroupManager(tssGroupContract).memberExistActive(operators[msg.sender]),\\n            \\\"not at the inactive group or active group\\\"\\n        );\\n        // is active member\\n        for (uint256 i = 0; i < quitRequestList.length; i++) {\\n            require(quitRequestList[i] != msg.sender, \\\"already in quitRequestList\\\");\\n        }\\n        quitRequestList.push(msg.sender);\\n    }\\n\\n    /**\\n     * @notice return the quit list\\n     */\\n    function getQuitRequestList() public view returns (address[] memory) {\\n        return quitRequestList;\\n    }\\n\\n    /**\\n     * @notice clear the quit list\\n     */\\n    function clearQuitRequestList() public onlyOwner {\\n        delete quitRequestList;\\n    }\\n\\n    /**\\n     * @notice verify the slash message then slash\\n     * @param _messageBytes the message that abi encode by type SlashMsg\\n     * @param _sig the signature of the hash keccak256(_messageBytes)\\n     */\\n    function slashing(bytes calldata _messageBytes, bytes calldata _sig) public nonReentrant {\\n        SlashMsg memory message = abi.decode(_messageBytes, (SlashMsg));\\n        // verify tss member state not at jailed status\\n        require(!isJailed(message.jailNode), \\\"the node already jailed\\\");\\n\\n        // have not slash before\\n        require(!slashRecord[message.batchIndex][message.jailNode], \\\"already slashed\\\");\\n        slashRecord[message.batchIndex][message.jailNode] = true;\\n\\n        require(\\n            ITssGroupManager(tssGroupContract).verifySign(keccak256(_messageBytes), _sig),\\n            \\\"signer not tss group pub key\\\"\\n        );\\n\\n        // slash tokens\\n        slash(message);\\n        emit Slashing(message.jailNode, message.slashType);\\n    }\\n\\n    /**\\n     * @notice slash the staker and distribute rewards to voters\\n     * @param message the message about the slash infos\\n     */\\n    function slash(SlashMsg memory message) internal {\\n        // slashing params check\\n        require(isSetParam,\\\"have not set the slash amount\\\");\\n        bytes memory jailNodePubKey = operators[message.jailNode];\\n        if (message.slashType == SlashType.uptime) {\\n            // jail and transfer deposits\\n            ITssGroupManager(tssGroupContract).memberJail(jailNodePubKey);\\n            transformDeposit(message.jailNode, 0);\\n        } else if (message.slashType == SlashType.animus) {\\n            // remove the member and transfer deposits\\n            ITssGroupManager(tssGroupContract).memberJail(jailNodePubKey);\\n            transformDeposit(message.jailNode, 1);\\n        } else {\\n            revert(\\\"err type for slashing\\\");\\n        }\\n\\n    }\\n\\n    /**\\n     * @notice distribute rewards to voters\\n     * @param deduction address of the punished\\n     * @param slashType the type to punished\\n     */\\n    function transformDeposit(\\n        address deduction,\\n        uint256 slashType\\n    ) internal {\\n        uint256 deductedAmountShare;\\n\\n        uint256 totalBalance = _tokenBalance();\\n\\n        require(\\n            (delegation.operatorShares(deduction, this) * totalBalance) / totalShares >= slashAmount[slashType],\\n            \\\"do not have enought shares\\\"\\n        );\\n        // record total penalty\\n        deductedAmountShare = (slashAmount[slashType] * totalShares) / totalBalance;\\n\\n        uint256 operatorShare = delegation.operatorShares(deduction, this);\\n\\n        IDelegationShare[] memory delegationShares = new IDelegationShare[](1);\\n        delegationShares[0] = this;\\n\\n        uint256[] memory delegationShareIndexes = new uint256[](1);\\n        delegationShareIndexes[0] = 0;\\n\\n\\n        IERC20[] memory tokens = new IERC20[](1);\\n        tokens[0] = underlyingToken;\\n\\n        address[] memory stakerS = stakers[deduction];\\n        for (uint256 i = 0; i < stakerS.length; i++){\\n            uint256 share = shares(stakerS[i]);\\n            uint256[] memory shareAmounts = new uint256[](1);\\n            shareAmounts[0] = deductedAmountShare * share / operatorShare;\\n            TssDelegationManager(tssDelegationManagerContract).slashShares(stakerS[i], regulatoryAccount, delegationShares,tokens, delegationShareIndexes, shareAmounts);\\n        }\\n\\n    }\\n\\n    /**\\n     * @notice set tss node status unjail\\n     */\\n    function unJail() public {\\n        // slashing params check\\n        require(isSetParam, \\\"have not set the slash amount\\\");\\n\\n        uint256 totalBalance = _tokenBalance();\\n\\n        require((delegation.operatorShares(msg.sender, this) * totalBalance) / totalShares >= slashAmount[1], \\\"Insufficient balance\\\");\\n        ITssGroupManager(tssGroupContract).memberUnJail(operators[msg.sender]);\\n    }\\n\\n\\n    /**\\n     * @notice get the slash record\\n     * @param batchIndex the index of batch\\n     * @param user address of the staker\\n     */\\n    function getSlashRecord(uint256 batchIndex, address user) public view returns (bool) {\\n        return slashRecord[batchIndex][user];\\n    }\\n\\n    /**\\n     * @notice check the tssnode status\\n     * @param user address of the staker\\n     */\\n    function isJailed(address user) public returns (bool) {\\n        ITssGroupManager.TssMember memory tssMember = ITssGroupManager(tssGroupContract)\\n            .getTssMember(operators[user]);\\n        require(tssMember.publicKey.length == 64, \\\"tss member not exist\\\");\\n        return tssMember.status == ITssGroupManager.MemberStatus.jail;\\n    }\\n\\n    function isCanOperator(address _addr) public returns (bool) {\\n        return TssDelegationManager(tssDelegationManagerContract).isCanOperator(_addr, this);\\n    }\\n\\n    function deposit(uint256 amount) public returns (uint256) {\\n       uint256 shares = TssDelegationManager(tssDelegationManagerContract).depositInto(this, underlyingToken, amount, msg.sender);\\n       return shares;\\n    }\\n\\n    function withdraw() external {\\n        require(delegation.isDelegated(msg.sender),\\\"not delegator\\\");\\n\\n        require(\\n            withdrawalRoots[msg.sender] == bytes32(0),\\n            \\\"msg sender already request withdraws\\\"\\n        );\\n\\n        uint256[] memory delegationIndexes = new uint256[](1);\\n        delegationIndexes[0] = 0;\\n        IDelegationShare[] memory delegationShares = new IDelegationShare[](1);\\n        delegationShares[0] = this;\\n        IERC20[] memory tokens = new IERC20[](1);\\n        tokens[0] = underlyingToken;\\n        uint256[] memory sharesA = new uint256[](1);\\n        sharesA[0] = shares(msg.sender);\\n        uint256 nonce = TssDelegationManager(tssDelegationManagerContract).getWithdrawNonce(msg.sender);\\n        IDelegationManager.WithdrawerAndNonce memory withdrawerAndNonce = IDelegationManager.WithdrawerAndNonce({\\n            withdrawer: msg.sender,\\n            nonce: SafeCast.toUint96(nonce)\\n        });\\n        address operator = delegation.delegatedTo(msg.sender);\\n\\n        IDelegationManager.QueuedWithdrawal memory queuedWithdrawal = IDelegationManager.QueuedWithdrawal({\\n            delegations: delegationShares,\\n            tokens: tokens,\\n            shares: sharesA,\\n            depositor: msg.sender,\\n            withdrawerAndNonce: withdrawerAndNonce,\\n            delegatedAddress: operator\\n        });\\n        withdrawals[msg.sender] = queuedWithdrawal;\\n        bytes32 withdrawRoot = TssDelegationManager(tssDelegationManagerContract).queueWithdrawal(msg.sender,delegationIndexes,delegationShares,tokens,sharesA,withdrawerAndNonce);\\n        withdrawalRoots[msg.sender] = withdrawRoot;\\n        emit WithdrawQueue(msg.sender, sharesA[0]);\\n    }\\n\\n    function startWithdraw() external {\\n        require(\\n            withdrawalRoots[msg.sender] != bytes32(0),\\n            \\\"msg sender must request withdraw first\\\"\\n        );\\n        bytes32 withdrawRoot = withdrawalRoots[msg.sender];\\n        TssDelegationManager(tssDelegationManagerContract).startQueuedWithdrawalWaitingPeriod(withdrawRoot,msg.sender,0);\\n    }\\n\\n    function canCompleteQueuedWithdrawal() external returns (bool) {\\n\\n        require(\\n            withdrawalRoots[msg.sender] != bytes32(0),\\n            \\\"msg sender did not request withdraws\\\"\\n        );\\n        IDelegationManager.QueuedWithdrawal memory queuedWithdrawal = withdrawals[msg.sender];\\n        return delegationManager.canCompleteQueuedWithdrawal(queuedWithdrawal);\\n    }\\n\\n    function completeWithdraw() external {\\n\\n        require(\\n            withdrawalRoots[msg.sender] != bytes32(0),\\n            \\\"msg sender did not request withdraws\\\"\\n        );\\n        IDelegationManager.QueuedWithdrawal memory queuedWithdrawal = withdrawals[msg.sender];\\n        require(delegationManager.canCompleteQueuedWithdrawal(queuedWithdrawal),\\\"The waiting period has not yet passed\\\");\\n        TssDelegationManager(tssDelegationManagerContract).completeQueuedWithdrawal(msg.sender, queuedWithdrawal, true);\\n        delete withdrawalRoots[msg.sender];\\n        delete withdrawals[msg.sender];\\n    }\\n\\n    function registerAsOperator(bytes calldata _pubKey) external {\\n        TssDelegation(tssDelegationContract).registerAsOperator(this, msg.sender);\\n        setPublicKey(_pubKey);\\n    }\\n\\n    function delegateTo(address _operator) external {\\n        TssDelegation(tssDelegationContract).delegateTo(_operator, msg.sender);\\n    }\\n\\n\\n    function onDelegationReceived(\\n        address delegator,\\n        address operator,\\n        IDelegationShare[] memory delegationShares,\\n        uint256[] memory investorShares\\n    )external override onlyDelegation {\\n        uint256 delegationLength = delegationShares.length;\\n        require(delegationLength == 1,\\\"delegation only for tss\\\");\\n        require(investorShares.length == 1,\\\"delegation share only for tss\\\");\\n        require(address(delegationShares[0]) == address(this),\\\"must use current contract\\\");\\n        if (delegators[delegator] == address(0)) {\\n            delegators[delegator] = operator;\\n            stakers[operator].push(delegator);\\n        }\\n    }\\n\\n    function onDelegationWithdrawn(\\n        address delegator,\\n        address operator,\\n        IDelegationShare[] memory delegationShares,\\n        uint256[] memory investorShares\\n    ) external override onlyDelegation {\\n        uint256 delegationLength = delegationShares.length;\\n        require(delegationLength == 1,\\\"delegation only for tss\\\");\\n        require(investorShares.length == 1,\\\"delegation share only for tss\\\");\\n        require(address(delegationShares[0]) == address(this),\\\"must use current contract\\\");\\n        if (TssDelegationManager(tssDelegationManagerContract).getDelegationShares(delegator, delegationShares[0]) == investorShares[0]){\\n            address[] memory staker = stakers[operator];\\n            for (uint256 j = 0; j < staker.length; j++) {\\n                if (staker[j] == delegator) {\\n                    stakers[operator][j] = stakers[operator][staker.length -1];\\n                    stakers[operator].pop();\\n                    delete delegators[delegator];\\n                }\\n            }\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x0de227f78a665269e4f9dd50dc3b59842497d199e2de271bd05ca712894f5b20\",\"license\":\"MIT\"},\"contracts/L1/tss/delegation/TssDelegation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../delegation/Delegation.sol\\\";\\nimport \\\"../../delegation/WhiteListBase.sol\\\";\\n\\n\\n/**\\n * @title The primary delegation contract.\\n * @notice  This is the contract for delegation. The main functionalities of this contract are\\n * - for enabling any staker to register as a delegate and specify the delegation terms it has agreed to\\n * - for enabling anyone to register as an operator\\n * - for a registered staker to delegate its stake to the operator of its agreed upon delegation terms contract\\n * - for a staker to undelegate its assets\\n * - for anyone to challenge a staker's claim to have fulfilled all its obligation before undelegation\\n */\\ncontract TssDelegation is Delegation {\\n\\n\\n    address public stakingSlash;\\n\\n\\n\\n\\n    // INITIALIZING FUNCTIONS\\n    constructor(IDelegationManager _delegationManager)\\n    Delegation(_delegationManager)\\n    {\\n        _disableInitializers();\\n    }\\n\\n\\n    function initializeT(\\n        address _stakingSlashing,\\n        address initialOwner\\n    ) external initializer {\\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, bytes(\\\"Mantle\\\"), block.chainid, address(this)));\\n        stakingSlash = _stakingSlashing;\\n         _transferOwnership(initialOwner);\\n    }\\n\\n    modifier onlyStakingSlash() {\\n        require(msg.sender == stakingSlash, \\\"contract call is not staking slashing\\\");\\n        _;\\n    }\\n\\n    function setStakingSlash(address _address) public onlyOwner {\\n        stakingSlash = _address;\\n    }\\n\\n    function registerAsOperator(IDelegationCallback dt, address sender) external whitelistOnly(sender) onlyStakingSlash {\\n\\n        require(\\n            address(delegationCallback[sender]) == address(0),\\n            \\\"Delegation.registerAsOperator: Delegate has already registered\\\"\\n        );\\n        // store the address of the delegation contract that the operator is providing.\\n        delegationCallback[sender] = dt;\\n        _delegate(sender, sender);\\n        emit RegisterOperator(address(dt), sender);\\n    }\\n\\n    function delegateTo(address operator, address staker) external onlyStakingSlash whenNotPaused {\\n        _delegate(staker, operator);\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xcd0a3658ec6d6b573fe91d51a8a8a7282ee20c833aa1c6aebe6dfd2d4736b8af\",\"license\":\"MIT\"},\"contracts/L1/tss/delegation/TssDelegationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../delegation/DelegationManager.sol\\\";\\nimport \\\"../ITssGroupManager.sol\\\";\\nimport \\\"../TssStakingSlashing.sol\\\";\\n\\n\\n/**\\n * @title The primary entry- and exit-point for funds into and out.\\n * @notice This contract is for managing investments in different strategies. The main\\n * functionalities are:\\n * - adding and removing investment strategies that any delegator can invest into\\n * - enabling deposit of assets into specified investment delegation(s)\\n * - enabling removal of assets from specified investment delegation(s)\\n * - recording deposit of ETH into settlement layer\\n * - recording deposit for securing\\n * - slashing of assets for permissioned strategies\\n */\\ncontract TssDelegationManager is DelegationManager {\\n\\n\\n    address public stakingSlash;\\n    address public tssGroupManager;\\n\\n    uint256 public minStakeAmount;\\n\\n\\n    /**\\n     * @param _delegation The delegation contract.\\n     * @param _delegationSlasher The primary slashing contract.\\n     */\\n    constructor(IDelegation _delegation, IDelegationSlasher _delegationSlasher)\\n    DelegationManager(_delegation, _delegationSlasher)\\n    {\\n        _disableInitializers();\\n    }\\n\\n    function initializeT(\\n        address _stakingSlashing,\\n        address _tssGroupManager,\\n        uint256 _minStakeAmount,\\n        address initialOwner\\n    ) public initializer {\\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, bytes(\\\"Mantle\\\"), block.chainid, address(this)));\\n        _transferOwnership(initialOwner);\\n        stakingSlash = _stakingSlashing;\\n        tssGroupManager = _tssGroupManager;\\n        minStakeAmount = _minStakeAmount;\\n    }\\n\\n\\n    modifier onlyStakingSlash() {\\n        require(msg.sender == stakingSlash, \\\"contract call is not staking slashing\\\");\\n        _;\\n    }\\n\\n    function setStakingSlash(address _address) public onlyOwner {\\n        stakingSlash = _address;\\n    }\\n\\n    function setMinStakeAmount(uint256 _amount) public onlyOwner {\\n        minStakeAmount = _amount;\\n    }\\n\\n    function setTssGroupManager(address _addr) public onlyOwner {\\n        tssGroupManager = _addr;\\n    }\\n\\n    /**\\n     * @notice Slashes the shares of a 'frozen' operator (or a staker delegated to one)\\n     * @param slashedAddress is the frozen address that is having its shares slashed\\n     * @param delegationIndexes is a list of the indices in `investorStrats[msg.sender]` that correspond to the strategies\\n     * for which `msg.sender` is withdrawing 100% of their shares\\n     * @param recipient The slashed funds are withdrawn as tokens to this address.\\n     * @dev delegationShares are removed from `investorStrats` by swapping the last entry with the entry to be removed, then\\n     * popping off the last entry in `investorStrats`. The simplest way to calculate the correct `delegationIndexes` to input\\n     * is to order the strategies *for which `msg.sender` is withdrawing 100% of their shares* from highest index in\\n     * `investorStrats` to lowest index\\n     */\\n    function slashShares(\\n        address slashedAddress,\\n        address recipient,\\n        IDelegationShare[] calldata delegationShares,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata delegationIndexes,\\n        uint256[] calldata shareAmounts\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        onlyStakingSlash\\n        nonReentrant\\n    {\\n\\n        uint256 delegationIndex;\\n        uint256 strategiesLength = delegationShares.length;\\n        for (uint256 i = 0; i < strategiesLength;) {\\n            // the internal function will return 'true' in the event the delegation contract was\\n            // removed from the slashedAddress's array of strategies -- i.e. investorStrats[slashedAddress]\\n            if (_removeShares(slashedAddress, delegationIndexes[delegationIndex], delegationShares[i], shareAmounts[i])) {\\n                unchecked {\\n                    ++delegationIndex;\\n                }\\n            }\\n\\n            // withdraw the shares and send funds to the recipient\\n            delegationShares[i].withdraw(recipient, tokens[i], shareAmounts[i]);\\n\\n            // increment the loop\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // modify delegated shares accordingly, if applicable\\n        delegation.decreaseDelegatedShares(slashedAddress, delegationShares, shareAmounts);\\n    }\\n\\n    function queueWithdrawal(\\n        uint256[] calldata delegationIndexes,\\n        IDelegationShare[] calldata delegationShares,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata shares,\\n        WithdrawerAndNonce calldata withdrawerAndNonce,\\n        bool undelegateIfPossible\\n    )\\n    external\\n    virtual\\n    override\\n    whenNotPaused\\n    onlyNotFrozen(msg.sender)\\n    nonReentrant\\n    returns (bytes32)\\n    {\\n        revert(\\\"TssDelegationManager: queueWithdrawal is disabled \\\");\\n    }\\n\\n\\n    function isCanOperator(address _addr, IDelegationShare delegationShare) external returns (bool)  {\\n        if (delegation.isOperator(_addr)) {\\n            uint256 share = delegation.operatorShares(_addr, delegationShare);\\n            uint256 balance = delegationShare.sharesToUnderlying(share);\\n            if (balance > minStakeAmount) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function depositInto(IDelegationShare delegationShare, IERC20 token, uint256 amount, address sender)\\n    external\\n    onlyNotFrozen(sender)\\n    nonReentrant\\n    whitelistOnly(address(delegationShare))\\n    onlyStakingSlash\\n    returns (uint256 shares)\\n    {\\n        shares = _depositInto(sender, delegationShare, token, amount);\\n    }\\n\\n    function queueWithdrawal(\\n        address sender,\\n        uint256[] calldata delegationIndexes,\\n        IDelegationShare[] calldata delegationShares,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata shares,\\n        WithdrawerAndNonce calldata withdrawerAndNonce\\n    )\\n    external\\n    whenNotPaused\\n    onlyNotFrozen(sender)\\n    onlyStakingSlash\\n    nonReentrant\\n    returns (bytes32)\\n    {\\n        require(\\n            withdrawerAndNonce.nonce == numWithdrawalsQueued[sender],\\n            \\\"InvestmentManager.queueWithdrawal: provided nonce incorrect\\\"\\n        );\\n        require(delegationShares.length == 1, \\\"only tss delegation share\\\");\\n        require(shares.length == 1,\\\"only tss delegation share\\\");\\n        // increment the numWithdrawalsQueued of the sender\\n        unchecked {\\n            ++numWithdrawalsQueued[sender];\\n        }\\n        address operator = delegation.delegatedTo(sender);\\n\\n        _checkMinStakeAmount(sender, delegationShares[0], shares[0]);\\n\\n        // modify delegated shares accordingly, if applicable\\n        delegation.decreaseDelegatedShares(sender, delegationShares, shares);\\n\\n        // the internal function will return 'true' in the event the delegation contrat was\\n        // removed from the depositor's array of strategies -- i.e. investorStrats[depositor]\\n        _removeShares(sender, delegationIndexes[0], delegationShares[0], shares[0]);\\n\\n        // copy arguments into struct and pull delegation info\\n        QueuedWithdrawal memory queuedWithdrawal = QueuedWithdrawal({\\n            delegations: delegationShares,\\n            tokens: tokens,\\n            shares: shares,\\n            depositor: sender,\\n            withdrawerAndNonce: withdrawerAndNonce,\\n            delegatedAddress: operator\\n        });\\n\\n        // calculate the withdrawal root\\n        bytes32 withdrawalRoot = calculateWithdrawalRoot(queuedWithdrawal);\\n\\n        //update storage in mapping of queued withdrawals\\n        queuedWithdrawals[withdrawalRoot] = WithdrawalStorage({\\n            /**\\n             * @dev We add `REASONABLE_STAKES_UPDATE_PERIOD` to the current time here to account for the fact that it may take some time for\\n             * the operator's stake to be updated on all the middlewares. New tasks created between now at this 'initTimestamp' may still\\n             * subject the `msg.sender` to slashing!\\n             */\\n            initTimestamp: uint32(block.timestamp + REASONABLE_STAKES_UPDATE_PERIOD),\\n            withdrawer: withdrawerAndNonce.withdrawer,\\n            unlockTimestamp: QUEUED_WITHDRAWAL_INITIALIZED_VALUE\\n        });\\n\\n        address staker = sender;\\n        // If the `msg.sender` has withdrawn all of their funds in this transaction, then they can choose to also undelegate\\n        /**\\n         * Checking that `investorStrats[msg.sender].length == 0` is not strictly necessary here, but prevents reverting very late in logic,\\n         * in the case that 'undelegate' is set to true but the `msg.sender` still has active deposits.\\n         */\\n        if (investorDelegations[staker].length == 0) {\\n            _undelegate(staker);\\n        }\\n\\n        emit WithdrawalQueued(staker, withdrawerAndNonce.withdrawer, operator, withdrawalRoot);\\n\\n        return withdrawalRoot;\\n    }\\n\\n\\n    function startQueuedWithdrawalWaitingPeriod(bytes32 withdrawalRoot, address sender, uint32 stakeInactiveAfter) external onlyStakingSlash {\\n        require(\\n            queuedWithdrawals[withdrawalRoot].unlockTimestamp == QUEUED_WITHDRAWAL_INITIALIZED_VALUE,\\n            \\\"InvestmentManager.startQueuedWithdrawalWaitingPeriod: Withdrawal stake inactive claim has already been made\\\"\\n        );\\n        require(\\n            queuedWithdrawals[withdrawalRoot].withdrawer == sender,\\n            \\\"InvestmentManager.startQueuedWithdrawalWaitingPeriod: Sender is not the withdrawer\\\"\\n        );\\n        require(\\n            block.timestamp > queuedWithdrawals[withdrawalRoot].initTimestamp,\\n            \\\"InvestmentManager.startQueuedWithdrawalWaitingPeriod: Stake may still be subject to slashing based on new tasks. Wait to set stakeInactiveAfter.\\\"\\n        );\\n        //they can only unlock after a withdrawal waiting period or after they are claiming their stake is inactive\\n        queuedWithdrawals[withdrawalRoot].unlockTimestamp = max((uint32(block.timestamp) + WITHDRAWAL_WAITING_PERIOD), stakeInactiveAfter);\\n    }\\n\\n    function completeQueuedWithdrawal(address sender, QueuedWithdrawal calldata queuedWithdrawal, bool receiveAsTokens)\\n        external\\n        whenNotPaused\\n        // check that the address that the staker *was delegated to* \\u2013 at the time that they queued the withdrawal \\u2013 is not frozen\\n        onlyNotFrozen(queuedWithdrawal.delegatedAddress)\\n        nonReentrant\\n        onlyStakingSlash\\n    {\\n        // find the withdrawalRoot\\n        bytes32 withdrawalRoot = calculateWithdrawalRoot(queuedWithdrawal);\\n        // copy storage to memory\\n        WithdrawalStorage memory withdrawalStorageCopy = queuedWithdrawals[withdrawalRoot];\\n\\n        // verify that the queued withdrawal actually exists\\n        require(\\n            withdrawalStorageCopy.unlockTimestamp != 0,\\n            \\\"InvestmentManager.completeQueuedWithdrawal: withdrawal does not exist\\\"\\n        );\\n\\n        require(\\n            uint32(block.timestamp) >= withdrawalStorageCopy.unlockTimestamp\\n                || (queuedWithdrawal.delegatedAddress == address(0)),\\n            \\\"InvestmentManager.completeQueuedWithdrawal: withdrawal waiting period has not yet passed and depositor was delegated when withdrawal initiated\\\"\\n        );\\n\\n        // TODO: add testing coverage for this\\n        require(\\n            sender == queuedWithdrawal.withdrawerAndNonce.withdrawer,\\n            \\\"InvestmentManager.completeQueuedWithdrawal: only specified withdrawer can complete a queued withdrawal\\\"\\n        );\\n\\n        // reset the storage slot in mapping of queued withdrawals\\n        delete queuedWithdrawals[withdrawalRoot];\\n\\n        // store length for gas savings\\n        uint256 strategiesLength = queuedWithdrawal.delegations.length;\\n        // if the withdrawer has flagged to receive the funds as tokens, withdraw from strategies\\n        if (receiveAsTokens) {\\n            // actually withdraw the funds\\n            for (uint256 i = 0; i < strategiesLength;) {\\n                // tell the delegation to send the appropriate amount of funds to the depositor\\n                queuedWithdrawal.delegations[i].withdraw(\\n                    withdrawalStorageCopy.withdrawer, queuedWithdrawal.tokens[i], queuedWithdrawal.shares[i]\\n                );\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } else {\\n            // else increase their shares\\n            for (uint256 i = 0; i < strategiesLength;) {\\n                _addShares(withdrawalStorageCopy.withdrawer, queuedWithdrawal.delegations[i], queuedWithdrawal.shares[i]);\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        emit WithdrawalCompleted(queuedWithdrawal.depositor, withdrawalStorageCopy.withdrawer, withdrawalRoot);\\n    }\\n\\n    function getWithdrawNonce(address staker) external view onlyStakingSlash returns (uint256) {\\n        return numWithdrawalsQueued[staker];\\n    }\\n\\n    function getDelegationShares(address staker,IDelegationShare delegationShare) external view onlyStakingSlash returns (uint256) {\\n        return investorDelegationShares[staker][delegationShare];\\n    }\\n\\n    function _checkMinStakeAmount(address sender,IDelegationShare delegationShare, uint256 shares) internal {\\n        address operator = delegation.delegatedTo(sender);\\n        // check if the operator is still mpc node, if the remaining shares meet the mini requirement\\n        if (delegation.isDelegated(sender)){\\n            if (ITssGroupManager(tssGroupManager).memberExistActive(operator)){\\n                require(!TssStakingSlashing(stakingSlash).isJailed(operator),\\\"the operator is not in jail status\\\");\\n                uint256 rest= delegation.operatorShares(operator, delegationShare) - shares;\\n                uint256 balance = delegationShare.sharesToUnderlying(rest);\\n                if (ITssGroupManager(tssGroupManager).isTssGroupUnJailMembers(operator)) {\\n                    require(balance > minStakeAmount,\\\"unable withdraw due to operator's rest shares smaller than mini requirement\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n\\n}\\n\\n\",\"keccak256\":\"0x117ed04165a6703fc33bf5a9e834bf9ee7336d885f1911b0afba742eb0f0bc83\",\"license\":\"MIT\"},\"contracts/L2/predeploys/iTssRewardContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title ITssRewardContract\\n */\\n\\ninterface ITssRewardContract {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event DistributeTssReward(\\n        uint256 lastBatchTime,\\n        uint256 batchTime,\\n        uint256 amount,\\n        address[] tssMembers\\n    );\\n\\n    event DistributeTssRewardByBlock(\\n        uint256   blockStartHeight,\\n        uint32     length,\\n        uint256    amount,\\n        address[] tssMembers\\n    );\\n\\n    event Claim(\\n        address owner,\\n        uint256 amount\\n    );\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * @dev Query total undistributed balance.\\n     * @return Amount of undistributed rewards.\\n     */\\n    function queryReward() external view returns (uint256);\\n\\n    /**\\n     * @dev Auto distribute reward to tss members.\\n     * @param _blockStartHeight L2 rollup batch block start height.\\n     * @param _length Rollup batch length.\\n     * @param _tssMembers Tss member address array.\\n     */\\n    function claimReward(uint256 _blockStartHeight, uint32 _length, uint256 _batchTime, address[] calldata _tssMembers) external;\\n\\n    /**\\n     * @dev clear contract(canonical).\\n     */\\n    function withdraw() external;\\n\\n    /**\\n     * @dev Claim reward and withdraw\\n     */\\n    function claim() external;\\n\\n    /**\\n     * @dev default claimer == staker, if staker is multi-signature address,must set claimer\\n     * @param _staker the address of staker\\n     * @param _claimer the address for staker to claim reward\\n     */\\n    function setClaimer(address _staker, address _claimer) external;\\n\\n    /**\\n     * @dev Initiate a request to claim\\n     */\\n    function requestClaim() external returns (bool);\\n\\n    /**\\n     * @dev Query the remaining time required to claim\\n     */\\n    function queryClaimTime() external returns (uint256);\\n\\n    function setSccAddr(address sccAddr) external;\\n\\n    function setStakeSlashAddr(address ssAddr) external;\\n\\n    function setSendAmountPerYear(uint256) external;\\n\\n    function setWaitingTime(uint256) external;\\n\\n}\\n\",\"keccak256\":\"0xb7cf071b7e6c4ab4a8a43d61ed1e7f91409a484fe3e14ff82bb555879de2f54a\",\"license\":\"MIT\"},\"contracts/libraries/bridge/CrossDomainEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/* Interface Imports */\\nimport { ICrossDomainMessenger } from \\\"./ICrossDomainMessenger.sol\\\";\\n\\n/**\\n * @title CrossDomainEnabled\\n * @dev Helper contract for contracts performing cross-domain communications\\n *\\n * Compiler used: defined by inheriting contract\\n */\\ncontract CrossDomainEnabled {\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    // Messenger contract used to send and recieve messages from the other domain.\\n    address public messenger;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _messenger Address of the CrossDomainMessenger on the current layer.\\n     */\\n    constructor(address _messenger) {\\n        messenger = _messenger;\\n    }\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    /**\\n     * Enforces that the modified function is only callable by a specific cross-domain account.\\n     * @param _sourceDomainAccount The only account on the originating domain which is\\n     *  authenticated to call this function.\\n     */\\n    modifier onlyFromCrossDomainAccount(address _sourceDomainAccount) {\\n        require(\\n            msg.sender == address(getCrossDomainMessenger()),\\n            \\\"BVM_XCHAIN: messenger contract unauthenticated\\\"\\n        );\\n\\n        require(\\n            getCrossDomainMessenger().xDomainMessageSender() == _sourceDomainAccount,\\n            \\\"BVM_XCHAIN: wrong sender of cross-domain message\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Gets the messenger, usually from storage. This function is exposed in case a child contract\\n     * needs to override.\\n     * @return The address of the cross-domain messenger contract which should be used.\\n     */\\n    function getCrossDomainMessenger() internal virtual returns (ICrossDomainMessenger) {\\n        return ICrossDomainMessenger(messenger);\\n    }\\n\\n    /**q\\n     * Sends a message to an account on another domain\\n     * @param _crossDomainTarget The intended recipient on the destination domain\\n     * @param _message The data to send to the target (usually calldata to a function with\\n     *  `onlyFromCrossDomainAccount()`)\\n     * @param _gasLimit The gasLimit for the receipt of the message on the target domain.\\n     */\\n    function sendCrossDomainMessage(\\n        address _crossDomainTarget,\\n        uint32 _gasLimit,\\n        bytes memory _message\\n    ) internal {\\n        // slither-disable-next-line reentrancy-events, reentrancy-benign\\n        getCrossDomainMessenger().sendMessage(_crossDomainTarget, _message, _gasLimit);\\n    }\\n}\\n\",\"keccak256\":\"0xa7f0c49f2d81e43aa48b72020aa594770ee244353d4dc96d367ec6bf120fb467\",\"license\":\"MIT\"},\"contracts/libraries/bridge/ICrossDomainMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/**\\n * @title ICrossDomainMessenger\\n */\\ninterface ICrossDomainMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(\\n        address indexed target,\\n        address sender,\\n        bytes message,\\n        uint256 messageNonce,\\n        uint256 gasLimit\\n    );\\n    event RelayedMessage(bytes32 indexed msgHash);\\n    event FailedRelayedMessage(bytes32 indexed msgHash);\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f29ae23021345a20ccac7b5edb3fc38268aef943b65adc8a32e74b80bf1833a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620054cf380380620054cf833981016040819052620000349162000143565b6001600160a01b03808316608052811660a05281816200005362000068565b5062000060905062000068565b505062000182565b600054610100900460ff1615620000d55760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116101562000128576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200014057600080fd5b50565b600080604083850312156200015757600080fd5b825162000164816200012a565b602084015190925062000177816200012a565b809150509250929050565b60805160a0516152a96200022660003960008181610632015281816109be01528181610d44015281816114a10152818161194a01528181611f870152818161251201528181612a070152612e410152600081816106920152818161091801528181610fa70152818161107001528181612fda015281816130850152818161367c0152818161371a0152818161392201528181613beb0152613e9801526152a96000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c806388fdccf91161015c578063a49b5234116100ce578063d6495d5f11610087578063d6495d5f1461067a578063df5cf7231461068d578063eb4af045146106b4578063f1887684146106c7578063f2fde38b146106d0578063fd3eb81f146106e357600080fd5b8063a49b5234146105f4578063a7c373bc14610607578063b0eeb55e1461061a578063bb5807741461062d578063c4d66de814610654578063cf4c8a7b1461066757600080fd5b806394f649dd1161012057806394f649dd146104f05780639887bd231461051157806399f5371b146105195780639b19251a146105895780639cb600ba146105ac578063a319af61146105d757600080fd5b806388fdccf91461049e5780638941086c146104b15780638da5cb5b146104c457806390530863146104d557806392ab89bb146104e857600080fd5b80635350262e116101f5578063715018a6116101b9578063715018a614610414578063785112021461041c5780637ecebe001461042f5780637f6497831461044f578063863111ac146104625780638885a1ec1461047557600080fd5b80635350262e146103a0578063548db174146103c357806356631028146103d65780635c975abb146103f657806363f1dcce1461040157600080fd5b80633644e515116102475780633644e5151461030c5780633fd228f514610315578063423b3cf81461034057806348825e9414610353578063520381c01461037a578063529075a51461038d57600080fd5b806305579ccc1461028457806306f1f684146102aa5780631abeb0d9146102bf57806320606b70146102d2578063231c7f0d146102f9575b600080fd5b6102976102923660046143b4565b6106f6565b6040519081526020015b60405180910390f35b6102bd6102b8366004614438565b61075a565b005b6102976102cd36600461451f565b61099a565b6102977f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61029761030736600461480f565b610b20565b61029760c95481565b60d154610328906001600160a01b031681565b6040516001600160a01b0390911681526020016102a1565b61032861034e366004614843565b610b6d565b6102977f0a564d4cfe5cb0d4ee082aab2ca54b8c48e129485a8f7c77766ab5ef0c3566f181565b6102bd61038836600461451f565b610ba5565b61029761039b366004614887565b610d19565b6103b36103ae36600461497e565b6113e6565b60405190151581526020016102a1565b6102bd6103d13660046149b2565b6115a9565b6102976103e43660046149f3565b60ce6020526000908152604090205481565b60655460ff166103b3565b6102bd61040f366004614a24565b61161f565b6102bd6118ff565b6102bd61042a366004614a7b565b611913565b61029761043d3660046149f3565b60ca6020526000908152604090205481565b6102bd61045d3660046149b2565b611ed6565b6102bd610470366004614ac1565b611f50565b6102976104833660046149f3565b6001600160a01b0316600090815260cc602052604090205490565b6102976104ac366004614b24565b6124f0565b6102bd6104bf366004614b65565b612649565b6033546001600160a01b0316610328565b6102bd6104e3366004614b91565b6128f5565b6102bd612c97565b6105036104fe3660046149f3565b612ca0565b6040516102a1929190614c54565b610297601e81565b61055d610527366004614c82565b60cd6020526000908152604090205463ffffffff80821691600160201b810490911690600160401b90046001600160a01b031683565b6040805163ffffffff94851681529390921660208401526001600160a01b0316908201526060016102a1565b6103b36105973660046149f3565b60cf6020526000908152604090205460ff1681565b6102976105ba3660046143b4565b60cb60209081526000928352604080842090915290825290205481565b6105df600a81565b60405163ffffffff90911681526020016102a1565b610297610602366004614c9b565b612e1f565b6102976106153660046149f3565b612f6b565b6103b36106283660046143b4565b612fb8565b6103287f000000000000000000000000000000000000000000000000000000000000000081565b6102bd6106623660046149f3565b6131a4565b60d054610328906001600160a01b031681565b6102bd6106883660046149f3565b6132e0565b6103287f000000000000000000000000000000000000000000000000000000000000000081565b6102bd6106c2366004614c82565b61330a565b61029760d25481565b6102bd6106de3660046149f3565b613317565b6102bd6106f13660046149f3565b613390565b60d0546000906001600160a01b0316331461072c5760405162461bcd60e51b815260040161072390614d6f565b60405180910390fd5b506001600160a01b03808316600090815260cb60209081526040808320938516835292905220545b92915050565b6107626133ba565b60d0546001600160a01b0316331461078c5760405162461bcd60e51b815260040161072390614d6f565b600260975414156107af5760405162461bcd60e51b815260040161072390614db4565b6002609755600087815b81811015610900576108238d8888868181106107d7576107d7614deb565b905060200201358d8d858181106107f0576107f0614deb565b905060200201602081019061080591906149f3565b88888681811061081757610817614deb565b90506020020135613400565b1561082f578260010192505b8a8a8281811061084157610841614deb565b905060200201602081019061085691906149f3565b6001600160a01b031663d9caed128d8b8b8581811061087757610877614deb565b905060200201602081019061088c91906149f3565b88888681811061089e5761089e614deb565b905060200201356040518463ffffffff1660e01b81526004016108c393929190614e01565b600060405180830381600087803b1580156108dd57600080fd5b505af11580156108f1573d6000803e3d6000fd5b505050508060010190506107b9565b50604051631608124760e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635820491c90610955908f908e908e908a908a90600401614e25565b600060405180830381600087803b15801561096f57600080fd5b505af1158015610983573d6000803e3d6000fd5b505060016097555050505050505050505050505050565b6040516372c1cc1b60e11b81526001600160a01b03808316600483015260009183917f0000000000000000000000000000000000000000000000000000000000000000169063e58398369060240160206040518083038186803b158015610a0057600080fd5b505afa158015610a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a389190614eb4565b15610a555760405162461bcd60e51b815260040161072390614ed1565b60026097541415610a785760405162461bcd60e51b815260040161072390614db4565b60026097556001600160a01b038616600090815260cf6020526040902054869060ff16610ada5760405162461bcd60e51b815260206004820152601060248201526f1393d517d25397d5d2125511531254d560821b6044820152606401610723565b60d0546001600160a01b03163314610b045760405162461bcd60e51b815260040161072390614d6f565b610b1084888888613562565b6001609755979650505050505050565b80516020808301516040808501516060860151608087015160a08801519351600097610b50979096959101614f4d565b604051602081830303815290604052805190602001209050919050565b60cc6020528160005260406000208181548110610b8957600080fd5b6000918252602090912001546001600160a01b03169150829050565b600054610100900460ff1615808015610bc55750600054600160ff909116105b80610bdf5750303b158015610bdf575060005460ff166001145b610bfb5760405162461bcd60e51b815260040161072390615004565b6000805460ff191660011790558015610c1e576000805461ff0019166101001790555b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866604051806040016040528060068152602001654d616e746c6560d01b8152504630604051602001610c7394939291906150aa565b60408051601f19818403018152919052805160209091012060c955610c9782613608565b60d080546001600160a01b038088166001600160a01b03199283161790925560d180549287169290911691909117905560d28390558015610d12576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6000610d236133ba565b6040516372c1cc1b60e11b81526001600160a01b03808d1660048301528c917f00000000000000000000000000000000000000000000000000000000000000009091169063e58398369060240160206040518083038186803b158015610d8857600080fd5b505afa158015610d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc09190614eb4565b15610ddd5760405162461bcd60e51b815260040161072390614ed1565b60d0546001600160a01b03163314610e075760405162461bcd60e51b815260040161072390614d6f565b60026097541415610e2a5760405162461bcd60e51b815260040161072390614db4565b60026097556001600160a01b038c16600090815260ce60209081526040918290205491610e5c919086019086016150e4565b6001600160601b031614610ed85760405162461bcd60e51b815260206004820152603b60248201527f496e766573746d656e744d616e616765722e717565756557697468647261776160448201527f6c3a2070726f7669646564206e6f6e636520696e636f727265637400000000006064820152608401610723565b60018814610f245760405162461bcd60e51b81526020600482015260196024820152786f6e6c79207473732064656c65676174696f6e20736861726560381b6044820152606401610723565b60018414610f705760405162461bcd60e51b81526020600482015260196024820152786f6e6c79207473732064656c65676174696f6e20736861726560381b6044820152606401610723565b6001600160a01b03808d16600081815260ce60205260408082208054600101905551631976849960e21b81526004810192909252917f000000000000000000000000000000000000000000000000000000000000000016906365da12649060240160206040518083038186803b158015610fe957600080fd5b505afa158015610ffd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102191906150ff565b905061106e8d8b8b600081811061103a5761103a614deb565b905060200201602081019061104f91906149f3565b8888600081811061106257611062614deb565b9050602002013561365a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635820491c8e8c8c8a8a6040518663ffffffff1660e01b81526004016110c2959493929190614e25565b600060405180830381600087803b1580156110dc57600080fd5b505af11580156110f0573d6000803e3d6000fd5b5050505061114d8d8d8d600081811061110b5761110b614deb565b905060200201358c8c600081811061112557611125614deb565b905060200201602081019061113a91906149f3565b8989600081811061081757610817614deb565b506040805160e060208c02808301820190935260c082018c815260009383928f918f918291908601908490808284376000920191909152505050908252506040805160208c810282810182019093528c82529283019290918d918d9182918501908490808284376000920191909152505050908252506040805160208a810282810182019093528a82529283019290918b918b918291850190849080828437600081840152601f19601f8201169050808301925050505050505081526020018f6001600160a01b031681526020018680360381019061122c919061511c565b8152602001836001600160a01b03168152509050600061124b82610b20565b90506040518060600160405280601e42611265919061514e565b63ffffffff16815260200163ffffffff8016815260200187600001602081019061128f91906149f3565b6001600160a01b031681525060cd600083815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a8154816001600160a01b0302191690836001600160a01b0316021790555090505060008f905060cc6000826001600160a01b03166001600160a01b03168152602001908152602001600020805490506000141561136b5761136b81613b40565b6001600160a01b03841661138260208901896149f3565b6001600160a01b0316826001600160a01b03167f4d91ce160b707b07397f4ad8150b1535d0c2c34d7376c0fe7a227fc088ad6214856040516113c691815260200190565b60405180910390a45060016097559e9d5050505050505050505050505050565b6000806113f561030784615166565b600081815260cd6020526040902054909150600160201b900463ffffffff166114975760405162461bcd60e51b815260206004820152604860248201527f44656c65676174696f6e4d616e616765722e63616e436f6d706c65746551756560448201527f7565645769746864726177616c3a207769746864726177616c20646f6573206e6064820152671bdd08195e1a5cdd60c21b608482015260a401610723565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663e58398366114d660e0860160c087016149f3565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561151557600080fd5b505afa158015611529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154d9190614eb4565b1561155b5750600092915050565b600081815260cd602052604090205463ffffffff600160201b9091048116429091161015806115a25750600061159760e0850160c086016149f3565b6001600160a01b0316145b9392505050565b6115b1613c43565b60005b8181101561161a5760cf60008484848181106115d2576115d2614deb565b90506020020160208101906115e791906149f3565b6001600160a01b031681526020810191909152604001600020805460ff191690558061161281615172565b9150506115b4565b505050565b60d0546001600160a01b031633146116495760405162461bcd60e51b815260040161072390614d6f565b600083815260cd6020526040902054600160201b900463ffffffff908116146117145760405162461bcd60e51b815260206004820152606b60248201527f496e766573746d656e744d616e616765722e737461727451756575656457697460448201527f6864726177616c57616974696e67506572696f643a205769746864726177616c60648201527f207374616b6520696e61637469766520636c61696d2068617320616c7265616460848201526a79206265656e206d61646560a81b60a482015260c401610723565b600083815260cd60205260409020546001600160a01b03838116600160401b90920416146117c55760405162461bcd60e51b815260206004820152605260248201527f496e766573746d656e744d616e616765722e737461727451756575656457697460448201527f6864726177616c57616974696e67506572696f643a2053656e646572206973206064820152713737ba103a3432903bb4ba34323930bbb2b960711b608482015260a401610723565b600083815260cd602052604090205463ffffffff1642116118b35760405162461bcd60e51b815260206004820152609060248201527f496e766573746d656e744d616e616765722e737461727451756575656457697460448201527f6864726177616c57616974696e67506572696f643a205374616b65206d61792060648201527f7374696c6c206265207375626a65637420746f20736c617368696e672062617360848201527f6564206f6e206e6577207461736b732e205761697420746f207365742073746160a48201526f35b2a4b730b1ba34bb32a0b33a32b91760811b60c482015260e401610723565b6118c76118c1600a4261518d565b82613c9d565b600093845260cd6020526040909320805463ffffffff94909416600160201b0267ffffffff0000000019909416939093179092555050565b611907613c43565b6119116000613608565b565b61191b6133ba565b61192b60e0830160c084016149f3565b6040516372c1cc1b60e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e58398369060240160206040518083038186803b15801561198c57600080fd5b505afa1580156119a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c49190614eb4565b156119e15760405162461bcd60e51b815260040161072390614ed1565b60026097541415611a045760405162461bcd60e51b815260040161072390614db4565b60026097556000611a1761030785615166565b600081815260cd60209081526040918290208251606081018452905463ffffffff8082168352600160201b820416928201839052600160401b90046001600160a01b03169281019290925291925090611ae65760405162461bcd60e51b815260206004820152604560248201527f44656c65676174696f6e4d616e616765722e636f6d706c65746551756575656460448201527f5769746864726177616c3a207769746864726177616c20646f6573206e6f7420606482015264195e1a5cdd60da1b608482015260a401610723565b806020015163ffffffff164263ffffffff16101580611b1d57506000611b1260e0870160c088016149f3565b6001600160a01b0316145b611bf25760405162461bcd60e51b815260206004820152608e60248201527f44656c65676174696f6e4d616e616765722e636f6d706c65746551756575656460448201527f5769746864726177616c3a207769746864726177616c2077616974696e67207060648201527f6572696f6420686173206e6f74207965742070617373656420616e642064657060848201527f6f7369746f72207761732064656c656761746564207768656e2077697468647260a48201526d185dd85b081a5b9a5d1a585d195960921b60c482015260e401610723565b611c0260a08601608087016149f3565b6001600160a01b0316336001600160a01b031614611cbd5760405162461bcd60e51b815260206004820152606660248201527f44656c65676174696f6e4d616e616765722e636f6d706c65746551756575656460448201527f5769746864726177616c3a206f6e6c792073706563696669656420776974686460648201527f72617765722063616e20636f6d706c6574652061207175657565642077697468608482015265191c985dd85b60d21b60a482015260c401610723565b600082815260cd6020526040812080546001600160e01b0319169055611ce386806151b5565b9150508415611df35760005b81811015611ded57611d0187806151b5565b82818110611d1157611d11614deb565b9050602002016020810190611d2691906149f3565b6001600160a01b031663d9caed128460400151898060200190611d4991906151b5565b85818110611d5957611d59614deb565b9050602002016020810190611d6e91906149f3565b611d7b60408c018c6151b5565b86818110611d8b57611d8b614deb565b905060200201356040518463ffffffff1660e01b8152600401611db093929190614e01565b600060405180830381600087803b158015611dca57600080fd5b505af1158015611dde573d6000803e3d6000fd5b50505050806001019050611cef565b50611e69565b60005b81811015611e67576040830151611e5f90611e1189806151b5565b84818110611e2157611e21614deb565b9050602002016020810190611e3691906149f3565b611e4360408b018b6151b5565b85818110611e5357611e53614deb565b90506020020135613cbf565b600101611df6565b505b60408201516001600160a01b0316611e8760808801606089016149f3565b6001600160a01b03167f68c822b7070b88d8b19e597c8468af2178f99568172a673cff038bd572932d9f85604051611ec191815260200190565b60405180910390a35050600160975550505050565b611ede613c43565b60005b8181101561161a57600160cf6000858585818110611f0157611f01614deb565b9050602002016020810190611f1691906149f3565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580611f4881615172565b915050611ee1565b611f586133ba565b611f6860e0830160c084016149f3565b6040516372c1cc1b60e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e58398369060240160206040518083038186803b158015611fc957600080fd5b505afa158015611fdd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120019190614eb4565b1561201e5760405162461bcd60e51b815260040161072390614ed1565b600260975414156120415760405162461bcd60e51b815260040161072390614db4565b600260975560d0546001600160a01b031633146120705760405162461bcd60e51b815260040161072390614d6f565b600061207e61030785615166565b600081815260cd60209081526040918290208251606081018452905463ffffffff8082168352600160201b820416928201839052600160401b90046001600160a01b0316928101929092529192509061214d5760405162461bcd60e51b815260206004820152604560248201527f496e766573746d656e744d616e616765722e636f6d706c65746551756575656460448201527f5769746864726177616c3a207769746864726177616c20646f6573206e6f7420606482015264195e1a5cdd60da1b608482015260a401610723565b806020015163ffffffff164263ffffffff161015806121845750600061217960e0870160c088016149f3565b6001600160a01b0316145b6122595760405162461bcd60e51b815260206004820152608e60248201527f496e766573746d656e744d616e616765722e636f6d706c65746551756575656460448201527f5769746864726177616c3a207769746864726177616c2077616974696e67207060648201527f6572696f6420686173206e6f74207965742070617373656420616e642064657060848201527f6f7369746f72207761732064656c656761746564207768656e2077697468647260a48201526d185dd85b081a5b9a5d1a585d195960921b60c482015260e401610723565b61226960a08601608087016149f3565b6001600160a01b0316866001600160a01b0316146123245760405162461bcd60e51b815260206004820152606660248201527f496e766573746d656e744d616e616765722e636f6d706c65746551756575656460448201527f5769746864726177616c3a206f6e6c792073706563696669656420776974686460648201527f72617765722063616e20636f6d706c6574652061207175657565642077697468608482015265191c985dd85b60d21b60a482015260c401610723565b600082815260cd6020526040812080546001600160e01b031916905561234a86806151b5565b915050841561245a5760005b818110156124545761236887806151b5565b8281811061237857612378614deb565b905060200201602081019061238d91906149f3565b6001600160a01b031663d9caed1284604001518980602001906123b091906151b5565b858181106123c0576123c0614deb565b90506020020160208101906123d591906149f3565b6123e260408c018c6151b5565b868181106123f2576123f2614deb565b905060200201356040518463ffffffff1660e01b815260040161241793929190614e01565b600060405180830381600087803b15801561243157600080fd5b505af1158015612445573d6000803e3d6000fd5b50505050806001019050612356565b50612482565b60005b8181101561248057604083015161247890611e1189806151b5565b60010161245d565b505b60408201516001600160a01b03166124a060808801606089016149f3565b6001600160a01b03167f68c822b7070b88d8b19e597c8468af2178f99568172a673cff038bd572932d9f856040516124da91815260200190565b60405180910390a3505060016097555050505050565b6040516372c1cc1b60e11b815233600482018190526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e58398369060240160206040518083038186803b15801561255457600080fd5b505afa158015612568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258c9190614eb4565b156125a95760405162461bcd60e51b815260040161072390614ed1565b600260975414156125cc5760405162461bcd60e51b815260040161072390614db4565b60026097556001600160a01b038516600090815260cf6020526040902054859060ff1661262e5760405162461bcd60e51b815260206004820152601060248201526f1393d517d25397d5d2125511531254d560821b6044820152606401610723565b61263a33878787613562565b60016097559695505050505050565b600082815260cd6020526040902054600160201b900463ffffffff908116146127145760405162461bcd60e51b815260206004820152606b60248201527f44656c65676174696f6e4d616e616765722e737461727451756575656457697460448201527f6864726177616c57616974696e67506572696f643a205769746864726177616c60648201527f207374616b6520696e61637469766520636c61696d2068617320616c7265616460848201526a79206265656e206d61646560a81b60a482015260c401610723565b600082815260cd6020526040902054600160401b90046001600160a01b031633146127c25760405162461bcd60e51b815260206004820152605260248201527f44656c65676174696f6e4d616e616765722e737461727451756575656457697460448201527f6864726177616c57616974696e67506572696f643a2053656e646572206973206064820152713737ba103a3432903bb4ba34323930bbb2b960711b608482015260a401610723565b600082815260cd602052604090205463ffffffff1642116128b05760405162461bcd60e51b815260206004820152609060248201527f44656c65676174696f6e4d616e616765722e737461727451756575656457697460448201527f6864726177616c57616974696e67506572696f643a205374616b65206d61792060648201527f7374696c6c206265207375626a65637420746f20736c617368696e672062617360848201527f6564206f6e206e6577207461736b732e205761697420746f207365742073746160a48201526f35b2a4b730b1ba34bb32a0b33a32b91760811b60c482015260e401610723565b6128be6118c1600a4261518d565b600092835260cd6020526040909220805463ffffffff93909316600160201b0267ffffffff00000000199093169290921790915550565b6128fd6133ba565b612905613c43565b600260975414156129285760405162461bcd60e51b815260040161072390614db4565b6002609755600061293b61030783615166565b600081815260cd6020526040902054909150600160201b900463ffffffff166129d75760405162461bcd60e51b815260206004820152604260248201527f44656c65676174696f6e4d616e616765722e736c61736851756575656457697460448201527f6864726177616c3a207769746864726177616c20646f6573206e6f74206578696064820152611cdd60f21b608482015260a401610723565b600081815260cd6020526040902054600160401b90046001600160a01b03161580612ab357506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663e5839836612a3c60808501606086016149f3565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015612a7b57600080fd5b505afa158015612a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab39190614eb4565b612b675760405162461bcd60e51b815260206004820152607360248201527f44656c65676174696f6e4d616e616765722e736c61736851756575656457697460448201527f6864726177616c3a207769746864726177616c20686173206e6f74206265656e60648201527f207375636365737366756c6c79206368616c6c656e676564206f72206465706f60848201527239b4ba37b91034b9903737ba10333937bd32b760691b60a482015260c401610723565b600081815260cd6020526040812080546001600160e01b0319169055612b8d83806151b5565b9050905060005b81811015612c8b57612ba684806151b5565b82818110612bb657612bb6614deb565b9050602002016020810190612bcb91906149f3565b6001600160a01b031663d9caed1286612be760208801886151b5565b85818110612bf757612bf7614deb565b9050602002016020810190612c0c91906149f3565b612c1960408901896151b5565b86818110612c2957612c29614deb565b905060200201356040518463ffffffff1660e01b8152600401612c4e93929190614e01565b600060405180830381600087803b158015612c6857600080fd5b505af1158015612c7c573d6000803e3d6000fd5b50505050806001019050612b94565b50506001609755505050565b61191133613b40565b6001600160a01b038116600090815260cc6020526040812054606091829190816001600160401b03811115612cd757612cd7614572565b604051908082528060200260200182016040528015612d00578160200160208202803683370190505b50905060005b82811015612d91576001600160a01b038616600090815260cb6020908152604080832060cc9092528220805491929184908110612d4557612d45614deb565b60009182526020808320909101546001600160a01b031683528201929092526040019020548251839083908110612d7e57612d7e614deb565b6020908102919091010152600101612d06565b5060cc6000866001600160a01b03166001600160a01b031681526020019081526020016000208181805480602002602001604051908101604052809291908181526020018280548015612e0d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612def575b50505050509150935093505050915091565b6000612e296133ba565b6040516372c1cc1b60e11b81523360048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e58398369060240160206040518083038186803b158015612e8b57600080fd5b505afa158015612e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec39190614eb4565b15612ee05760405162461bcd60e51b815260040161072390614ed1565b60026097541415612f035760405162461bcd60e51b815260040161072390614db4565b600260975560405162461bcd60e51b815260206004820152603260248201527f54737344656c65676174696f6e4d616e616765723a207175657565576974686460448201527103930bbb0b61034b9903234b9b0b13632b2160751b6064820152608401610723565b60d0546000906001600160a01b03163314612f985760405162461bcd60e51b815260040161072390614d6f565b506001600160a01b038116600090815260ce60205260409020545b919050565b6040516336b87bd760e11b81526001600160a01b0383811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636d70f7ae9060240160206040518083038186803b15801561301e57600080fd5b505afa158015613032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130569190614eb4565b1561319b5760405163778e55f360e01b81526001600160a01b03848116600483015283811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063778e55f39060440160206040518083038186803b1580156130c957600080fd5b505afa1580156130dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310191906151fe565b60405163f3e7387560e01b8152600481018290529091506000906001600160a01b0385169063f3e7387590602401602060405180830381600087803b15801561314957600080fd5b505af115801561315d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318191906151fe565b905060d25481111561319857600192505050610754565b50505b50600092915050565b600054610100900460ff16158080156131c45750600054600160ff909116105b806131de5750303b1580156131de575060005460ff166001145b6131fa5760405162461bcd60e51b815260040161072390615004565b6000805460ff19166001179055801561321d576000805461ff0019166101001790555b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866604051806040016040528060068152602001654d616e746c6560d01b815250463060405160200161327294939291906150aa565b60408051601f19818403018152919052805160209091012060c95561329682613608565b80156132dc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6132e8613c43565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b613312613c43565b60d255565b61331f613c43565b6001600160a01b0381166133845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610723565b61338d81613608565b50565b613398613c43565b60d080546001600160a01b0319166001600160a01b0392909216919091179055565b60655460ff16156119115760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610723565b600081613477576040805162461bcd60e51b81526020600482015260248101919091527f44656c65676174696f6e4d616e616765722e5f72656d6f76655368617265733a60448201527f207368617265416d6f756e742073686f756c64206e6f74206265207a65726f216064820152608401610723565b6001600160a01b03808616600090815260cb60209081526040808320938716835292905220548083111561350b5760405162461bcd60e51b815260206004820152603560248201527f44656c65676174696f6e4d616e616765722e5f72656d6f76655368617265733a604482015274040e6d0c2e4ca82dadeeadce840e8dede40d0d2ced605b1b6064820152608401610723565b6001600160a01b03808716600090815260cb6020908152604080832093881683529290522083820390819055908314156135545761354a868686613f08565b600191505061355a565b60009150505b949350505050565b60006135796001600160a01b038416868685614164565b604051638340f54960e01b81526001600160a01b03851690638340f549906135a990889087908790600401614e01565b602060405180830381600087803b1580156135c357600080fd5b505af11580156135d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135fb91906151fe565b905061355a858583613cbf565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604051631976849960e21b81526001600160a01b0384811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906365da12649060240160206040518083038186803b1580156136c057600080fd5b505afa1580156136d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f891906150ff565b604051633e28391d60e01b81526001600160a01b0386811660048301529192507f000000000000000000000000000000000000000000000000000000000000000090911690633e28391d9060240160206040518083038186803b15801561375e57600080fd5b505afa158015613772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137969190614eb4565b15613b3a5760d15460405163b57388d360e01b81526001600160a01b0383811660048301529091169063b57388d390602401602060405180830381600087803b1580156137e257600080fd5b505af11580156137f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061381a9190614eb4565b15613b3a5760d0546040516314bfb52760e01b81526001600160a01b038381166004830152909116906314bfb52790602401602060405180830381600087803b15801561386657600080fd5b505af115801561387a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061389e9190614eb4565b156138f65760405162461bcd60e51b815260206004820152602260248201527f746865206f70657261746f72206973206e6f7420696e206a61696c2073746174604482015261757360f01b6064820152608401610723565b60405163778e55f360e01b81526001600160a01b038281166004830152848116602483015260009184917f0000000000000000000000000000000000000000000000000000000000000000169063778e55f39060440160206040518083038186803b15801561396457600080fd5b505afa158015613978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061399c91906151fe565b6139a69190615217565b60405163f3e7387560e01b8152600481018290529091506000906001600160a01b0386169063f3e7387590602401602060405180830381600087803b1580156139ee57600080fd5b505af1158015613a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2691906151fe565b60d1546040516368fe7d2360e01b81526001600160a01b0386811660048301529293509116906368fe7d2390602401602060405180830381600087803b158015613a6f57600080fd5b505af1158015613a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa79190614eb4565b15613b375760d2548111613b375760405162461bcd60e51b815260206004820152604b60248201527f756e61626c652077697468647261772064756520746f206f70657261746f722760448201527f7320726573742073686172657320736d616c6c6572207468616e206d696e692060648201526a1c995c5d5a5c995b595b9d60aa1b608482015260a401610723565b50505b50505050565b6001600160a01b038116600090815260cc602052604090205415613bcc5760405162461bcd60e51b815260206004820152603c60248201527f496e766573746d656e744d616e616765722e5f756e64656c65676174653a206460448201527f65706f7369746f722068617320616374697665206465706f73697473000000006064820152608401610723565b6040516336a2fa1960e21b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063da8be86490602401600060405180830381600087803b158015613c2f57600080fd5b505af1158015610d12573d6000803e3d6000fd5b6033546001600160a01b031633146119115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610723565b60008163ffffffff168363ffffffff1611613cb857816115a2565b5090919050565b80613d325760405162461bcd60e51b815260206004820152603860248201527f44656c65676174696f6e4d616e616765722e5f6164645368617265733a20736860448201527f617265732073686f756c64206e6f74206265207a65726f2100000000000000006064820152608401610723565b6001600160a01b03808416600090815260cb6020908152604080832093861683529290522054613e45576001600160a01b038316600090815260cc60209081526040909120541115613e065760405162461bcd60e51b815260206004820152605160248201527f44656c65676174696f6e4d616e616765722e5f6164645368617265733a20646560448201527f706f73697420776f756c6420657863656564204d41585f494e564553544f525f6064820152700888a988a8e82a8929e9cbe988a9c8ea89607b1b608482015260a401610723565b6001600160a01b03838116600090815260cc602090815260408220805460018101825590835291200180546001600160a01b0319169184169190911790555b6001600160a01b03808416600090815260cb6020908152604080832093861683529290529081208054839290613e7c90849061514e565b9091555050604051631452b9d760e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906328a573ae90613ed190869086908690600401614e01565b600060405180830381600087803b158015613eeb57600080fd5b505af1158015613eff573d6000803e3d6000fd5b50505050505050565b6001600160a01b03838116600090815260cc6020526040902080549183169184908110613f3757613f37614deb565b6000918252602090912001546001600160a01b03161415613ff8576001600160a01b038316600090815260cc602052604090208054613f7890600190615217565b81548110613f8857613f88614deb565b60009182526020808320909101546001600160a01b03868116845260cc9092526040909220805491909216919084908110613fc557613fc5614deb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550614116565b6001600160a01b038316600090815260cc6020526040812054905b81811015614113576001600160a01b03858116600090815260cc602052604090208054918516918390811061404a5761404a614deb565b6000918252602090912001546001600160a01b0316141561410b576001600160a01b038516600090815260cc60205260409020805461408b90600190615217565b8154811061409b5761409b614deb565b60009182526020808320909101546001600160a01b03888116845260cc90925260409092208054919092169190839081106140d8576140d8614deb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550614113565b600101614013565b50505b6001600160a01b038316600090815260cc6020526040902080548061413d5761413d61522e565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b613b3a846323b872dd60e01b85858560405160240161418593929190614e01565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152600061420c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142899092919063ffffffff16565b80519091501561161a578080602001905181019061422a9190614eb4565b61161a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610723565b606061355a848460008585843b6142e25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610723565b600080866001600160a01b031685876040516142fe9190615244565b60006040518083038185875af1925050503d806000811461433b576040519150601f19603f3d011682016040523d82523d6000602084013e614340565b606091505b509150915061435082828661435b565b979650505050505050565b6060831561436a5750816115a2565b82511561437a5782518084602001fd5b8160405162461bcd60e51b81526004016107239190615260565b6001600160a01b038116811461338d57600080fd5b8035612fb381614394565b600080604083850312156143c757600080fd5b82356143d281614394565b915060208301356143e281614394565b809150509250929050565b60008083601f8401126143ff57600080fd5b5081356001600160401b0381111561441657600080fd5b6020830191508360208260051b850101111561443157600080fd5b9250929050565b60008060008060008060008060008060c08b8d03121561445757600080fd5b6144608b6143a9565b995061446e60208c016143a9565b985060408b01356001600160401b038082111561448a57600080fd5b6144968e838f016143ed565b909a50985060608d01359150808211156144af57600080fd5b6144bb8e838f016143ed565b909850965060808d01359150808211156144d457600080fd5b6144e08e838f016143ed565b909650945060a08d01359150808211156144f957600080fd5b506145068d828e016143ed565b915080935050809150509295989b9194979a5092959850565b6000806000806080858703121561453557600080fd5b843561454081614394565b9350602085013561455081614394565b925060408501359150606085013561456781614394565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156145aa576145aa614572565b60405290565b604051601f8201601f191681016001600160401b03811182821017156145d8576145d8614572565b604052919050565b60006001600160401b038211156145f9576145f9614572565b5060051b60200190565b600082601f83011261461457600080fd5b81356020614629614624836145e0565b6145b0565b82815260059290921b8401810191818101908684111561464857600080fd5b8286015b8481101561466c57803561465f81614394565b835291830191830161464c565b509695505050505050565b600082601f83011261468857600080fd5b81356020614698614624836145e0565b82815260059290921b840181019181810190868411156146b757600080fd5b8286015b8481101561466c57803583529183019183016146bb565b80356001600160601b0381168114612fb357600080fd5b6000604082840312156146fb57600080fd5b604051604081018181106001600160401b038211171561471d5761471d614572565b604052905080823561472e81614394565b815261473c602084016146d2565b60208201525092915050565b600060e0828403121561475a57600080fd5b614762614588565b905081356001600160401b038082111561477b57600080fd5b61478785838601614603565b8352602084013591508082111561479d57600080fd5b6147a985838601614603565b602084015260408401359150808211156147c257600080fd5b506147cf84828501614677565b6040830152506147e1606083016143a9565b60608201526147f383608084016146e9565b608082015261480460c083016143a9565b60a082015292915050565b60006020828403121561482157600080fd5b81356001600160401b0381111561483757600080fd5b61355a84828501614748565b6000806040838503121561485657600080fd5b823561486181614394565b946020939093013593505050565b60006040828403121561488157600080fd5b50919050565b60008060008060008060008060008060e08b8d0312156148a657600080fd5b6148af8b6143a9565b995060208b01356001600160401b03808211156148cb57600080fd5b6148d78e838f016143ed565b909b50995060408d01359150808211156148f057600080fd5b6148fc8e838f016143ed565b909950975060608d013591508082111561491557600080fd5b6149218e838f016143ed565b909750955060808d013591508082111561493a57600080fd5b506149478d828e016143ed565b909450925061495b90508c60a08d0161486f565b90509295989b9194979a5092959850565b600060e0828403121561488157600080fd5b60006020828403121561499057600080fd5b81356001600160401b038111156149a657600080fd5b61355a8482850161496c565b600080602083850312156149c557600080fd5b82356001600160401b038111156149db57600080fd5b6149e7858286016143ed565b90969095509350505050565b600060208284031215614a0557600080fd5b81356115a281614394565b803563ffffffff81168114612fb357600080fd5b600080600060608486031215614a3957600080fd5b833592506020840135614a4b81614394565b9150614a5960408501614a10565b90509250925092565b801515811461338d57600080fd5b8035612fb381614a62565b60008060408385031215614a8e57600080fd5b82356001600160401b03811115614aa457600080fd5b614ab08582860161496c565b92505060208301356143e281614a62565b600080600060608486031215614ad657600080fd5b8335614ae181614394565b925060208401356001600160401b03811115614afc57600080fd5b614b088682870161496c565b9250506040840135614b1981614a62565b809150509250925092565b600080600060608486031215614b3957600080fd5b8335614b4481614394565b92506020840135614b5481614394565b929592945050506040919091013590565b60008060408385031215614b7857600080fd5b82359150614b8860208401614a10565b90509250929050565b60008060408385031215614ba457600080fd5b8235614baf81614394565b915060208301356001600160401b03811115614bca57600080fd5b614bd68582860161496c565b9150509250929050565b600081518084526020808501945080840160005b83811015614c195781516001600160a01b031687529582019590820190600101614bf4565b509495945050505050565b600081518084526020808501945080840160005b83811015614c1957815187529582019590820190600101614c38565b604081526000614c676040830185614be0565b8281036020840152614c798185614c24565b95945050505050565b600060208284031215614c9457600080fd5b5035919050565b60008060008060008060008060008060e08b8d031215614cba57600080fd5b8a356001600160401b0380821115614cd157600080fd5b614cdd8e838f016143ed565b909c509a5060208d0135915080821115614cf657600080fd5b614d028e838f016143ed565b909a50985060408d0135915080821115614d1b57600080fd5b614d278e838f016143ed565b909850965060608d0135915080821115614d4057600080fd5b50614d4d8d828e016143ed565b9095509350614d6190508c60808d0161486f565b915061495b60c08c01614a70565b60208082526025908201527f636f6e74726163742063616c6c206973206e6f74207374616b696e6720736c616040820152647368696e6760d81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825260606020808401829052908301869052600091879160808501845b89811015614e74578435614e6081614394565b841682529382019390820190600101614e4d565b5085810360408701528681526001600160fb1b03871115614e9457600080fd5b8660051b9350838883830137600093010191825250979650505050505050565b600060208284031215614ec657600080fd5b81516115a281614a62565b60208082526056908201527f44656c65676174696f6e4d616e616765722e6f6e6c794e6f7446726f7a656e3a60408201527f207374616b657220686173206265656e2066726f7a656e20616e64206d6179206060820152756265207375626a65637420746f20736c617368696e6760501b608082015260a00190565b60e081526000614f6060e0830189614be0565b82810360208481019190915288518083528982019282019060005b81811015614fa05784516001600160a01b031683529383019391830191600101614f7b565b50508481036040860152614fb4818a614c24565b6001600160a01b038981166060880152885116608087015260208801516001600160601b031660a08701529350614fea92505050565b6001600160a01b03831660c0830152979650505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60005b8381101561506d578181015183820152602001615055565b83811115613b3a5750506000910152565b60008151808452615096816020860160208601615052565b601f01601f19169290920160200192915050565b8481526080602082015260006150c3608083018661507e565b6040830194909452506001600160a01b039190911660609091015292915050565b6000602082840312156150f657600080fd5b6115a2826146d2565b60006020828403121561511157600080fd5b81516115a281614394565b60006040828403121561512e57600080fd5b6115a283836146e9565b634e487b7160e01b600052601160045260246000fd5b6000821982111561516157615161615138565b500190565b60006107543683614748565b600060001982141561518657615186615138565b5060010190565b600063ffffffff8083168185168083038211156151ac576151ac615138565b01949350505050565b6000808335601e198436030181126151cc57600080fd5b8301803591506001600160401b038211156151e657600080fd5b6020019150600581901b360382131561443157600080fd5b60006020828403121561521057600080fd5b5051919050565b60008282101561522957615229615138565b500390565b634e487b7160e01b600052603160045260246000fd5b60008251615256818460208701615052565b9190910192915050565b6020815260006115a2602083018461507e56fea2646970667358221220f876894b48fa0555bab70731b1c6fb4868f51ac69782424910f8a8bc2ee1c1fe64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061027f5760003560e01c806388fdccf91161015c578063a49b5234116100ce578063d6495d5f11610087578063d6495d5f1461067a578063df5cf7231461068d578063eb4af045146106b4578063f1887684146106c7578063f2fde38b146106d0578063fd3eb81f146106e357600080fd5b8063a49b5234146105f4578063a7c373bc14610607578063b0eeb55e1461061a578063bb5807741461062d578063c4d66de814610654578063cf4c8a7b1461066757600080fd5b806394f649dd1161012057806394f649dd146104f05780639887bd231461051157806399f5371b146105195780639b19251a146105895780639cb600ba146105ac578063a319af61146105d757600080fd5b806388fdccf91461049e5780638941086c146104b15780638da5cb5b146104c457806390530863146104d557806392ab89bb146104e857600080fd5b80635350262e116101f5578063715018a6116101b9578063715018a614610414578063785112021461041c5780637ecebe001461042f5780637f6497831461044f578063863111ac146104625780638885a1ec1461047557600080fd5b80635350262e146103a0578063548db174146103c357806356631028146103d65780635c975abb146103f657806363f1dcce1461040157600080fd5b80633644e515116102475780633644e5151461030c5780633fd228f514610315578063423b3cf81461034057806348825e9414610353578063520381c01461037a578063529075a51461038d57600080fd5b806305579ccc1461028457806306f1f684146102aa5780631abeb0d9146102bf57806320606b70146102d2578063231c7f0d146102f9575b600080fd5b6102976102923660046143b4565b6106f6565b6040519081526020015b60405180910390f35b6102bd6102b8366004614438565b61075a565b005b6102976102cd36600461451f565b61099a565b6102977f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61029761030736600461480f565b610b20565b61029760c95481565b60d154610328906001600160a01b031681565b6040516001600160a01b0390911681526020016102a1565b61032861034e366004614843565b610b6d565b6102977f0a564d4cfe5cb0d4ee082aab2ca54b8c48e129485a8f7c77766ab5ef0c3566f181565b6102bd61038836600461451f565b610ba5565b61029761039b366004614887565b610d19565b6103b36103ae36600461497e565b6113e6565b60405190151581526020016102a1565b6102bd6103d13660046149b2565b6115a9565b6102976103e43660046149f3565b60ce6020526000908152604090205481565b60655460ff166103b3565b6102bd61040f366004614a24565b61161f565b6102bd6118ff565b6102bd61042a366004614a7b565b611913565b61029761043d3660046149f3565b60ca6020526000908152604090205481565b6102bd61045d3660046149b2565b611ed6565b6102bd610470366004614ac1565b611f50565b6102976104833660046149f3565b6001600160a01b0316600090815260cc602052604090205490565b6102976104ac366004614b24565b6124f0565b6102bd6104bf366004614b65565b612649565b6033546001600160a01b0316610328565b6102bd6104e3366004614b91565b6128f5565b6102bd612c97565b6105036104fe3660046149f3565b612ca0565b6040516102a1929190614c54565b610297601e81565b61055d610527366004614c82565b60cd6020526000908152604090205463ffffffff80821691600160201b810490911690600160401b90046001600160a01b031683565b6040805163ffffffff94851681529390921660208401526001600160a01b0316908201526060016102a1565b6103b36105973660046149f3565b60cf6020526000908152604090205460ff1681565b6102976105ba3660046143b4565b60cb60209081526000928352604080842090915290825290205481565b6105df600a81565b60405163ffffffff90911681526020016102a1565b610297610602366004614c9b565b612e1f565b6102976106153660046149f3565b612f6b565b6103b36106283660046143b4565b612fb8565b6103287f000000000000000000000000000000000000000000000000000000000000000081565b6102bd6106623660046149f3565b6131a4565b60d054610328906001600160a01b031681565b6102bd6106883660046149f3565b6132e0565b6103287f000000000000000000000000000000000000000000000000000000000000000081565b6102bd6106c2366004614c82565b61330a565b61029760d25481565b6102bd6106de3660046149f3565b613317565b6102bd6106f13660046149f3565b613390565b60d0546000906001600160a01b0316331461072c5760405162461bcd60e51b815260040161072390614d6f565b60405180910390fd5b506001600160a01b03808316600090815260cb60209081526040808320938516835292905220545b92915050565b6107626133ba565b60d0546001600160a01b0316331461078c5760405162461bcd60e51b815260040161072390614d6f565b600260975414156107af5760405162461bcd60e51b815260040161072390614db4565b6002609755600087815b81811015610900576108238d8888868181106107d7576107d7614deb565b905060200201358d8d858181106107f0576107f0614deb565b905060200201602081019061080591906149f3565b88888681811061081757610817614deb565b90506020020135613400565b1561082f578260010192505b8a8a8281811061084157610841614deb565b905060200201602081019061085691906149f3565b6001600160a01b031663d9caed128d8b8b8581811061087757610877614deb565b905060200201602081019061088c91906149f3565b88888681811061089e5761089e614deb565b905060200201356040518463ffffffff1660e01b81526004016108c393929190614e01565b600060405180830381600087803b1580156108dd57600080fd5b505af11580156108f1573d6000803e3d6000fd5b505050508060010190506107b9565b50604051631608124760e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635820491c90610955908f908e908e908a908a90600401614e25565b600060405180830381600087803b15801561096f57600080fd5b505af1158015610983573d6000803e3d6000fd5b505060016097555050505050505050505050505050565b6040516372c1cc1b60e11b81526001600160a01b03808316600483015260009183917f0000000000000000000000000000000000000000000000000000000000000000169063e58398369060240160206040518083038186803b158015610a0057600080fd5b505afa158015610a14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a389190614eb4565b15610a555760405162461bcd60e51b815260040161072390614ed1565b60026097541415610a785760405162461bcd60e51b815260040161072390614db4565b60026097556001600160a01b038616600090815260cf6020526040902054869060ff16610ada5760405162461bcd60e51b815260206004820152601060248201526f1393d517d25397d5d2125511531254d560821b6044820152606401610723565b60d0546001600160a01b03163314610b045760405162461bcd60e51b815260040161072390614d6f565b610b1084888888613562565b6001609755979650505050505050565b80516020808301516040808501516060860151608087015160a08801519351600097610b50979096959101614f4d565b604051602081830303815290604052805190602001209050919050565b60cc6020528160005260406000208181548110610b8957600080fd5b6000918252602090912001546001600160a01b03169150829050565b600054610100900460ff1615808015610bc55750600054600160ff909116105b80610bdf5750303b158015610bdf575060005460ff166001145b610bfb5760405162461bcd60e51b815260040161072390615004565b6000805460ff191660011790558015610c1e576000805461ff0019166101001790555b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866604051806040016040528060068152602001654d616e746c6560d01b8152504630604051602001610c7394939291906150aa565b60408051601f19818403018152919052805160209091012060c955610c9782613608565b60d080546001600160a01b038088166001600160a01b03199283161790925560d180549287169290911691909117905560d28390558015610d12576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6000610d236133ba565b6040516372c1cc1b60e11b81526001600160a01b03808d1660048301528c917f00000000000000000000000000000000000000000000000000000000000000009091169063e58398369060240160206040518083038186803b158015610d8857600080fd5b505afa158015610d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc09190614eb4565b15610ddd5760405162461bcd60e51b815260040161072390614ed1565b60d0546001600160a01b03163314610e075760405162461bcd60e51b815260040161072390614d6f565b60026097541415610e2a5760405162461bcd60e51b815260040161072390614db4565b60026097556001600160a01b038c16600090815260ce60209081526040918290205491610e5c919086019086016150e4565b6001600160601b031614610ed85760405162461bcd60e51b815260206004820152603b60248201527f496e766573746d656e744d616e616765722e717565756557697468647261776160448201527f6c3a2070726f7669646564206e6f6e636520696e636f727265637400000000006064820152608401610723565b60018814610f245760405162461bcd60e51b81526020600482015260196024820152786f6e6c79207473732064656c65676174696f6e20736861726560381b6044820152606401610723565b60018414610f705760405162461bcd60e51b81526020600482015260196024820152786f6e6c79207473732064656c65676174696f6e20736861726560381b6044820152606401610723565b6001600160a01b03808d16600081815260ce60205260408082208054600101905551631976849960e21b81526004810192909252917f000000000000000000000000000000000000000000000000000000000000000016906365da12649060240160206040518083038186803b158015610fe957600080fd5b505afa158015610ffd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102191906150ff565b905061106e8d8b8b600081811061103a5761103a614deb565b905060200201602081019061104f91906149f3565b8888600081811061106257611062614deb565b9050602002013561365a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635820491c8e8c8c8a8a6040518663ffffffff1660e01b81526004016110c2959493929190614e25565b600060405180830381600087803b1580156110dc57600080fd5b505af11580156110f0573d6000803e3d6000fd5b5050505061114d8d8d8d600081811061110b5761110b614deb565b905060200201358c8c600081811061112557611125614deb565b905060200201602081019061113a91906149f3565b8989600081811061081757610817614deb565b506040805160e060208c02808301820190935260c082018c815260009383928f918f918291908601908490808284376000920191909152505050908252506040805160208c810282810182019093528c82529283019290918d918d9182918501908490808284376000920191909152505050908252506040805160208a810282810182019093528a82529283019290918b918b918291850190849080828437600081840152601f19601f8201169050808301925050505050505081526020018f6001600160a01b031681526020018680360381019061122c919061511c565b8152602001836001600160a01b03168152509050600061124b82610b20565b90506040518060600160405280601e42611265919061514e565b63ffffffff16815260200163ffffffff8016815260200187600001602081019061128f91906149f3565b6001600160a01b031681525060cd600083815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160086101000a8154816001600160a01b0302191690836001600160a01b0316021790555090505060008f905060cc6000826001600160a01b03166001600160a01b03168152602001908152602001600020805490506000141561136b5761136b81613b40565b6001600160a01b03841661138260208901896149f3565b6001600160a01b0316826001600160a01b03167f4d91ce160b707b07397f4ad8150b1535d0c2c34d7376c0fe7a227fc088ad6214856040516113c691815260200190565b60405180910390a45060016097559e9d5050505050505050505050505050565b6000806113f561030784615166565b600081815260cd6020526040902054909150600160201b900463ffffffff166114975760405162461bcd60e51b815260206004820152604860248201527f44656c65676174696f6e4d616e616765722e63616e436f6d706c65746551756560448201527f7565645769746864726177616c3a207769746864726177616c20646f6573206e6064820152671bdd08195e1a5cdd60c21b608482015260a401610723565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663e58398366114d660e0860160c087016149f3565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561151557600080fd5b505afa158015611529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154d9190614eb4565b1561155b5750600092915050565b600081815260cd602052604090205463ffffffff600160201b9091048116429091161015806115a25750600061159760e0850160c086016149f3565b6001600160a01b0316145b9392505050565b6115b1613c43565b60005b8181101561161a5760cf60008484848181106115d2576115d2614deb565b90506020020160208101906115e791906149f3565b6001600160a01b031681526020810191909152604001600020805460ff191690558061161281615172565b9150506115b4565b505050565b60d0546001600160a01b031633146116495760405162461bcd60e51b815260040161072390614d6f565b600083815260cd6020526040902054600160201b900463ffffffff908116146117145760405162461bcd60e51b815260206004820152606b60248201527f496e766573746d656e744d616e616765722e737461727451756575656457697460448201527f6864726177616c57616974696e67506572696f643a205769746864726177616c60648201527f207374616b6520696e61637469766520636c61696d2068617320616c7265616460848201526a79206265656e206d61646560a81b60a482015260c401610723565b600083815260cd60205260409020546001600160a01b03838116600160401b90920416146117c55760405162461bcd60e51b815260206004820152605260248201527f496e766573746d656e744d616e616765722e737461727451756575656457697460448201527f6864726177616c57616974696e67506572696f643a2053656e646572206973206064820152713737ba103a3432903bb4ba34323930bbb2b960711b608482015260a401610723565b600083815260cd602052604090205463ffffffff1642116118b35760405162461bcd60e51b815260206004820152609060248201527f496e766573746d656e744d616e616765722e737461727451756575656457697460448201527f6864726177616c57616974696e67506572696f643a205374616b65206d61792060648201527f7374696c6c206265207375626a65637420746f20736c617368696e672062617360848201527f6564206f6e206e6577207461736b732e205761697420746f207365742073746160a48201526f35b2a4b730b1ba34bb32a0b33a32b91760811b60c482015260e401610723565b6118c76118c1600a4261518d565b82613c9d565b600093845260cd6020526040909320805463ffffffff94909416600160201b0267ffffffff0000000019909416939093179092555050565b611907613c43565b6119116000613608565b565b61191b6133ba565b61192b60e0830160c084016149f3565b6040516372c1cc1b60e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e58398369060240160206040518083038186803b15801561198c57600080fd5b505afa1580156119a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c49190614eb4565b156119e15760405162461bcd60e51b815260040161072390614ed1565b60026097541415611a045760405162461bcd60e51b815260040161072390614db4565b60026097556000611a1761030785615166565b600081815260cd60209081526040918290208251606081018452905463ffffffff8082168352600160201b820416928201839052600160401b90046001600160a01b03169281019290925291925090611ae65760405162461bcd60e51b815260206004820152604560248201527f44656c65676174696f6e4d616e616765722e636f6d706c65746551756575656460448201527f5769746864726177616c3a207769746864726177616c20646f6573206e6f7420606482015264195e1a5cdd60da1b608482015260a401610723565b806020015163ffffffff164263ffffffff16101580611b1d57506000611b1260e0870160c088016149f3565b6001600160a01b0316145b611bf25760405162461bcd60e51b815260206004820152608e60248201527f44656c65676174696f6e4d616e616765722e636f6d706c65746551756575656460448201527f5769746864726177616c3a207769746864726177616c2077616974696e67207060648201527f6572696f6420686173206e6f74207965742070617373656420616e642064657060848201527f6f7369746f72207761732064656c656761746564207768656e2077697468647260a48201526d185dd85b081a5b9a5d1a585d195960921b60c482015260e401610723565b611c0260a08601608087016149f3565b6001600160a01b0316336001600160a01b031614611cbd5760405162461bcd60e51b815260206004820152606660248201527f44656c65676174696f6e4d616e616765722e636f6d706c65746551756575656460448201527f5769746864726177616c3a206f6e6c792073706563696669656420776974686460648201527f72617765722063616e20636f6d706c6574652061207175657565642077697468608482015265191c985dd85b60d21b60a482015260c401610723565b600082815260cd6020526040812080546001600160e01b0319169055611ce386806151b5565b9150508415611df35760005b81811015611ded57611d0187806151b5565b82818110611d1157611d11614deb565b9050602002016020810190611d2691906149f3565b6001600160a01b031663d9caed128460400151898060200190611d4991906151b5565b85818110611d5957611d59614deb565b9050602002016020810190611d6e91906149f3565b611d7b60408c018c6151b5565b86818110611d8b57611d8b614deb565b905060200201356040518463ffffffff1660e01b8152600401611db093929190614e01565b600060405180830381600087803b158015611dca57600080fd5b505af1158015611dde573d6000803e3d6000fd5b50505050806001019050611cef565b50611e69565b60005b81811015611e67576040830151611e5f90611e1189806151b5565b84818110611e2157611e21614deb565b9050602002016020810190611e3691906149f3565b611e4360408b018b6151b5565b85818110611e5357611e53614deb565b90506020020135613cbf565b600101611df6565b505b60408201516001600160a01b0316611e8760808801606089016149f3565b6001600160a01b03167f68c822b7070b88d8b19e597c8468af2178f99568172a673cff038bd572932d9f85604051611ec191815260200190565b60405180910390a35050600160975550505050565b611ede613c43565b60005b8181101561161a57600160cf6000858585818110611f0157611f01614deb565b9050602002016020810190611f1691906149f3565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580611f4881615172565b915050611ee1565b611f586133ba565b611f6860e0830160c084016149f3565b6040516372c1cc1b60e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063e58398369060240160206040518083038186803b158015611fc957600080fd5b505afa158015611fdd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120019190614eb4565b1561201e5760405162461bcd60e51b815260040161072390614ed1565b600260975414156120415760405162461bcd60e51b815260040161072390614db4565b600260975560d0546001600160a01b031633146120705760405162461bcd60e51b815260040161072390614d6f565b600061207e61030785615166565b600081815260cd60209081526040918290208251606081018452905463ffffffff8082168352600160201b820416928201839052600160401b90046001600160a01b0316928101929092529192509061214d5760405162461bcd60e51b815260206004820152604560248201527f496e766573746d656e744d616e616765722e636f6d706c65746551756575656460448201527f5769746864726177616c3a207769746864726177616c20646f6573206e6f7420606482015264195e1a5cdd60da1b608482015260a401610723565b806020015163ffffffff164263ffffffff161015806121845750600061217960e0870160c088016149f3565b6001600160a01b0316145b6122595760405162461bcd60e51b815260206004820152608e60248201527f496e766573746d656e744d616e616765722e636f6d706c65746551756575656460448201527f5769746864726177616c3a207769746864726177616c2077616974696e67207060648201527f6572696f6420686173206e6f74207965742070617373656420616e642064657060848201527f6f7369746f72207761732064656c656761746564207768656e2077697468647260a48201526d185dd85b081a5b9a5d1a585d195960921b60c482015260e401610723565b61226960a08601608087016149f3565b6001600160a01b0316866001600160a01b0316146123245760405162461bcd60e51b815260206004820152606660248201527f496e766573746d656e744d616e616765722e636f6d706c65746551756575656460448201527f5769746864726177616c3a206f6e6c792073706563696669656420776974686460648201527f72617765722063616e20636f6d706c6574652061207175657565642077697468608482015265191c985dd85b60d21b60a482015260c401610723565b600082815260cd6020526040812080546001600160e01b031916905561234a86806151b5565b915050841561245a5760005b818110156124545761236887806151b5565b8281811061237857612378614deb565b905060200201602081019061238d91906149f3565b6001600160a01b031663d9caed1284604001518980602001906123b091906151b5565b858181106123c0576123c0614deb565b90506020020160208101906123d591906149f3565b6123e260408c018c6151b5565b868181106123f2576123f2614deb565b905060200201356040518463ffffffff1660e01b815260040161241793929190614e01565b600060405180830381600087803b15801561243157600080fd5b505af1158015612445573d6000803e3d6000fd5b50505050806001019050612356565b50612482565b60005b8181101561248057604083015161247890611e1189806151b5565b60010161245d565b505b60408201516001600160a01b03166124a060808801606089016149f3565b6001600160a01b03167f68c822b7070b88d8b19e597c8468af2178f99568172a673cff038bd572932d9f856040516124da91815260200190565b60405180910390a3505060016097555050505050565b6040516372c1cc1b60e11b815233600482018190526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e58398369060240160206040518083038186803b15801561255457600080fd5b505afa158015612568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258c9190614eb4565b156125a95760405162461bcd60e51b815260040161072390614ed1565b600260975414156125cc5760405162461bcd60e51b815260040161072390614db4565b60026097556001600160a01b038516600090815260cf6020526040902054859060ff1661262e5760405162461bcd60e51b815260206004820152601060248201526f1393d517d25397d5d2125511531254d560821b6044820152606401610723565b61263a33878787613562565b60016097559695505050505050565b600082815260cd6020526040902054600160201b900463ffffffff908116146127145760405162461bcd60e51b815260206004820152606b60248201527f44656c65676174696f6e4d616e616765722e737461727451756575656457697460448201527f6864726177616c57616974696e67506572696f643a205769746864726177616c60648201527f207374616b6520696e61637469766520636c61696d2068617320616c7265616460848201526a79206265656e206d61646560a81b60a482015260c401610723565b600082815260cd6020526040902054600160401b90046001600160a01b031633146127c25760405162461bcd60e51b815260206004820152605260248201527f44656c65676174696f6e4d616e616765722e737461727451756575656457697460448201527f6864726177616c57616974696e67506572696f643a2053656e646572206973206064820152713737ba103a3432903bb4ba34323930bbb2b960711b608482015260a401610723565b600082815260cd602052604090205463ffffffff1642116128b05760405162461bcd60e51b815260206004820152609060248201527f44656c65676174696f6e4d616e616765722e737461727451756575656457697460448201527f6864726177616c57616974696e67506572696f643a205374616b65206d61792060648201527f7374696c6c206265207375626a65637420746f20736c617368696e672062617360848201527f6564206f6e206e6577207461736b732e205761697420746f207365742073746160a48201526f35b2a4b730b1ba34bb32a0b33a32b91760811b60c482015260e401610723565b6128be6118c1600a4261518d565b600092835260cd6020526040909220805463ffffffff93909316600160201b0267ffffffff00000000199093169290921790915550565b6128fd6133ba565b612905613c43565b600260975414156129285760405162461bcd60e51b815260040161072390614db4565b6002609755600061293b61030783615166565b600081815260cd6020526040902054909150600160201b900463ffffffff166129d75760405162461bcd60e51b815260206004820152604260248201527f44656c65676174696f6e4d616e616765722e736c61736851756575656457697460448201527f6864726177616c3a207769746864726177616c20646f6573206e6f74206578696064820152611cdd60f21b608482015260a401610723565b600081815260cd6020526040902054600160401b90046001600160a01b03161580612ab357506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663e5839836612a3c60808501606086016149f3565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015612a7b57600080fd5b505afa158015612a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab39190614eb4565b612b675760405162461bcd60e51b815260206004820152607360248201527f44656c65676174696f6e4d616e616765722e736c61736851756575656457697460448201527f6864726177616c3a207769746864726177616c20686173206e6f74206265656e60648201527f207375636365737366756c6c79206368616c6c656e676564206f72206465706f60848201527239b4ba37b91034b9903737ba10333937bd32b760691b60a482015260c401610723565b600081815260cd6020526040812080546001600160e01b0319169055612b8d83806151b5565b9050905060005b81811015612c8b57612ba684806151b5565b82818110612bb657612bb6614deb565b9050602002016020810190612bcb91906149f3565b6001600160a01b031663d9caed1286612be760208801886151b5565b85818110612bf757612bf7614deb565b9050602002016020810190612c0c91906149f3565b612c1960408901896151b5565b86818110612c2957612c29614deb565b905060200201356040518463ffffffff1660e01b8152600401612c4e93929190614e01565b600060405180830381600087803b158015612c6857600080fd5b505af1158015612c7c573d6000803e3d6000fd5b50505050806001019050612b94565b50506001609755505050565b61191133613b40565b6001600160a01b038116600090815260cc6020526040812054606091829190816001600160401b03811115612cd757612cd7614572565b604051908082528060200260200182016040528015612d00578160200160208202803683370190505b50905060005b82811015612d91576001600160a01b038616600090815260cb6020908152604080832060cc9092528220805491929184908110612d4557612d45614deb565b60009182526020808320909101546001600160a01b031683528201929092526040019020548251839083908110612d7e57612d7e614deb565b6020908102919091010152600101612d06565b5060cc6000866001600160a01b03166001600160a01b031681526020019081526020016000208181805480602002602001604051908101604052809291908181526020018280548015612e0d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612def575b50505050509150935093505050915091565b6000612e296133ba565b6040516372c1cc1b60e11b81523360048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e58398369060240160206040518083038186803b158015612e8b57600080fd5b505afa158015612e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec39190614eb4565b15612ee05760405162461bcd60e51b815260040161072390614ed1565b60026097541415612f035760405162461bcd60e51b815260040161072390614db4565b600260975560405162461bcd60e51b815260206004820152603260248201527f54737344656c65676174696f6e4d616e616765723a207175657565576974686460448201527103930bbb0b61034b9903234b9b0b13632b2160751b6064820152608401610723565b60d0546000906001600160a01b03163314612f985760405162461bcd60e51b815260040161072390614d6f565b506001600160a01b038116600090815260ce60205260409020545b919050565b6040516336b87bd760e11b81526001600160a01b0383811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636d70f7ae9060240160206040518083038186803b15801561301e57600080fd5b505afa158015613032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130569190614eb4565b1561319b5760405163778e55f360e01b81526001600160a01b03848116600483015283811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063778e55f39060440160206040518083038186803b1580156130c957600080fd5b505afa1580156130dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310191906151fe565b60405163f3e7387560e01b8152600481018290529091506000906001600160a01b0385169063f3e7387590602401602060405180830381600087803b15801561314957600080fd5b505af115801561315d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318191906151fe565b905060d25481111561319857600192505050610754565b50505b50600092915050565b600054610100900460ff16158080156131c45750600054600160ff909116105b806131de5750303b1580156131de575060005460ff166001145b6131fa5760405162461bcd60e51b815260040161072390615004565b6000805460ff19166001179055801561321d576000805461ff0019166101001790555b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866604051806040016040528060068152602001654d616e746c6560d01b815250463060405160200161327294939291906150aa565b60408051601f19818403018152919052805160209091012060c95561329682613608565b80156132dc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6132e8613c43565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b613312613c43565b60d255565b61331f613c43565b6001600160a01b0381166133845760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610723565b61338d81613608565b50565b613398613c43565b60d080546001600160a01b0319166001600160a01b0392909216919091179055565b60655460ff16156119115760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610723565b600081613477576040805162461bcd60e51b81526020600482015260248101919091527f44656c65676174696f6e4d616e616765722e5f72656d6f76655368617265733a60448201527f207368617265416d6f756e742073686f756c64206e6f74206265207a65726f216064820152608401610723565b6001600160a01b03808616600090815260cb60209081526040808320938716835292905220548083111561350b5760405162461bcd60e51b815260206004820152603560248201527f44656c65676174696f6e4d616e616765722e5f72656d6f76655368617265733a604482015274040e6d0c2e4ca82dadeeadce840e8dede40d0d2ced605b1b6064820152608401610723565b6001600160a01b03808716600090815260cb6020908152604080832093881683529290522083820390819055908314156135545761354a868686613f08565b600191505061355a565b60009150505b949350505050565b60006135796001600160a01b038416868685614164565b604051638340f54960e01b81526001600160a01b03851690638340f549906135a990889087908790600401614e01565b602060405180830381600087803b1580156135c357600080fd5b505af11580156135d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135fb91906151fe565b905061355a858583613cbf565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604051631976849960e21b81526001600160a01b0384811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906365da12649060240160206040518083038186803b1580156136c057600080fd5b505afa1580156136d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f891906150ff565b604051633e28391d60e01b81526001600160a01b0386811660048301529192507f000000000000000000000000000000000000000000000000000000000000000090911690633e28391d9060240160206040518083038186803b15801561375e57600080fd5b505afa158015613772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137969190614eb4565b15613b3a5760d15460405163b57388d360e01b81526001600160a01b0383811660048301529091169063b57388d390602401602060405180830381600087803b1580156137e257600080fd5b505af11580156137f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061381a9190614eb4565b15613b3a5760d0546040516314bfb52760e01b81526001600160a01b038381166004830152909116906314bfb52790602401602060405180830381600087803b15801561386657600080fd5b505af115801561387a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061389e9190614eb4565b156138f65760405162461bcd60e51b815260206004820152602260248201527f746865206f70657261746f72206973206e6f7420696e206a61696c2073746174604482015261757360f01b6064820152608401610723565b60405163778e55f360e01b81526001600160a01b038281166004830152848116602483015260009184917f0000000000000000000000000000000000000000000000000000000000000000169063778e55f39060440160206040518083038186803b15801561396457600080fd5b505afa158015613978573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061399c91906151fe565b6139a69190615217565b60405163f3e7387560e01b8152600481018290529091506000906001600160a01b0386169063f3e7387590602401602060405180830381600087803b1580156139ee57600080fd5b505af1158015613a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2691906151fe565b60d1546040516368fe7d2360e01b81526001600160a01b0386811660048301529293509116906368fe7d2390602401602060405180830381600087803b158015613a6f57600080fd5b505af1158015613a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa79190614eb4565b15613b375760d2548111613b375760405162461bcd60e51b815260206004820152604b60248201527f756e61626c652077697468647261772064756520746f206f70657261746f722760448201527f7320726573742073686172657320736d616c6c6572207468616e206d696e692060648201526a1c995c5d5a5c995b595b9d60aa1b608482015260a401610723565b50505b50505050565b6001600160a01b038116600090815260cc602052604090205415613bcc5760405162461bcd60e51b815260206004820152603c60248201527f496e766573746d656e744d616e616765722e5f756e64656c65676174653a206460448201527f65706f7369746f722068617320616374697665206465706f73697473000000006064820152608401610723565b6040516336a2fa1960e21b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063da8be86490602401600060405180830381600087803b158015613c2f57600080fd5b505af1158015610d12573d6000803e3d6000fd5b6033546001600160a01b031633146119115760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610723565b60008163ffffffff168363ffffffff1611613cb857816115a2565b5090919050565b80613d325760405162461bcd60e51b815260206004820152603860248201527f44656c65676174696f6e4d616e616765722e5f6164645368617265733a20736860448201527f617265732073686f756c64206e6f74206265207a65726f2100000000000000006064820152608401610723565b6001600160a01b03808416600090815260cb6020908152604080832093861683529290522054613e45576001600160a01b038316600090815260cc60209081526040909120541115613e065760405162461bcd60e51b815260206004820152605160248201527f44656c65676174696f6e4d616e616765722e5f6164645368617265733a20646560448201527f706f73697420776f756c6420657863656564204d41585f494e564553544f525f6064820152700888a988a8e82a8929e9cbe988a9c8ea89607b1b608482015260a401610723565b6001600160a01b03838116600090815260cc602090815260408220805460018101825590835291200180546001600160a01b0319169184169190911790555b6001600160a01b03808416600090815260cb6020908152604080832093861683529290529081208054839290613e7c90849061514e565b9091555050604051631452b9d760e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906328a573ae90613ed190869086908690600401614e01565b600060405180830381600087803b158015613eeb57600080fd5b505af1158015613eff573d6000803e3d6000fd5b50505050505050565b6001600160a01b03838116600090815260cc6020526040902080549183169184908110613f3757613f37614deb565b6000918252602090912001546001600160a01b03161415613ff8576001600160a01b038316600090815260cc602052604090208054613f7890600190615217565b81548110613f8857613f88614deb565b60009182526020808320909101546001600160a01b03868116845260cc9092526040909220805491909216919084908110613fc557613fc5614deb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550614116565b6001600160a01b038316600090815260cc6020526040812054905b81811015614113576001600160a01b03858116600090815260cc602052604090208054918516918390811061404a5761404a614deb565b6000918252602090912001546001600160a01b0316141561410b576001600160a01b038516600090815260cc60205260409020805461408b90600190615217565b8154811061409b5761409b614deb565b60009182526020808320909101546001600160a01b03888116845260cc90925260409092208054919092169190839081106140d8576140d8614deb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550614113565b600101614013565b50505b6001600160a01b038316600090815260cc6020526040902080548061413d5761413d61522e565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b613b3a846323b872dd60e01b85858560405160240161418593929190614e01565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152600061420c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142899092919063ffffffff16565b80519091501561161a578080602001905181019061422a9190614eb4565b61161a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610723565b606061355a848460008585843b6142e25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610723565b600080866001600160a01b031685876040516142fe9190615244565b60006040518083038185875af1925050503d806000811461433b576040519150601f19603f3d011682016040523d82523d6000602084013e614340565b606091505b509150915061435082828661435b565b979650505050505050565b6060831561436a5750816115a2565b82511561437a5782518084602001fd5b8160405162461bcd60e51b81526004016107239190615260565b6001600160a01b038116811461338d57600080fd5b8035612fb381614394565b600080604083850312156143c757600080fd5b82356143d281614394565b915060208301356143e281614394565b809150509250929050565b60008083601f8401126143ff57600080fd5b5081356001600160401b0381111561441657600080fd5b6020830191508360208260051b850101111561443157600080fd5b9250929050565b60008060008060008060008060008060c08b8d03121561445757600080fd5b6144608b6143a9565b995061446e60208c016143a9565b985060408b01356001600160401b038082111561448a57600080fd5b6144968e838f016143ed565b909a50985060608d01359150808211156144af57600080fd5b6144bb8e838f016143ed565b909850965060808d01359150808211156144d457600080fd5b6144e08e838f016143ed565b909650945060a08d01359150808211156144f957600080fd5b506145068d828e016143ed565b915080935050809150509295989b9194979a5092959850565b6000806000806080858703121561453557600080fd5b843561454081614394565b9350602085013561455081614394565b925060408501359150606085013561456781614394565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156145aa576145aa614572565b60405290565b604051601f8201601f191681016001600160401b03811182821017156145d8576145d8614572565b604052919050565b60006001600160401b038211156145f9576145f9614572565b5060051b60200190565b600082601f83011261461457600080fd5b81356020614629614624836145e0565b6145b0565b82815260059290921b8401810191818101908684111561464857600080fd5b8286015b8481101561466c57803561465f81614394565b835291830191830161464c565b509695505050505050565b600082601f83011261468857600080fd5b81356020614698614624836145e0565b82815260059290921b840181019181810190868411156146b757600080fd5b8286015b8481101561466c57803583529183019183016146bb565b80356001600160601b0381168114612fb357600080fd5b6000604082840312156146fb57600080fd5b604051604081018181106001600160401b038211171561471d5761471d614572565b604052905080823561472e81614394565b815261473c602084016146d2565b60208201525092915050565b600060e0828403121561475a57600080fd5b614762614588565b905081356001600160401b038082111561477b57600080fd5b61478785838601614603565b8352602084013591508082111561479d57600080fd5b6147a985838601614603565b602084015260408401359150808211156147c257600080fd5b506147cf84828501614677565b6040830152506147e1606083016143a9565b60608201526147f383608084016146e9565b608082015261480460c083016143a9565b60a082015292915050565b60006020828403121561482157600080fd5b81356001600160401b0381111561483757600080fd5b61355a84828501614748565b6000806040838503121561485657600080fd5b823561486181614394565b946020939093013593505050565b60006040828403121561488157600080fd5b50919050565b60008060008060008060008060008060e08b8d0312156148a657600080fd5b6148af8b6143a9565b995060208b01356001600160401b03808211156148cb57600080fd5b6148d78e838f016143ed565b909b50995060408d01359150808211156148f057600080fd5b6148fc8e838f016143ed565b909950975060608d013591508082111561491557600080fd5b6149218e838f016143ed565b909750955060808d013591508082111561493a57600080fd5b506149478d828e016143ed565b909450925061495b90508c60a08d0161486f565b90509295989b9194979a5092959850565b600060e0828403121561488157600080fd5b60006020828403121561499057600080fd5b81356001600160401b038111156149a657600080fd5b61355a8482850161496c565b600080602083850312156149c557600080fd5b82356001600160401b038111156149db57600080fd5b6149e7858286016143ed565b90969095509350505050565b600060208284031215614a0557600080fd5b81356115a281614394565b803563ffffffff81168114612fb357600080fd5b600080600060608486031215614a3957600080fd5b833592506020840135614a4b81614394565b9150614a5960408501614a10565b90509250925092565b801515811461338d57600080fd5b8035612fb381614a62565b60008060408385031215614a8e57600080fd5b82356001600160401b03811115614aa457600080fd5b614ab08582860161496c565b92505060208301356143e281614a62565b600080600060608486031215614ad657600080fd5b8335614ae181614394565b925060208401356001600160401b03811115614afc57600080fd5b614b088682870161496c565b9250506040840135614b1981614a62565b809150509250925092565b600080600060608486031215614b3957600080fd5b8335614b4481614394565b92506020840135614b5481614394565b929592945050506040919091013590565b60008060408385031215614b7857600080fd5b82359150614b8860208401614a10565b90509250929050565b60008060408385031215614ba457600080fd5b8235614baf81614394565b915060208301356001600160401b03811115614bca57600080fd5b614bd68582860161496c565b9150509250929050565b600081518084526020808501945080840160005b83811015614c195781516001600160a01b031687529582019590820190600101614bf4565b509495945050505050565b600081518084526020808501945080840160005b83811015614c1957815187529582019590820190600101614c38565b604081526000614c676040830185614be0565b8281036020840152614c798185614c24565b95945050505050565b600060208284031215614c9457600080fd5b5035919050565b60008060008060008060008060008060e08b8d031215614cba57600080fd5b8a356001600160401b0380821115614cd157600080fd5b614cdd8e838f016143ed565b909c509a5060208d0135915080821115614cf657600080fd5b614d028e838f016143ed565b909a50985060408d0135915080821115614d1b57600080fd5b614d278e838f016143ed565b909850965060608d0135915080821115614d4057600080fd5b50614d4d8d828e016143ed565b9095509350614d6190508c60808d0161486f565b915061495b60c08c01614a70565b60208082526025908201527f636f6e74726163742063616c6c206973206e6f74207374616b696e6720736c616040820152647368696e6760d81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825260606020808401829052908301869052600091879160808501845b89811015614e74578435614e6081614394565b841682529382019390820190600101614e4d565b5085810360408701528681526001600160fb1b03871115614e9457600080fd5b8660051b9350838883830137600093010191825250979650505050505050565b600060208284031215614ec657600080fd5b81516115a281614a62565b60208082526056908201527f44656c65676174696f6e4d616e616765722e6f6e6c794e6f7446726f7a656e3a60408201527f207374616b657220686173206265656e2066726f7a656e20616e64206d6179206060820152756265207375626a65637420746f20736c617368696e6760501b608082015260a00190565b60e081526000614f6060e0830189614be0565b82810360208481019190915288518083528982019282019060005b81811015614fa05784516001600160a01b031683529383019391830191600101614f7b565b50508481036040860152614fb4818a614c24565b6001600160a01b038981166060880152885116608087015260208801516001600160601b031660a08701529350614fea92505050565b6001600160a01b03831660c0830152979650505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60005b8381101561506d578181015183820152602001615055565b83811115613b3a5750506000910152565b60008151808452615096816020860160208601615052565b601f01601f19169290920160200192915050565b8481526080602082015260006150c3608083018661507e565b6040830194909452506001600160a01b039190911660609091015292915050565b6000602082840312156150f657600080fd5b6115a2826146d2565b60006020828403121561511157600080fd5b81516115a281614394565b60006040828403121561512e57600080fd5b6115a283836146e9565b634e487b7160e01b600052601160045260246000fd5b6000821982111561516157615161615138565b500190565b60006107543683614748565b600060001982141561518657615186615138565b5060010190565b600063ffffffff8083168185168083038211156151ac576151ac615138565b01949350505050565b6000808335601e198436030181126151cc57600080fd5b8301803591506001600160401b038211156151e657600080fd5b6020019150600581901b360382131561443157600080fd5b60006020828403121561521057600080fd5b5051919050565b60008282101561522957615229615138565b500390565b634e487b7160e01b600052603160045260246000fd5b60008251615256818460208701615052565b9190910192915050565b6020815260006115a2602083018461507e56fea2646970667358221220f876894b48fa0555bab70731b1c6fb4868f51ac69782424910f8a8bc2ee1c1fe64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "canCompleteQueuedWithdrawal((address[],address[],uint256[],address,(address,uint96),address))": {
        "details": "This function will revert if the specified `queuedWithdrawal` does not exist"
      },
      "completeQueuedWithdrawal((address[],address[],uint256[],address,(address,uint96),address),bool)": {
        "params": {
          "queuedWithdrawal": "The QueuedWithdrawal to complete.",
          "receiveAsTokens": "If true, the shares specified in the queued withdrawal will be withdrawn from the specified strategies themselves and sent to the caller, through calls to `queuedWithdrawal.delegations[i].withdraw`. If false, then the shares in the specified strategies will simply be transferred to the caller directly."
        }
      },
      "constructor": {
        "params": {
          "_delegation": "The delegation contract.",
          "_delegationSlasher": "The primary slashing contract."
        }
      },
      "depositInto(address,address,uint256)": {
        "details": "The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).",
        "params": {
          "amount": "is the amount of token to be invested in the delegation contract by the depositor",
          "delegationShare": "is the specified delegation contract where investment is to be made,",
          "token": "is the denomination in which the investment is to be made,"
        }
      },
      "getDeposits(address)": {
        "returns": {
          "_0": "(depositor's strategies, shares in these strategies)"
        }
      },
      "initialize(address)": {
        "params": {
          "initialOwner": "Ownership of this contract is transferred to this address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "queueWithdrawal(uint256[],address[],address[],uint256[],(address,uint96),bool)": {
        "details": "Stakers will complete their withdrawal by calling the 'completeQueuedWithdrawal' function. User shares are decreased in this function, but the total number of shares in each delegation contract remains the same. The total number of shares is decremented in the 'completeQueuedWithdrawal' function instead, which is where the funds are actually sent to the user through use of the strategies' 'withdrawal' function. This ensures that the value per share reported by each delegation contract will remain consistent, and that the shares will continue to accrue gains during the enforced WITHDRAWAL_WAITING_PERIOD.strategies are removed from `investorStrats` by swapping the last entry with the entry to be removed, then popping off the last entry in `investorStrats`. The simplest way to calculate the correct `delegationIndexes` to input is to order the strategies *for which `msg.sender` is withdrawing 100% of their shares* from highest index in `investorStrats` to lowest index",
        "params": {
          "delegationIndexes": "is a list of the indices in `investorStrats[msg.sender]` that correspond to the strategies for which `msg.sender` is withdrawing 100% of their shares"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "slashQueuedWithdrawal(address,(address[],address[],uint256[],address,(address,uint96),address))": {
        "params": {
          "recipient": "The funds in the slashed withdrawal are withdrawn as tokens to this address."
        }
      },
      "slashShares(address,address,address[],address[],uint256[],uint256[])": {
        "details": "delegationShares are removed from `investorStrats` by swapping the last entry with the entry to be removed, then popping off the last entry in `investorStrats`. The simplest way to calculate the correct `delegationIndexes` to input is to order the strategies *for which `msg.sender` is withdrawing 100% of their shares* from highest index in `investorStrats` to lowest index",
        "params": {
          "delegationIndexes": "is a list of the indices in `investorStrats[msg.sender]` that correspond to the strategies for which `msg.sender` is withdrawing 100% of their shares",
          "recipient": "The slashed funds are withdrawn as tokens to this address.",
          "slashedAddress": "is the frozen address that is having its shares slashed"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "The primary entry- and exit-point for funds into and out.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "WithdrawalCompleted(address,address,bytes32)": {
        "notice": "Emitted when a queued withdrawal is completed"
      },
      "WithdrawalQueued(address,address,address,bytes32)": {
        "notice": "Emitted when a new withdrawal is queued by `depositor`."
      }
    },
    "kind": "user",
    "methods": {
      "DEPOSIT_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the deposit struct used by the contract"
      },
      "DOMAIN_SEPARATOR()": {
        "notice": "EIP-712 Domain separator"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "REASONABLE_STAKES_UPDATE_PERIOD()": {
        "notice": "When a staker undelegates or an operator deregisters, their stake can still be slashed based on tasks/services created within `REASONABLE_STAKES_UPDATE_PERIOD` of the present moment. In other words, this is the lag between undelegation/deregistration and the staker's/operator's funds no longer being slashable due to misbehavior *on a new task*."
      },
      "addToWhitelist(address[])": {
        "notice": "Add to whitelist"
      },
      "calculateWithdrawalRoot((address[],address[],uint256[],address,(address,uint96),address))": {
        "notice": "Returns the keccak256 hash of `queuedWithdrawal`."
      },
      "canCompleteQueuedWithdrawal((address[],address[],uint256[],address,(address,uint96),address))": {
        "notice": "Used to check if a queued withdrawal can be completed. Returns 'true' if the withdrawal can be immediately completed, and 'false' otherwise."
      },
      "completeQueuedWithdrawal((address[],address[],uint256[],address,(address,uint96),address),bool)": {
        "notice": "Used to complete the specified `queuedWithdrawal`. The function caller must match `queuedWithdrawal.withdrawer`"
      },
      "delegation()": {
        "notice": "Returns the single, central Delegation contract"
      },
      "delegationSlasher()": {
        "notice": "Returns the single, central DelegationSlasher contract"
      },
      "depositInto(address,address,uint256)": {
        "notice": "Deposits `amount` of `token` into the specified `delegationShare`, with the resultant shares credited to `depositor`"
      },
      "getDeposits(address)": {
        "notice": "Get all details on the depositor's investments and corresponding shares"
      },
      "initialize(address)": {
        "notice": "Initializes the investment manager contract. Sets the `pauserRegistry` (currently **not** modifiable after being set), and transfers contract ownership to the specified `initialOwner`."
      },
      "investorDelegationLength(address)": {
        "notice": "Simple getter function that returns `investorStrats[staker].length`."
      },
      "investorDelegationShares(address,address)": {
        "notice": "Returns the current shares of `user` in `delegationShare`"
      },
      "queueWithdrawal(uint256[],address[],address[],uint256[],(address,uint96),bool)": {
        "notice": "Called by a staker to queue a withdraw in the given token and shareAmount from each of the respective given strategies."
      },
      "removeFromWhitelist(address[])": {
        "notice": "Remove from whitelist"
      },
      "slashQueuedWithdrawal(address,(address[],address[],uint256[],address,(address,uint96),address))": {
        "notice": "Slashes an existing queued withdrawal that was created by a 'frozen' operator (or a staker delegated to one)"
      },
      "slashShares(address,address,address[],address[],uint256[],uint256[])": {
        "notice": "Slashes the shares of a 'frozen' operator (or a staker delegated to one)"
      },
      "undelegate()": {
        "notice": "Called by a staker to undelegate entirely. The staker must first withdraw all of their existing deposits (through use of the `queueWithdrawal` function), or else otherwise have never deposited prior to delegating."
      }
    },
    "notice": "This contract is for managing investments in different strategies. The main functionalities are: - adding and removing investment strategies that any delegator can invest into - enabling deposit of assets into specified investment delegation(s) - enabling removal of assets from specified investment delegation(s) - recording deposit of ETH into settlement layer - recording deposit for securing - slashing of assets for permissioned strategies",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 216,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 219,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2492,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 381,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 486,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 501,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 545,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11418,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "201",
        "type": "t_bytes32"
      },
      {
        "astId": 11422,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "nonces",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11445,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "investorDelegationShares",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_mapping(t_contract(IDelegationShare)12947,t_uint256))"
      },
      {
        "astId": 11451,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "investorDelegations",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_array(t_contract(IDelegationShare)12947)dyn_storage)"
      },
      {
        "astId": 11456,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "queuedWithdrawals",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_bytes32,t_struct(WithdrawalStorage)12677_storage)"
      },
      {
        "astId": 11460,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "numWithdrawalsQueued",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12433,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "whitelist",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 43251,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "stakingSlash",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 43253,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "tssGroupManager",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 43255,
        "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
        "label": "minStakeAmount",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IDelegationShare)12947)dyn_storage": {
        "base": "t_contract(IDelegationShare)12947",
        "encoding": "dynamic_array",
        "label": "contract IDelegationShare[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDelegationShare)12947": {
        "encoding": "inplace",
        "label": "contract IDelegationShare",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_contract(IDelegationShare)12947)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IDelegationShare[])",
        "numberOfBytes": "32",
        "value": "t_array(t_contract(IDelegationShare)12947)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_contract(IDelegationShare)12947,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IDelegationShare => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IDelegationShare)12947,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(WithdrawalStorage)12677_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IDelegationManager.WithdrawalStorage)",
        "numberOfBytes": "32",
        "value": "t_struct(WithdrawalStorage)12677_storage"
      },
      "t_mapping(t_contract(IDelegationShare)12947,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IDelegationShare)12947",
        "label": "mapping(contract IDelegationShare => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(WithdrawalStorage)12677_storage": {
        "encoding": "inplace",
        "label": "struct IDelegationManager.WithdrawalStorage",
        "members": [
          {
            "astId": 12672,
            "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
            "label": "initTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 12674,
            "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
            "label": "unlockTimestamp",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 12676,
            "contract": "contracts/L1/tss/delegation/TssDelegationManager.sol:TssDelegationManager",
            "label": "withdrawer",
            "offset": 8,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}