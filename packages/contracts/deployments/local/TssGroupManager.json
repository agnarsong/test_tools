{
  "address": "0x1FB27316e91e477943A87Eb215E40Fab6b382Fda",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_groupKey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "activeTssMembers",
          "type": "bytes[]"
        }
      ],
      "name": "tssActiveMemberAppended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "_inActiveTssMembers",
          "type": "bytes[]"
        }
      ],
      "name": "tssGroupMemberAppend",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getTssGroupInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTssGroupMembers",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTssGroupUnJailMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTssInactiveGroupInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "getTssMember",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "publicKey",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "nodeAddress",
              "type": "address"
            },
            {
              "internalType": "enum ITssGroupManager.MemberStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct ITssGroupManager.TssMember",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inActiveIsEmpty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "isInActiveMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isTssGroupUnJailMembers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "memberExistActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "memberExistActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "memberExistInActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "memberJail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "memberUnJail",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "publicKeyToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ethSignedMessageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        }
      ],
      "name": "recover",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_groupPublicKey",
          "type": "bytes"
        }
      ],
      "name": "setGroupPublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setStakingSlash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "_batchPublicKey",
          "type": "bytes[]"
        }
      ],
      "name": "setTssGroupMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingSlash",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "tssActiveMemberInfo",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "nodeAddress",
          "type": "address"
        },
        {
          "internalType": "enum ITssGroupManager.MemberStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_message",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_sig",
          "type": "bytes"
        }
      ],
      "name": "verifySign",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa8772a863f0baf877db4891206aa1e6fb6cf2eeced8a7f4bc600fc5e2589f79f",
  "receipt": {
    "to": null,
    "from": "0xd5DeB9917eFbc36259164EcB89Ecf331eb663426",
    "contractAddress": "0x1FB27316e91e477943A87Eb215E40Fab6b382Fda",
    "transactionIndex": 0,
    "gasUsed": "2649533",
    "logsBloom": "0x
    "blockHash": "0x43f22d61e744c7d2b7a50a512a9034676b94567966438946082c80bdc283f4c6",
    "transactionHash": "0xa8772a863f0baf877db4891206aa1e6fb6cf2eeced8a7f4bc600fc5e2589f79f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20,
        "transactionHash": "0xa8772a863f0baf877db4891206aa1e6fb6cf2eeced8a7f4bc600fc5e2589f79f",
        "address": "0x1FB27316e91e477943A87Eb215E40Fab6b382Fda",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x43f22d61e744c7d2b7a50a512a9034676b94567966438946082c80bdc283f4c6"
      }
    ],
    "blockNumber": 20,
    "cumulativeGasUsed": "2649533",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fe99b601f5497e13bda09b4a1462ee32",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_groupKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"activeTssMembers\",\"type\":\"bytes[]\"}],\"name\":\"tssActiveMemberAppended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"_inActiveTssMembers\",\"type\":\"bytes[]\"}],\"name\":\"tssGroupMemberAppend\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getTssGroupInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTssGroupMembers\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTssGroupUnJailMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTssInactiveGroupInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"getTssMember\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"enum ITssGroupManager.MemberStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ITssGroupManager.TssMember\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inActiveIsEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isInActiveMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isTssGroupUnJailMembers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"memberExistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"memberExistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"memberExistInActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"memberJail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"memberUnJail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"publicKeyToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ethSignedMessageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_groupPublicKey\",\"type\":\"bytes\"}],\"name\":\"setGroupPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStakingSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_batchPublicKey\",\"type\":\"bytes[]\"}],\"name\":\"setTssGroupMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingSlash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tssActiveMemberInfo\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"},{\"internalType\":\"enum ITssGroupManager.MemberStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"verifySign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/tss/TssGroupManager.sol\":\"TssGroupManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe8c62ca00ed2d0a4d9b7e3c4bf7d62c821618b2cdb3c844da91a1193986851bf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"contracts/L1/tss/ITssGroupManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\ninterface ITssGroupManager {\\n    enum MemberStatus {\\n        unJail,\\n        jail\\n    }\\n\\n    struct TssMember {\\n        bytes         publicKey;\\n        address       nodeAddress;\\n        MemberStatus  status;\\n    }\\n\\n    function setTssGroupMember(uint256 _threshold, bytes[] memory _batchPublicKey) external;\\n    function setGroupPublicKey(bytes memory _publicKey, bytes memory _groupPublicKey) external;\\n    function getTssGroupInfo() external returns (uint256, uint256, bytes memory, bytes[] memory);\\n    function getTssInactiveGroupInfo() external returns (uint256, uint256, bytes[] memory);\\n    function memberJail(bytes memory _publicKey) external;\\n    function memberUnJail(bytes memory _publicKey) external;\\n    function removeMember(bytes memory _publicKey) external;\\n    function getTssGroupUnJailMembers() external returns (address[] memory);\\n    function getTssGroupMembers() external returns (bytes[] memory);\\n    function getTssMember(bytes memory _publicKey) external returns (TssMember memory);\\n    function memberExistActive(bytes memory _publicKey) external returns (bool);\\n    function memberExistInActive(bytes memory _publicKey) external returns (bool);\\n    function inActiveIsEmpty() external returns (bool);\\n    function verifySign(bytes32 _message, bytes memory _sig) external returns (bool);\\n    function publicKeyToAddress (bytes memory publicKey) external returns (address);\\n    function isTssGroupUnJailMembers(address _addr) external returns (bool);\\n    function memberExistActive(address _addr) external returns (bool);\\n}\\n\",\"keccak256\":\"0x8a55df018436564dd2b9b36583c557e34249a7e573bccab612907d936ce82ac0\",\"license\":\"MIT\"},\"contracts/L1/tss/ITssStakingSlashing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\ninterface IStakingSlashing {\\n\\n    // tx\\n    function setTokenAddress(address) external;\\n    function setTssGroupAddress(address) external;\\n    function setRegulatoryAccount(address) external;\\n    function setClaimer(address, address) external;\\n    function setSlashingParams(uint256[2] calldata) external;\\n    function setPublicKey(bytes calldata) external;\\n    function quitRequest() external;\\n    function clearQuitRequestList() external;\\n    function slashing(bytes calldata, bytes calldata) external;\\n    function unJail() external;\\n\\n    // query\\n    function getSlashingParams() external view returns (uint256[2] memory);\\n    function getQuitRequestList() external view returns (address[] memory);\\n    function getSlashRecord(uint256, address) external view returns (bool);\\n    function isJailed(address) external returns (bool);\\n    function isCanOperator(address) external returns (bool);\\n\\n    //fund\\n    function deposit(uint256 amount) external returns (uint256);\\n    function withdraw() external;\\n    function completeWithdraw() external;\\n    function startWithdraw() external;\\n    function canCompleteQueuedWithdrawal() external returns (bool);\\n\\n    //delegation\\n    function registerAsOperator(bytes calldata) external;\\n    function delegateTo(address) external;\\n\\n\\n\\n\\n}\\n\",\"keccak256\":\"0xdd295e4b4f306501cb1c9bf7bbbbfe12c0692a67b104d5159e0669e9e1102809\",\"license\":\"MIT\"},\"contracts/L1/tss/TssGroupManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./ITssGroupManager.sol\\\";\\nimport \\\"./ITssStakingSlashing.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract TssGroupManager is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    ITssGroupManager\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using ECDSAUpgradeable for bytes32;\\n    using AddressUpgradeable for address;\\n    bytes confirmGroupPublicKey;\\n    address confirmGroupAddress;\\n    uint256 threshold;\\n    uint256 gRoundId;\\n    uint256 tempThreshold;\\n    uint256 confirmNumber;\\n    address public stakingSlash;\\n\\n    bytes[] activeTssMembers; // active tss member group\\n    bytes[] inActiveTssMembers; // inactive tss member group\\n    mapping(bytes => TssMember) public tssActiveMemberInfo; // Tss member publicKey => tssMember\\n    mapping(bytes => bytes) private memberGroupKey; // user publicKey => Cpk\\n    mapping(bytes => uint256) private groupKeyCounter; // Cpk counter\\n    mapping(bytes => bool) private isSubmitGroupKey; // submit group key or not\\n    mapping(bytes => bool) public isInActiveMember; // tss member exist or not\\n\\n    event tssGroupMemberAppend(uint256 _roundId, uint256 _threshold, bytes[] _inActiveTssMembers);\\n\\n    event tssActiveMemberAppended(uint256 _roundId, bytes _groupKey, bytes[] activeTssMembers);\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        gRoundId = 0;\\n        confirmNumber = 0;\\n        threshold = 0;\\n        tempThreshold = 0;\\n    }\\n\\n    modifier onlyStakingSlash() {\\n        require(msg.sender == stakingSlash, \\\"contract call is not staking slashing\\\");\\n        _;\\n    }\\n\\n    function setStakingSlash(address _address) public onlyOwner {\\n        require(_address != address(0), \\\"param _address is the zero address\\\");\\n        stakingSlash = _address;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function setTssGroupMember(uint256 _threshold, bytes[] calldata _batchPublicKey)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require((_batchPublicKey.length > 0), \\\"batch public key is empty\\\");\\n        require(_threshold < _batchPublicKey.length, \\\"threshold must less than tss member\\\");\\n        for (uint256 i = 0; i < _batchPublicKey.length; i++) {\\n            address operator = publicKeyToAddress(_batchPublicKey[i]);\\n            require(IStakingSlashing(stakingSlash).isCanOperator(operator),\\\"batch public keys has a node ,can not be operator\\\");\\n        }\\n\\n        if(inActiveTssMembers.length > 0) {\\n            for (uint256 i = 0; i < inActiveTssMembers.length; i++) {\\n                // re-election clear data\\n                delete groupKeyCounter[memberGroupKey[inActiveTssMembers[i]]];\\n                delete memberGroupKey[inActiveTssMembers[i]];\\n                delete isSubmitGroupKey[inActiveTssMembers[i]];\\n                delete isInActiveMember[inActiveTssMembers[i]];\\n            }\\n            delete inActiveTssMembers;\\n        }\\n        for (uint256 i = 0; i < _batchPublicKey.length; i++) {\\n            inActiveTssMembers.push(_batchPublicKey[i]);\\n            isInActiveMember[_batchPublicKey[i]] = true;\\n            isSubmitGroupKey[_batchPublicKey[i]] = false;\\n        }\\n        tempThreshold = _threshold;\\n        confirmNumber = 0;\\n        emit tssGroupMemberAppend(gRoundId + 1, _threshold, _batchPublicKey);\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function setGroupPublicKey(bytes calldata _publicKey, bytes calldata _groupPublicKey)\\n        public\\n        override\\n    {\\n        require(isInActiveMember[_publicKey], \\\"your public key is not in InActiveMember\\\");\\n        require(msg.sender == publicKeyToAddress(_publicKey), \\\"public key not match\\\");\\n        require(_groupPublicKey.length > 0, \\\"groupPublicKey is empty\\\");\\n\\n        if (!isSubmitGroupKey[_publicKey]) {\\n            isSubmitGroupKey[_publicKey] = true;\\n            confirmNumber = confirmNumber + 1;\\n        }\\n        if (!isEqual(memberGroupKey[_publicKey], _groupPublicKey)) {\\n            groupKeyCounter[_groupPublicKey] += 1;\\n            if (memberGroupKey[_publicKey].length != 0) {\\n                groupKeyCounter[memberGroupKey[_publicKey]] -= 1;\\n            }\\n            memberGroupKey[_publicKey] = _groupPublicKey;\\n        }\\n        if (groupKeyCounter[_groupPublicKey] >= inActiveTssMembers.length) {\\n            updateTssMember(_groupPublicKey);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssGroupInfo()\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            bytes memory,\\n            bytes[] memory\\n        )\\n    {\\n        return (gRoundId, threshold, confirmGroupPublicKey, activeTssMembers);\\n    }\\n\\n    /**\\n    * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssInactiveGroupInfo() public view override returns (uint256, uint256,  bytes[] memory){\\n        return (gRoundId + 1, tempThreshold, inActiveTssMembers);\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function memberJail(bytes calldata _publicKey) public override onlyStakingSlash {\\n        tssActiveMemberInfo[_publicKey].status = MemberStatus.jail;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function memberUnJail(bytes calldata _publicKey) public override onlyStakingSlash {\\n        tssActiveMemberInfo[_publicKey].status = MemberStatus.unJail;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function removeMember(bytes calldata _publicKey) public override onlyOwner {\\n        for (uint256 i = 0; i < activeTssMembers.length; i++) {\\n            if (isEqual(activeTssMembers[i], _publicKey)) {\\n                removeActiveTssMembers(i);\\n                break;\\n            }\\n        }\\n        delete tssActiveMemberInfo[_publicKey];\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssGroupUnJailMembers() public view override returns (address[] memory) {\\n        uint256 expectedLength;\\n        for (uint256 i = 0; i < activeTssMembers.length; i++) {\\n            if (tssActiveMemberInfo[activeTssMembers[i]].status == MemberStatus.unJail) {\\n                expectedLength++;\\n            }\\n        }\\n        address[] memory _addresses = new address[](expectedLength);\\n        uint256 index;\\n        for (uint256 i = 0; i < activeTssMembers.length; i++) {\\n            if (tssActiveMemberInfo[activeTssMembers[i]].status == MemberStatus.unJail) {\\n                _addresses[index] = tssActiveMemberInfo[activeTssMembers[i]].nodeAddress;\\n                index++;\\n            }\\n        }\\n        return _addresses;\\n    }\\n\\n    function isTssGroupUnJailMembers(address _addr) public view override returns (bool) {\\n        for (uint256 i = 0; i < activeTssMembers.length; i++) {\\n            if (tssActiveMemberInfo[activeTssMembers[i]].status == MemberStatus.unJail) {\\n                if ( _addr == tssActiveMemberInfo[activeTssMembers[i]].nodeAddress) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function memberExistActive(address _addr) public view override returns (bool) {\\n        for (uint256 i = 0; i < activeTssMembers.length; i++) {\\n            if ( _addr == tssActiveMemberInfo[activeTssMembers[i]].nodeAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssGroupMembers() public view override returns (bytes[] memory) {\\n        return activeTssMembers;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function getTssMember(bytes calldata _publicKey) public view override returns (TssMember memory) {\\n        return tssActiveMemberInfo[_publicKey];\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function memberExistActive(bytes calldata _publicKey) public view override returns (bool) {\\n        if (tssActiveMemberInfo[_publicKey].publicKey.length > 0) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function memberExistInActive(bytes calldata _publicKey) public view override returns (bool) {\\n        return isInActiveMember[_publicKey];\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function inActiveIsEmpty() public view override returns (bool) {\\n        return inActiveTssMembers.length == 0;\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function verifySign(bytes32 _message, bytes calldata _sig) public view override returns (bool) {\\n        return (recover(_message, _sig) == confirmGroupAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc ITssGroupManager\\n     */\\n    // slither-disable-next-line external-function\\n    function publicKeyToAddress(bytes memory publicKey) public pure override returns (address) {\\n        require(publicKey.length == 64, \\\"public key length must 64 bytes\\\");\\n        return address(uint160(uint256(keccak256(publicKey))));\\n    }\\n\\n    function updateTssMember(bytes calldata _groupPublicKey) private {\\n        if (activeTssMembers.length > 0) {\\n            for (uint256 i = 0; i < activeTssMembers.length; i++) {\\n                delete tssActiveMemberInfo[activeTssMembers[i]];    // delete tss active member map\\n            }\\n            delete activeTssMembers;  // delete active members\\n        }\\n        for (uint256 i = 0; i < inActiveTssMembers.length; i++) {\\n            activeTssMembers.push(inActiveTssMembers[i]);\\n            tssActiveMemberInfo[inActiveTssMembers[i]] = TssMember({\\n                publicKey: inActiveTssMembers[i],\\n                nodeAddress: publicKeyToAddress(inActiveTssMembers[i]),\\n                status: MemberStatus.unJail\\n            });\\n            // election finish clear InActiveMember data\\n            delete groupKeyCounter[memberGroupKey[inActiveTssMembers[i]]];\\n            delete memberGroupKey[inActiveTssMembers[i]];\\n            delete isSubmitGroupKey[inActiveTssMembers[i]];\\n            delete isInActiveMember[inActiveTssMembers[i]];\\n        }\\n        delete inActiveTssMembers;\\n        confirmGroupPublicKey = _groupPublicKey;\\n        confirmGroupAddress = publicKeyToAddress(_groupPublicKey);\\n        threshold = tempThreshold;\\n        gRoundId = gRoundId + 1;\\n        emit tssActiveMemberAppended(gRoundId, _groupPublicKey, activeTssMembers);\\n    }\\n\\n    function recover(bytes32 _ethSignedMessageHash, bytes calldata _sig)\\n        public\\n        pure\\n        returns (address)\\n    {\\n        (bytes32 r, bytes32 s, uint8 v) = _split(_sig);\\n        address signer = ecrecover(_ethSignedMessageHash, v, r, s);\\n        require(signer != address(0), \\\"ecrecover failed\\\");\\n        return signer;\\n    }\\n\\n    function _split(bytes memory _sig)\\n        internal\\n        pure\\n        returns (\\n            bytes32 r,\\n            bytes32 s,\\n            uint8 v\\n        )\\n    {\\n        require(_sig.length == 65, \\\"invalid signature length\\\");\\n        assembly {\\n            r := mload(add(_sig, 32))\\n            s := mload(add(_sig, 64))\\n            v := byte(0, mload(add(_sig, 96)))\\n        }\\n        if (v < 27) v += 27;\\n    }\\n\\n    function isEqual(bytes memory byteListA, bytes memory byteListB) private pure returns (bool) {\\n        if (byteListA.length != byteListB.length) return false;\\n        for (uint256 i = 0; i < byteListA.length; i++) {\\n            if (byteListA[i] != byteListB[i]) return false;\\n        }\\n        return true;\\n    }\\n\\n    function removeActiveTssMembers(uint256 _index) private {\\n        activeTssMembers[_index] = activeTssMembers[activeTssMembers.length - 1];\\n        activeTssMembers.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x7462547de90cad0f910438d0bbc293fd2e5ed39b2155d7430689434f79669074\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612e7d80620000f46000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80637a952c11116100de578063b57388d311610097578063e46a636811610071578063e46a636814610366578063f2fde38b14610394578063fcca5592146103a7578063fd3eb81f146103bf57600080fd5b8063b57388d31461032d578063bcbc5fc614610340578063cf4c8a7b1461035357600080fd5b80637a952c11146102c15780638129fc1c146102d45780638a51d8b4146102dc5780638da5cb5b146102e557806395f645bc146102f6578063b3bd9ac41461030b57600080fd5b8063429ec49c1161014b5780634866e2e0116101255780634866e2e01461027357806354bbb9141461028657806368fe7d23146102a6578063715018a6146102b957600080fd5b8063429ec49c1461023a57806343ae656c1461024d5780634679b3661461026057600080fd5b806319045a25146101935780631a47931b146101c3578063254ff981146101d85780632cd00d53146101eb5780633231a7f014610200578063404a698614610223575b600080fd5b6101a66101a136600461259c565b6103d2565b6040516001600160a01b0390911681526020015b60405180910390f35b6101d66101d13660046125e8565b6104e3565b005b6101d66101e6366004612667565b6109c0565b6101f3610a39565b6040516101ba91906126a9565b61021361020e36600461259c565b610c27565b60405190151581526020016101ba565b61022b610c53565b6040516101ba9392919061279b565b6101d6610248366004612667565b610d4a565b6101a661025b3660046127d9565b610d88565b6101d661026e36600461288a565b610de7565b610213610281366004612667565b6111cb565b610299610294366004612667565b6111fb565b6040516101ba919061292e565b6102136102b4366004612978565b611328565b6101d6611410565b6101d66102cf366004612667565b611424565b6101d6611587565b609f5415610213565b6033546001600160a01b03166101a6565b6102fe6116ac565b6040516101ba91906129a8565b61031e6103193660046127d9565b611785565b6040516101ba939291906129bb565b61021361033b366004612978565b61184a565b61021361034e366004612667565b6118c5565b609d546101a6906001600160a01b031681565b6102136103743660046127d9565b805160208183018101805160a48252928201919093012091525460ff1681565b6101d66103a2366004612978565b61190c565b6103af611982565b6040516101ba94939291906129f4565b6101d66103cd366004612978565b611aff565b60008060008061041786868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b8a92505050565b92509250925060006001888386866040516000815260200160405260405161045b949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa15801561047d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166104d85760405162461bcd60e51b815260206004820152601060248201526f1958dc9958dbdd995c8819985a5b195960821b60448201526064015b60405180910390fd5b979650505050505050565b6104eb611c13565b806105385760405162461bcd60e51b815260206004820152601960248201527f6261746368207075626c6963206b657920697320656d7074790000000000000060448201526064016104cf565b8083106105935760405162461bcd60e51b815260206004820152602360248201527f7468726573686f6c64206d757374206c657373207468616e20747373206d656d6044820152623132b960e91b60648201526084016104cf565b60005b818110156106fb5760006106018484848181106105b5576105b5612a25565b90506020028101906105c79190612a3b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d8892505050565b609d5460405163522c209d60e11b81526001600160a01b03808416600483015292935091169063a458413a90602401602060405180830381600087803b15801561064a57600080fd5b505af115801561065e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106829190612a82565b6106e85760405162461bcd60e51b815260206004820152603160248201527f6261746368207075626c6963206b657973206861732061206e6f6465202c636160448201527037103737ba1031329037b832b930ba37b960791b60648201526084016104cf565b50806106f381612aba565b915050610596565b50609f54156108575760005b609f5481101561084a5760a260a1609f838154811061072857610728612a25565b9060005260206000200160405161073f9190612b10565b90815260405190819003602001812061075791612b10565b90815260200160405180910390206000905560a1609f828154811061077e5761077e612a25565b906000526020600020016040516107959190612b10565b908152602001604051809103902060006107af9190612356565b60a3609f82815481106107c4576107c4612a25565b906000526020600020016040516107db9190612b10565b908152604051908190036020019020805460ff19169055609f805460a491908390811061080a5761080a612a25565b906000526020600020016040516108219190612b10565b908152604051908190036020019020805460ff191690558061084281612aba565b915050610707565b50610857609f6000612390565b60005b8181101561096557609f83838381811061087657610876612a25565b90506020028101906108889190612a3b565b8254600181018455600093845260209093206108a6930191906123ae565b50600160a48484848181106108bd576108bd612a25565b90506020028101906108cf9190612a3b565b6040516108dd929190612b82565b908152604051908190036020019020805491151560ff19909216919091179055600060a384848481811061091357610913612a25565b90506020028101906109259190612a3b565b604051610933929190612b82565b908152604051908190036020019020805491151560ff199092169190911790558061095d81612aba565b91505061085a565b50609b8390556000609c55609a547ffa26843b7ced045dd12994ee0e73c6f0904c3a4608bce58ae304d606035b079e906109a0906001612b92565b8484846040516109b39493929190612bd3565b60405180910390a1505050565b609d546001600160a01b031633146109ea5760405162461bcd60e51b81526004016104cf90612c81565b600160a083836040516109fe929190612b82565b908152602001604051809103902060010160146101000a81548160ff02191690836001811115610a3057610a306128f6565b02179055505050565b60606000805b609e54811015610acd57600060a0609e8381548110610a6057610a60612a25565b90600052602060002001604051610a779190612b10565b908152602001604051809103902060010160149054906101000a900460ff166001811115610aa757610aa76128f6565b1415610abb5781610ab781612aba565b9250505b80610ac581612aba565b915050610a3f565b5060008167ffffffffffffffff811115610ae957610ae96127c3565b604051908082528060200260200182016040528015610b12578160200160208202803683370190505b5090506000805b609e54811015610c1e57600060a0609e8381548110610b3a57610b3a612a25565b90600052602060002001604051610b519190612b10565b908152602001604051809103902060010160149054906101000a900460ff166001811115610b8157610b816128f6565b1415610c0c5760a0609e8281548110610b9c57610b9c612a25565b90600052602060002001604051610bb39190612b10565b9081526040519081900360200190206001015483516001600160a01b0390911690849084908110610be657610be6612a25565b6001600160a01b039092166020928302919091019091015281610c0881612aba565b9250505b80610c1681612aba565b915050610b19565b50909392505050565b6098546000906001600160a01b0316610c418585856103d2565b6001600160a01b031614949350505050565b6000806060609a546001610c679190612b92565b609b54609f80805480602002602001604051908101604052809291908181526020016000905b82821015610d39578382906000526020600020018054610cac90612ad5565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd890612ad5565b8015610d255780601f10610cfa57610100808354040283529160200191610d25565b820191906000526020600020905b815481529060010190602001808311610d0857829003601f168201915b505050505081526020019060010190610c8d565b505050509050925092509250909192565b609d546001600160a01b03163314610d745760405162461bcd60e51b81526004016104cf90612c81565b600060a083836040516109fe929190612b82565b60008151604014610ddb5760405162461bcd60e51b815260206004820152601f60248201527f7075626c6963206b6579206c656e677468206d7573742036342062797465730060448201526064016104cf565b50805160209091012090565b60a48484604051610df9929190612b82565b9081526040519081900360200190205460ff16610e695760405162461bcd60e51b815260206004820152602860248201527f796f7572207075626c6963206b6579206973206e6f7420696e20496e416374696044820152673b32a6b2b6b132b960c11b60648201526084016104cf565b610ea884848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d8892505050565b6001600160a01b0316336001600160a01b031614610eff5760405162461bcd60e51b81526020600482015260146024820152730e0eac4d8d2c640d6caf240dcdee840dac2e8c6d60631b60448201526064016104cf565b80610f4c5760405162461bcd60e51b815260206004820152601760248201527f67726f75705075626c69634b657920697320656d70747900000000000000000060448201526064016104cf565b60a38484604051610f5e929190612b82565b9081526040519081900360200190205460ff16610fbb57600160a38585604051610f89929190612b82565b908152604051908190036020019020805491151560ff19909216919091179055609c54610fb7906001612b92565b609c555b6110a360a18585604051610fd0929190612b82565b90815260200160405180910390208054610fe990612ad5565b80601f016020809104026020016040519081016040528092919081815260200182805461101590612ad5565b80156110625780601f1061103757610100808354040283529160200191611062565b820191906000526020600020905b81548152906001019060200180831161104557829003601f168201915b505050505083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c6d92505050565b61119157600160a283836040516110bb929190612b82565b908152602001604051809103902060008282546110d89190612b92565b909155505060405160a1906110f09086908690612b82565b9081526020016040518091039020805461110990612ad5565b15905061116157600160a260a18686604051611126929190612b82565b90815260405190819003602001812061113e91612b10565b9081526020016040518091039020600082825461115b9190612cc6565b90915550505b818160a18686604051611175929190612b82565b90815260405190819003602001902061118f9290916123ae565b505b609f5460405160a2906111a79085908590612b82565b908152602001604051809103902054106111c5576111c58282611cff565b50505050565b600060a483836040516111df929190612b82565b9081526040519081900360200190205460ff1690505b92915050565b61121c60408051606080820183528152600060208201819052909182015290565b60a0838360405161122e929190612b82565b908152602001604051809103902060405180606001604052908160008201805461125790612ad5565b80601f016020809104026020016040519081016040528092919081815260200182805461128390612ad5565b80156112d05780601f106112a5576101008083540402835291602001916112d0565b820191906000526020600020905b8154815290600101906020018083116112b357829003601f168201915b50505091835250506001828101546001600160a01b0381166020840152604090920191600160a01b900460ff169081111561130d5761130d6128f6565b600181111561131e5761131e6128f6565b9052509392505050565b6000805b609e5481101561140757600060a0609e838154811061134d5761134d612a25565b906000526020600020016040516113649190612b10565b908152602001604051809103902060010160149054906101000a900460ff166001811115611394576113946128f6565b14156113f55760a0609e82815481106113af576113af612a25565b906000526020600020016040516113c69190612b10565b908152604051908190036020019020600101546001600160a01b03848116911614156113f55750600192915050565b806113ff81612aba565b91505061132c565b50600092915050565b611418611c13565b6114226000612219565b565b61142c611c13565b60005b609e548110156115435761151e609e828154811061144f5761144f612a25565b90600052602060002001805461146490612ad5565b80601f016020809104026020016040519081016040528092919081815260200182805461149090612ad5565b80156114dd5780601f106114b2576101008083540402835291602001916114dd565b820191906000526020600020905b8154815290600101906020018083116114c057829003601f168201915b505050505084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611c6d92505050565b156115315761152c8161226b565b611543565b8061153b81612aba565b91505061142f565b5060a08282604051611556929190612b82565b90815260405190819003602001902060006115718282612356565b5060010180546001600160a81b03191690555050565b600054610100900460ff16158080156115a75750600054600160ff909116105b806115c15750303b1580156115c1575060005460ff166001145b6116245760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104cf565b6000805460ff191660011790558015611647576000805461ff0019166101001790555b61164f6122fc565b6000609a819055609c8190556099819055609b5580156116a9576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6060609e805480602002602001604051908101604052809291908181526020016000905b8282101561177c5783829060005260206000200180546116ef90612ad5565b80601f016020809104026020016040519081016040528092919081815260200182805461171b90612ad5565b80156117685780601f1061173d57610100808354040283529160200191611768565b820191906000526020600020905b81548152906001019060200180831161174b57829003601f168201915b5050505050815260200190600101906116d0565b50505050905090565b805160208183018101805160a0825292820191909301209152805481906117ab90612ad5565b80601f01602080910402602001604051908101604052809291908181526020018280546117d790612ad5565b80156118245780601f106117f957610100808354040283529160200191611824565b820191906000526020600020905b81548152906001019060200180831161180757829003601f168201915b505050600190930154919250506001600160a01b0381169060ff600160a01b9091041683565b6000805b609e548110156114075760a0609e828154811061186d5761186d612a25565b906000526020600020016040516118849190612b10565b908152604051908190036020019020600101546001600160a01b03848116911614156118b35750600192915050565b806118bd81612aba565b91505061184e565b60008060a084846040516118da929190612b82565b90815260405190819003602001902080546118f490612ad5565b90501115611904575060016111f5565b5060006111f5565b611914611c13565b6001600160a01b0381166119795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104cf565b6116a981612219565b600080606080609a546099546097609e81805461199e90612ad5565b80601f01602080910402602001604051908101604052809291908181526020018280546119ca90612ad5565b8015611a175780601f106119ec57610100808354040283529160200191611a17565b820191906000526020600020905b8154815290600101906020018083116119fa57829003601f168201915b5050505050915080805480602002602001604051908101604052809291908181526020016000905b82821015611aeb578382906000526020600020018054611a5e90612ad5565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8a90612ad5565b8015611ad75780601f10611aac57610100808354040283529160200191611ad7565b820191906000526020600020905b815481529060010190602001808311611aba57829003601f168201915b505050505081526020019060010190611a3f565b505050509050935093509350935090919293565b611b07611c13565b6001600160a01b038116611b685760405162461bcd60e51b815260206004820152602260248201527f706172616d205f6164647265737320697320746865207a65726f206164647265604482015261737360f01b60648201526084016104cf565b609d80546001600160a01b0319166001600160a01b0392909216919091179055565b60008060008351604114611be05760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e677468000000000000000060448201526064016104cf565b50505060208101516040820151606083015160001a601b811015611c0c57611c09601b82612cdd565b90505b9193909250565b6033546001600160a01b031633146114225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104cf565b60008151835114611c80575060006111f5565b60005b8351811015611cf557828181518110611c9e57611c9e612a25565b602001015160f81c60f81b6001600160f81b031916848281518110611cc557611cc5612a25565b01602001516001600160f81b03191614611ce35760009150506111f5565b80611ced81612aba565b915050611c83565b5060019392505050565b609e5415611d8c5760005b609e54811015611d7f5760a0609e8281548110611d2957611d29612a25565b90600052602060002001604051611d409190612b10565b9081526040519081900360200190206000611d5b8282612356565b5060010180546001600160a81b031916905580611d7781612aba565b915050611d0a565b50611d8c609e6000612390565b60005b609f5481101561214657609e609f8281548110611dae57611dae612a25565b600091825260208083208454600181018655948452922091018054919092019190611dd890612ad5565b611de3929190612432565b506040518060600160405280609f8381548110611e0257611e02612a25565b906000526020600020018054611e1790612ad5565b80601f0160208091040260200160405190810160405280929190818152602001828054611e4390612ad5565b8015611e905780601f10611e6557610100808354040283529160200191611e90565b820191906000526020600020905b815481529060010190602001808311611e7357829003601f168201915b50505050508152602001611f48609f8481548110611eb057611eb0612a25565b906000526020600020018054611ec590612ad5565b80601f0160208091040260200160405190810160405280929190818152602001828054611ef190612ad5565b8015611f3e5780601f10611f1357610100808354040283529160200191611f3e565b820191906000526020600020905b815481529060010190602001808311611f2157829003601f168201915b5050505050610d88565b6001600160a01b03168152602001600081525060a0609f8381548110611f7057611f70612a25565b90600052602060002001604051611f879190612b10565b90815260200160405180910390206000820151816000019080519060200190611fb19291906124ad565b506020820151600180830180546001600160a01b039093166001600160a01b031984168117825560408601519391926001600160a81b03199092161790600160a01b908490811115612005576120056128f6565b021790555090505060a260a1609f838154811061202457612024612a25565b9060005260206000200160405161203b9190612b10565b90815260405190819003602001812061205391612b10565b90815260200160405180910390206000905560a1609f828154811061207a5761207a612a25565b906000526020600020016040516120919190612b10565b908152602001604051809103902060006120ab9190612356565b60a3609f82815481106120c0576120c0612a25565b906000526020600020016040516120d79190612b10565b908152604051908190036020019020805460ff19169055609f805460a491908390811061210657612106612a25565b9060005260206000200160405161211d9190612b10565b908152604051908190036020019020805460ff191690558061213e81612aba565b915050611d8f565b50612153609f6000612390565b61215f609783836123ae565b5061219f82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d8892505050565b609880546001600160a01b0319166001600160a01b0392909216919091179055609b54609955609a546121d3906001612b92565b609a8190556040517f61c7922e50ad7ea3d35879a4a819ae97eb09b665f2113451d7ada7cb2b689b669161220d9185908590609e90612d02565b60405180910390a15050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b609e805461227b90600190612cc6565b8154811061228b5761228b612a25565b90600052602060002001609e82815481106122a8576122a8612a25565b906000526020600020019080546122be90612ad5565b6122c9929190612432565b50609e8054806122db576122db612de6565b6001900381819060005260206000200160006122f79190612356565b905550565b600054610100900460ff166123235760405162461bcd60e51b81526004016104cf90612dfc565b611422600054610100900460ff1661234d5760405162461bcd60e51b81526004016104cf90612dfc565b61142233612219565b50805461236290612ad5565b6000825580601f10612372575050565b601f0160209004906000526020600020908101906116a99190612521565b50805460008255906000526020600020908101906116a99190612536565b8280546123ba90612ad5565b90600052602060002090601f0160209004810192826123dc5760008555612422565b82601f106123f55782800160ff19823516178555612422565b82800160010185558215612422579182015b82811115612422578235825591602001919060010190612407565b5061242e929150612521565b5090565b82805461243e90612ad5565b90600052602060002090601f0160209004810192826124605760008555612422565b82601f106124715780548555612422565b8280016001018555821561242257600052602060002091601f016020900482015b82811115612422578254825591600101919060010190612492565b8280546124b990612ad5565b90600052602060002090601f0160209004810192826124db5760008555612422565b82601f106124f457805160ff1916838001178555612422565b82800160010185558215612422579182015b82811115612422578251825591602001919060010190612506565b5b8082111561242e5760008155600101612522565b8082111561242e57600061254a8282612356565b50600101612536565b60008083601f84011261256557600080fd5b50813567ffffffffffffffff81111561257d57600080fd5b60208301915083602082850101111561259557600080fd5b9250929050565b6000806000604084860312156125b157600080fd5b83359250602084013567ffffffffffffffff8111156125cf57600080fd5b6125db86828701612553565b9497909650939450505050565b6000806000604084860312156125fd57600080fd5b83359250602084013567ffffffffffffffff8082111561261c57600080fd5b818601915086601f83011261263057600080fd5b81358181111561263f57600080fd5b8760208260051b850101111561265457600080fd5b6020830194508093505050509250925092565b6000806020838503121561267a57600080fd5b823567ffffffffffffffff81111561269157600080fd5b61269d85828601612553565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156126ea5783516001600160a01b0316835292840192918401916001016126c5565b50909695505050505050565b6000815180845260005b8181101561271c57602081850181015186830182015201612700565b8181111561272e576000602083870101525b50601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561278e57601f1986840301895261277c8383516126f6565b98840198925090830190600101612760565b5090979650505050505050565b8381528260208201526060604082015260006127ba6060830184612743565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156127eb57600080fd5b813567ffffffffffffffff8082111561280357600080fd5b818401915084601f83011261281757600080fd5b813581811115612829576128296127c3565b604051601f8201601f19908116603f01168101908382118183101715612851576128516127c3565b8160405282815287602084870101111561286a57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600080600080604085870312156128a057600080fd5b843567ffffffffffffffff808211156128b857600080fd5b6128c488838901612553565b909650945060208701359150808211156128dd57600080fd5b506128ea87828801612553565b95989497509550505050565b634e487b7160e01b600052602160045260246000fd5b6002811061292a57634e487b7160e01b600052602160045260246000fd5b9052565b60208152600082516060602084015261294a60808401826126f6565b905060018060a01b0360208501511660408401526040840151612970606085018261290c565b509392505050565b60006020828403121561298a57600080fd5b81356001600160a01b03811681146129a157600080fd5b9392505050565b6020815260006129a16020830184612743565b6060815260006129ce60608301866126f6565b6001600160a01b038516602084015290506129ec604083018461290c565b949350505050565b848152836020820152608060408201526000612a1360808301856126f6565b82810360608401526104d88185612743565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612a5257600080fd5b83018035915067ffffffffffffffff821115612a6d57600080fd5b60200191503681900382131561259557600080fd5b600060208284031215612a9457600080fd5b815180151581146129a157600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612ace57612ace612aa4565b5060010190565b600181811c90821680612ae957607f821691505b60208210811415612b0a57634e487b7160e01b600052602260045260246000fd5b50919050565b6000808354612b1e81612ad5565b60018281168015612b365760018114612b4757612b76565b60ff19841687528287019450612b76565b8760005260208060002060005b85811015612b6d5781548a820152908401908201612b54565b50505082870194505b50929695505050505050565b8183823760009101908152919050565b60008219821115612ba557612ba5612aa4565b500190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006060820186835260208681850152606060408501528185835260808501905060808660051b86010192508660005b87811015612c7257868503607f190183528135368a9003601e19018112612c2957600080fd5b8901803567ffffffffffffffff811115612c4257600080fd5b8036038b1315612c5157600080fd5b612c5e8782888501612baa565b965050509183019190830190600101612c03565b50929998505050505050505050565b60208082526025908201527f636f6e74726163742063616c6c206973206e6f74207374616b696e6720736c616040820152647368696e6760d81b606082015260800190565b600082821015612cd857612cd8612aa4565b500390565b600060ff821660ff84168060ff03821115612cfa57612cfa612aa4565b019392505050565b84815260006020606081840152612d1d606084018688612baa565b83810360408501528085548083528383019150838160051b8401016000888152858120815b84811015612dd457601f19878503018652828254612d5f81612ad5565b80875260018281168015612d7a5760018114612d8e57612dbd565b60ff198416898e0152604089019450612dbd565b8688528c8820885b84811015612db55781548f828d01015283820191508e81019050612d96565b8a018e019550505b50988b019892965050509190910190600101612d42565b50919c9b505050505050505050505050565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212203f8eb05fd702e3ee33daf145346e1d9e51c30b9c09d1ca68bd682ad4e9873aaa64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 216,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 219,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2492,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 501,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 545,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 40476,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "confirmGroupPublicKey",
        "offset": 0,
        "slot": "151",
        "type": "t_bytes_storage"
      },
      {
        "astId": 40478,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "confirmGroupAddress",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 40480,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "threshold",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 40482,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "gRoundId",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 40484,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "tempThreshold",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 40486,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "confirmNumber",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 40488,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "stakingSlash",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 40491,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "activeTssMembers",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_bytes_storage)dyn_storage"
      },
      {
        "astId": 40494,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "inActiveTssMembers",
        "offset": 0,
        "slot": "159",
        "type": "t_array(t_bytes_storage)dyn_storage"
      },
      {
        "astId": 40499,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "tssActiveMemberInfo",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_bytes_memory_ptr,t_struct(TssMember)40205_storage)"
      },
      {
        "astId": 40503,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "memberGroupKey",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_bytes_memory_ptr,t_bytes_storage)"
      },
      {
        "astId": 40507,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "groupKeyCounter",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      },
      {
        "astId": 40511,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "isSubmitGroupKey",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_bytes_memory_ptr,t_bool)"
      },
      {
        "astId": 40515,
        "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
        "label": "isInActiveMember",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_bytes_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(MemberStatus)40197": {
        "encoding": "inplace",
        "label": "enum ITssGroupManager.MemberStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes_memory_ptr,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_struct(TssMember)40205_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => struct ITssGroupManager.TssMember)",
        "numberOfBytes": "32",
        "value": "t_struct(TssMember)40205_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TssMember)40205_storage": {
        "encoding": "inplace",
        "label": "struct ITssGroupManager.TssMember",
        "members": [
          {
            "astId": 40199,
            "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
            "label": "publicKey",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 40201,
            "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
            "label": "nodeAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 40204,
            "contract": "contracts/L1/tss/TssGroupManager.sol:TssGroupManager",
            "label": "status",
            "offset": 20,
            "slot": "1",
            "type": "t_enum(MemberStatus)40197"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}