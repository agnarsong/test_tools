{
  "abi": [
    {
      "inputs": [],
      "name": "BIP_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BLOCK_STALE_MEASURE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DURATION_SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DATASTORE_DURATION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_DATASTORE_DURATION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_DS_PER_BLOCK_PER_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "headerHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint32",
                  "name": "durationDataStoreId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "globalDataStoreId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "referenceBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "blockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "confirmer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "signatoryRecordHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IDataLayrServiceManager.DataStoreMetadata",
              "name": "metadata",
              "type": "tuple"
            },
            {
              "internalType": "uint8",
              "name": "duration",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "index",
              "type": "uint32"
            }
          ],
          "internalType": "struct IDataLayrServiceManager.DataStoreSearchData",
          "name": "searchData",
          "type": "tuple"
        }
      ],
      "name": "confirmDataStore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "confirmDataStoreTimeout",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dataStoreHashesForDurationAtTimestamp",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "dataStoreIdToSignatureHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eigenLayrDelegation",
      "outputs": [
        {
          "internalType": "contract IEigenLayrDelegation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePerBytePerTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "freezeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "duration",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        }
      ],
      "name": "getDataStoreHashesForDurationAtTimestamp",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "duration",
          "type": "uint8"
        }
      ],
      "name": "getNumDataStoresForDuration",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feePayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "confirmer",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "duration",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "blockNumber",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "totalOperatorsIndex",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "header",
          "type": "bytes"
        }
      ],
      "name": "initDataStore",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTime",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "log2NumPowersOfTau",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPowersOfTau",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "duration",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "headerHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "durationDataStoreId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "globalDataStoreId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "referenceBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "blockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint96",
              "name": "fee",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "confirmer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "signatoryRecordHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IDataLayrServiceManager.DataStoreMetadata",
          "name": "metadata",
          "type": "tuple"
        }
      ],
      "name": "verifyDataStoreMetadata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "zeroPolynomialCommitmentMerkleRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "BIP_MULTIPLIER()": "a3c7eaf0",
    "BLOCK_STALE_MEASURE()": "5e8b3f2d",
    "DURATION_SCALE()": "31a219c5",
    "MAX_DATASTORE_DURATION()": "578ae5a1",
    "MIN_DATASTORE_DURATION()": "1fdab6e4",
    "NUM_DS_PER_BLOCK_PER_DURATION()": "5f87abbb",
    "collateralToken()": "b2016bd4",
    "confirmDataStore(bytes,((bytes32,uint32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32))": "58942e73",
    "confirmDataStoreTimeout()": "4d53cebb",
    "dataStoreHashesForDurationAtTimestamp(uint8,uint256,uint256)": "1bd2b3cf",
    "dataStoreIdToSignatureHash(uint32)": "fc2c6058",
    "eigenLayrDelegation()": "33d2433a",
    "feePerBytePerTime()": "d21eed4f",
    "freezeOperator(address)": "38c8ee64",
    "getDataStoreHashesForDurationAtTimestamp(uint8,uint256,uint32)": "ed82c0ee",
    "getNumDataStoresForDuration(uint8)": "73441c4e",
    "initDataStore(address,address,uint8,uint32,uint32,bytes)": "dcf49ea7",
    "latestTime()": "7dfd16d7",
    "log2NumPowersOfTau()": "a50017a1",
    "numPowersOfTau()": "046bf4a6",
    "owner()": "8da5cb5b",
    "taskNumber()": "72d18e8d",
    "verifyDataStoreMetadata(uint8,uint256,uint32,(bytes32,uint32,uint32,uint32,uint32,uint96,address,bytes32))": "ba4994b1",
    "zeroPolynomialCommitmentMerkleRoots(uint256)": "3367a3fb"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BIP_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLOCK_STALE_MEASURE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DURATION_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DATASTORE_DURATION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DATASTORE_DURATION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_DS_PER_BLOCK_PER_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"durationDataStoreId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"globalDataStoreId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"referenceBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"confirmer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"signatoryRecordHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDataLayrServiceManager.DataStoreMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct IDataLayrServiceManager.DataStoreSearchData\",\"name\":\"searchData\",\"type\":\"tuple\"}],\"name\":\"confirmDataStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmDataStoreTimeout\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dataStoreHashesForDurationAtTimestamp\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"dataStoreIdToSignatureHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eigenLayrDelegation\",\"outputs\":[{\"internalType\":\"contract IEigenLayrDelegation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePerBytePerTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"freezeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getDataStoreHashesForDurationAtTimestamp\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"}],\"name\":\"getNumDataStoresForDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feePayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"confirmer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"totalOperatorsIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"initDataStore\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log2NumPowersOfTau\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPowersOfTau\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"duration\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"headerHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"durationDataStoreId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"globalDataStoreId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"referenceBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"fee\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"confirmer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"signatoryRecordHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDataLayrServiceManager.DataStoreMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"verifyDataStoreMetadata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"zeroPolynomialCommitmentMerkleRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"confirmDataStore(bytes,((bytes32,uint32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32))\":{\"params\":{\"data\":\"Input to the `checkSignatures` function, which is of the format: < bytes32 msgHash, uint48 index of the totalStake corresponding to the dataStoreId in the 'totalStakeHistory' array of the BLSRegistry uint32 numberOfNonSigners, uint256[numberOfSigners][4] pubkeys of nonsigners, uint32 apkIndex, uint256[4] apk, uint256[2] sigma >\"}},\"initDataStore(address,address,uint8,uint32,uint32,bytes)\":{\"params\":{\"blockNumber\":\"is the block number in Ethereum for which the confirmation will consult total + operator stake amounts. -- must not be more than 'BLOCK_STALE_MEASURE' (defined in DataLayr) blocks in past\",\"confirmer\":\"is the address that must confirm the datastore\",\"duration\":\"for which the data has to be stored by the DataLayr operators. This is a quantized parameter that describes how many factors of DURATION_SCALE does this data blob needs to be stored. The quantization process comes from ease of implementation in DataLayrBombVerifier.sol.\",\"header\":\"is the summary of the data that is being asserted into DataLayr,  type DataStoreHeader struct {   KzgCommit      [64]byte   Degree         uint32   NumSys         uint32   NumPar         uint32   OrigDataSize   uint32   Disperser      [20]byte   LowDegreeProof [64]byte  }\"},\"returns\":{\"_0\":\"index The index in the array `dataStoreHashesForDurationAtTimestamp[duration][block.timestamp]` at which the DataStore's hash was stored.\"}}},\"stateVariables\":{\"BLOCK_STALE_MEASURE\":{\"details\":\"To clarify edge cases, the middleware can look `BLOCK_STALE_MEASURE` blocks into the past, i.e. it may trust stakes from the interval [block.number - BLOCK_STALE_MEASURE, block.number] (specifically, *inclusive* of the block that is `BLOCK_STALE_MEASURE` before the current one)\"}},\"title\":\"Storage variables for the `DataLayrServiceManager` contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BLOCK_STALE_MEASURE()\":{\"notice\":\"The maximum amount of blocks in the past that the service will consider stake amounts to still be 'valid'.\"},\"DURATION_SCALE()\":{\"notice\":\"Unit of measure (in time) for the duration of DataStores\"},\"MAX_DATASTORE_DURATION()\":{\"notice\":\"The longest allowed duration of a DataStore, measured in `DURATION_SCALE`\"},\"MIN_DATASTORE_DURATION()\":{\"notice\":\"The shortest allowed duration of a DataStore, measured in `DURATION_SCALE`\"},\"NUM_DS_PER_BLOCK_PER_DURATION()\":{\"notice\":\"The maximum number of DataStores of a single duration that can be stored in a single block\"},\"collateralToken()\":{\"notice\":\"Collateral token used for placing collateral on challenges & payment commits\"},\"confirmDataStoreTimeout()\":{\"notice\":\"this is the maximum amount of time that can pass between an intitiation of a DataStore and its confirmation.         a max is set to limit greiving cause to nodes\"},\"dataStoreHashesForDurationAtTimestamp(uint8,uint256,uint256)\":{\"notice\":\"Mapping from duration to timestamp to all of the ids of datastores that were initialized during that timestamp. The third nested mapping just keeps track of a fixed number of datastores of a certain duration that can be in that block\"},\"dataStoreIdToSignatureHash(uint32)\":{\"notice\":\"mapping between the dataStoreId for a particular assertion of data into DataLayr and a compressed information on the signatures of the DataLayr nodes who signed up to be the part of the quorum.\"},\"eigenLayrDelegation()\":{\"notice\":\"The Delegation contract of EigenLayer.\"},\"feePerBytePerTime()\":{\"notice\":\"service fee that will be paid out by the disperser to the DataLayr nodes for storing data, per byte stored per unit time (second).\"},\"getDataStoreHashesForDurationAtTimestamp(uint8,uint256,uint32)\":{\"notice\":\"Returns the hash of the `index`th DataStore with the specified `duration` at the specified UTC `timestamp`.\"},\"getNumDataStoresForDuration(uint8)\":{\"notice\":\"returns the number of data stores for the @param duration\"},\"latestTime()\":{\"notice\":\"Returns the `latestTime` until which operators must serve.\"},\"log2NumPowersOfTau()\":{\"notice\":\"number of layers in the root tree\"},\"numPowersOfTau()\":{\"notice\":\"number of leaves in the root tree\"},\"taskNumber()\":{\"notice\":\"Returns the current 'taskNumber' for the middleware\"},\"verifyDataStoreMetadata(uint8,uint256,uint32,(bytes32,uint32,uint32,uint32,uint32,uint96,address,bytes32))\":{\"notice\":\"Checks that the hash of the `index`th DataStore with the specified `duration` at the specified UTC `timestamp` matches the supplied `metadata`. Returns 'true' if the metadata matches the hash, and 'false' otherwise.\"},\"zeroPolynomialCommitmentMerkleRoots(uint256)\":{\"notice\":\"For a given l, zeroPolynomialCommitmentMerkleRoots[l] represents the root of merkle tree zeroPolynomialCommitmentMerkleRoots[l] : : ____________ ....                             .... ____________ |                                                               | |                                                               | _____h(h_1||h_2)______                                        ____h(h_{k-1}||h_{k}__________ |                      |                                      |                              | |                      |                                      |                              | h_1                    h_2                                 h_{k-1}                         h_{k} |                      |                                      |                              | |                      |                                      |                              | hash(x^l - w^l)       hash(x^l - (w^2)^l)                   hash(x^l - (w^{k-1})^l)        hash(x^l - (w^k)^l) This tree is computed off-chain and only the Merkle roots are stored on-chain.\"}},\"notice\":\"This storage contract is separate from the logic to simplify the upgrade process.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/core/DataLayrServiceManagerStorage.sol\":\"DataLayrServiceManagerStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer/=../eignlayr-contracts/src/\",\":@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":ds-test/=lib/eignlayr-contracts/lib/ds-test/src/\",\":eignlayr-contracts/=lib/eignlayr-contracts/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/eignlayr-contracts/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/eignlayr-contracts/lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"../eignlayr-contracts/src/contracts/interfaces/IDelayedService.sol\":{\"keccak256\":\"0x4c9c1d5de05ad392b45244c373d137c7f49436618492ba165b2e3a241dee25cc\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://1675794f6a64068df5d2362d85793b9c61c4ccffa6829bbb7cc0cc843fa3a359\",\"dweb:/ipfs/QmdZyC2W5rrEX2fSkF6YxsWCt3HgaAdm4HSpss8T9oVAJn\"]},\"../eignlayr-contracts/src/contracts/interfaces/IEigenLayrDelegation.sol\":{\"keccak256\":\"0x9f11c0becde4111ac7d060dc11b9461888129076740cf78e07f292eefc92955e\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://53bef92f10fd142e6b0af0f4f77a958c96ebea145492aa5328757e10fffd9c21\",\"dweb:/ipfs/QmUHG67pTyGxu6whsk95JNwevDJ7ooQMyeNT4kfwJtEzU5\"]},\"../eignlayr-contracts/src/contracts/interfaces/IInvestmentManager.sol\":{\"keccak256\":\"0xed8f5ee05ffbedbfe649dc7547339b3bc118edfe02825074341b0c474f776100\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://44e9b0705f113e63a867b59bc292c7d5287968017b39ade9ef4c2b90d7f7dd34\",\"dweb:/ipfs/Qmc46ncEfH6wXKRz7zYKvkTGRhQSSDh6traUrttRFcP2tw\"]},\"../eignlayr-contracts/src/contracts/interfaces/IInvestmentStrategy.sol\":{\"keccak256\":\"0x69eb667cc856ee1fe783243b6db21a43a9dadd29bf6761727b334fca4366bceb\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://224e8f6def4e53a1065f0c4ce26d8ffff15276944e2351753065aeb5bd265f52\",\"dweb:/ipfs/QmSu8iUPCnwza4SdE5jVSZLnQjMRXJg3VAGc8pHqbaMLob\"]},\"../eignlayr-contracts/src/contracts/interfaces/IQuorumRegistry.sol\":{\"keccak256\":\"0xe666a9120ceaf3278c34cebd7c33ee27a14788752b70f08fccc252971a53d6e3\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://3f3df7d1504adc6f3c4305150c980d27c35feea7d1b9119b86a5bdb442b8f36e\",\"dweb:/ipfs/QmQqwGVbZ8mV7aFwe9rQ9hiAcXonmtyD2Kq22eNfcXhnkw\"]},\"../eignlayr-contracts/src/contracts/interfaces/IRegistry.sol\":{\"keccak256\":\"0x5bd8be0f70b0e69f94e069c52417079ba2b9e73acd5f659c09b22142dc6c59f5\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://e32791f0147f40738d8a27c86e83c2207d5c1d1654c2f730629b3be587963cc4\",\"dweb:/ipfs/Qma4VYzA9jkLxWQCgCFm911rQodoSboaJxnNqi4AaSzftp\"]},\"../eignlayr-contracts/src/contracts/interfaces/IServiceManager.sol\":{\"keccak256\":\"0xded81693805764888f8d1daa8afb600969d4286f3d5ecfa92e99b9446b400ad4\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://8e0d0704fa8e64543abce318eaf99c53f75215db76cf873e6a6311a4eb5274b2\",\"dweb:/ipfs/Qmd96t8WrNFRY5fqsPtkCaz28j3mvZj3fpc4qp6xXe9wgb\"]},\"../eignlayr-contracts/src/contracts/libraries/BN254.sol\":{\"keccak256\":\"0xf677d6de3e5b3688eb08ac23e116f4d926d2ccc39039571e7c90aabe8bd5fccb\",\"license\":\"UNLICENSED AND MIT\",\"urls\":[\"bzz-raw://0d0bfb10bc9b677311b0de35005549a8b772b38ce84b011115eb30466cc92646\",\"dweb:/ipfs/QmSA4yYCaoB1V6n1PYEJ3PEnd8Yi6xrKdihMJtqyGPfWJL\"]},\"../eignlayr-contracts/src/contracts/libraries/BytesLib.sol\":{\"keccak256\":\"0x8484c1dc5ba4a3b6abceb4965227d945787305175ef1e55a513d8f097f5fd95e\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://fb6824b1d81175e73868498f985533654b1f4d4ac6705ea8f2a9e12598759ec3\",\"dweb:/ipfs/QmdweCgj6cp1bBfXGvQrVVaN1tgiAY4DUbTiGXjtx4eu13\"]},\"../eignlayr-contracts/src/contracts/libraries/Merkle.sol\":{\"keccak256\":\"0x12f01f5daf5a4c185b927ef195dadc2ed51ab5e22a713283cd6b261026ab5930\",\"license\":\"UNLICENCED\",\"urls\":[\"bzz-raw://182e651a91bdadcc3c6d3d23d04902f8efd5cdce3a2d31decc0b2f29fa3dd865\",\"dweb:/ipfs/QmfZNVikCpCUU6HtSC92rrMujHW3Me31R75f1TSMccmggx\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935\",\"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95\",\"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6\",\"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269\",\"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj\"]},\"src/contracts/core/DataLayrBombVerifier.sol\":{\"keccak256\":\"0x9a88bc75e643512a9139003ff96959a5ca2f533ffe7f5d9e15881ad492bcaff6\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://d74a076d5d6ebcf536aec282938a0876566bec3fc18b57048188e56fccca0be0\",\"dweb:/ipfs/QmcSXDTLjsv41RZUF58kfKiKh3YG8EZ6ozTNWyXqcGtFyN\"]},\"src/contracts/core/DataLayrChallenge.sol\":{\"keccak256\":\"0x18012b05ad3c19b8b4a6bf8e4a13ed1e6f0e75b7b84c278bb4947e015d02b239\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://451211b6c0e3750f291b90d532c8a2fdb24f528ac28b2478ba868ef9dc30f1a2\",\"dweb:/ipfs/Qmb4TJQErysBsxe6CKpJE9ecQLWsM8DRtwB5bdsQc67YxY\"]},\"src/contracts/core/DataLayrChallengeUtils.sol\":{\"keccak256\":\"0x9d5d22979a5537a16cf9f6ab44ac867c97f5162f2ccbf65e9fdc8c80e7c474e3\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://6fe307be1450444b667b19a8a4f6f8ab566cf6cee6ef9679fb7f831fb4bf8a28\",\"dweb:/ipfs/QmYeQ8v6xFECepV432EVcPaqKvSZjm8VnKaTfS8iBKEh7h\"]},\"src/contracts/core/DataLayrServiceManagerStorage.sol\":{\"keccak256\":\"0x6beaaeb0a916a3df2e4122c3d1c918583831986a7aacefb8f3347fd13b72d46a\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://b56c3fe3d5173b497eabce323d4a4caa966a25c7889c905834ef3422c2f9a51b\",\"dweb:/ipfs/QmWDMB31chrFDGryThxcSUUvvvh3iqATksNspACHVfrcXz\"]},\"src/contracts/interfaces/IDataLayrServiceManager.sol\":{\"keccak256\":\"0x5d49a50c80b5a38ff6d8ae09494793d52fd05c4233b4c55940da54202a4dfe89\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://a5a1d28d3217eb8154bb62c58d97beec073bffdcff779000390ca0af7dc5bf88\",\"dweb:/ipfs/QmR9aHtgFsyMTZZu86dPyZbP3QE88L8g6e6N2iZDvdUiZA\"]},\"src/contracts/libraries/DataStoreUtils.sol\":{\"keccak256\":\"0xc121f108b4d714d7623536aeea7e1ba298e671a5758d4c8a2d22816e9dbed41f\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://e3efef70832be4bfce0a72885730c92adab53015bacd41a79eddb88c399265c0\",\"dweb:/ipfs/QmTAmg9VvtvKzBHeiQexwQXNJYKtVs1Gdry2dKhrcR3xWz\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "BIP_MULTIPLIER",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "BLOCK_STALE_MEASURE",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "DURATION_SCALE",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MAX_DATASTORE_DURATION",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MIN_DATASTORE_DURATION",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "NUM_DS_PER_BLOCK_PER_DURATION",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "collateralToken",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "struct IDataLayrServiceManager.DataStoreSearchData",
              "name": "searchData",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct IDataLayrServiceManager.DataStoreMetadata",
                  "name": "metadata",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "bytes32",
                      "name": "headerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "durationDataStoreId",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "globalDataStoreId",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "referenceBlockNumber",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "blockNumber",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint96",
                      "name": "fee",
                      "type": "uint96"
                    },
                    {
                      "internalType": "address",
                      "name": "confirmer",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "signatoryRecordHash",
                      "type": "bytes32"
                    }
                  ]
                },
                {
                  "internalType": "uint8",
                  "name": "duration",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "index",
                  "type": "uint32"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "confirmDataStore"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "confirmDataStoreTimeout",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "dataStoreHashesForDurationAtTimestamp",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "dataStoreIdToSignatureHash",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "eigenLayrDelegation",
          "outputs": [
            {
              "internalType": "contract IEigenLayrDelegation",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "feePerBytePerTime",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "freezeOperator"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "duration",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "index",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getDataStoreHashesForDurationAtTimestamp",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "duration",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getNumDataStoresForDuration",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "feePayer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "confirmer",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "duration",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "blockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "totalOperatorsIndex",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "header",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initDataStore",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "latestTime",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "log2NumPowersOfTau",
          "outputs": [
            {
              "internalType": "uint48",
              "name": "",
              "type": "uint48"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "numPowersOfTau",
          "outputs": [
            {
              "internalType": "uint48",
              "name": "",
              "type": "uint48"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "taskNumber",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "duration",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "index",
              "type": "uint32"
            },
            {
              "internalType": "struct IDataLayrServiceManager.DataStoreMetadata",
              "name": "metadata",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "headerHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint32",
                  "name": "durationDataStoreId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "globalDataStoreId",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "referenceBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "blockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint96",
                  "name": "fee",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "confirmer",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "signatoryRecordHash",
                  "type": "bytes32"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyDataStoreMetadata",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "zeroPolynomialCommitmentMerkleRoots",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "confirmDataStore(bytes,((bytes32,uint32,uint32,uint32,uint32,uint96,address,bytes32),uint8,uint256,uint32))": {
            "params": {
              "data": "Input to the `checkSignatures` function, which is of the format: < bytes32 msgHash, uint48 index of the totalStake corresponding to the dataStoreId in the 'totalStakeHistory' array of the BLSRegistry uint32 numberOfNonSigners, uint256[numberOfSigners][4] pubkeys of nonsigners, uint32 apkIndex, uint256[4] apk, uint256[2] sigma >"
            }
          },
          "initDataStore(address,address,uint8,uint32,uint32,bytes)": {
            "params": {
              "blockNumber": "is the block number in Ethereum for which the confirmation will consult total + operator stake amounts. -- must not be more than 'BLOCK_STALE_MEASURE' (defined in DataLayr) blocks in past",
              "confirmer": "is the address that must confirm the datastore",
              "duration": "for which the data has to be stored by the DataLayr operators. This is a quantized parameter that describes how many factors of DURATION_SCALE does this data blob needs to be stored. The quantization process comes from ease of implementation in DataLayrBombVerifier.sol.",
              "header": "is the summary of the data that is being asserted into DataLayr,  type DataStoreHeader struct {   KzgCommit      [64]byte   Degree         uint32   NumSys         uint32   NumPar         uint32   OrigDataSize   uint32   Disperser      [20]byte   LowDegreeProof [64]byte  }"
            },
            "returns": {
              "_0": "index The index in the array `dataStoreHashesForDurationAtTimestamp[duration][block.timestamp]` at which the DataStore's hash was stored."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "BLOCK_STALE_MEASURE()": {
            "notice": "The maximum amount of blocks in the past that the service will consider stake amounts to still be 'valid'."
          },
          "DURATION_SCALE()": {
            "notice": "Unit of measure (in time) for the duration of DataStores"
          },
          "MAX_DATASTORE_DURATION()": {
            "notice": "The longest allowed duration of a DataStore, measured in `DURATION_SCALE`"
          },
          "MIN_DATASTORE_DURATION()": {
            "notice": "The shortest allowed duration of a DataStore, measured in `DURATION_SCALE`"
          },
          "NUM_DS_PER_BLOCK_PER_DURATION()": {
            "notice": "The maximum number of DataStores of a single duration that can be stored in a single block"
          },
          "collateralToken()": {
            "notice": "Collateral token used for placing collateral on challenges & payment commits"
          },
          "confirmDataStoreTimeout()": {
            "notice": "this is the maximum amount of time that can pass between an intitiation of a DataStore and its confirmation.         a max is set to limit greiving cause to nodes"
          },
          "dataStoreHashesForDurationAtTimestamp(uint8,uint256,uint256)": {
            "notice": "Mapping from duration to timestamp to all of the ids of datastores that were initialized during that timestamp. The third nested mapping just keeps track of a fixed number of datastores of a certain duration that can be in that block"
          },
          "dataStoreIdToSignatureHash(uint32)": {
            "notice": "mapping between the dataStoreId for a particular assertion of data into DataLayr and a compressed information on the signatures of the DataLayr nodes who signed up to be the part of the quorum."
          },
          "eigenLayrDelegation()": {
            "notice": "The Delegation contract of EigenLayer."
          },
          "feePerBytePerTime()": {
            "notice": "service fee that will be paid out by the disperser to the DataLayr nodes for storing data, per byte stored per unit time (second)."
          },
          "getDataStoreHashesForDurationAtTimestamp(uint8,uint256,uint32)": {
            "notice": "Returns the hash of the `index`th DataStore with the specified `duration` at the specified UTC `timestamp`."
          },
          "getNumDataStoresForDuration(uint8)": {
            "notice": "returns the number of data stores for the @param duration"
          },
          "latestTime()": {
            "notice": "Returns the `latestTime` until which operators must serve."
          },
          "log2NumPowersOfTau()": {
            "notice": "number of layers in the root tree"
          },
          "numPowersOfTau()": {
            "notice": "number of leaves in the root tree"
          },
          "taskNumber()": {
            "notice": "Returns the current 'taskNumber' for the middleware"
          },
          "verifyDataStoreMetadata(uint8,uint256,uint32,(bytes32,uint32,uint32,uint32,uint32,uint96,address,bytes32))": {
            "notice": "Checks that the hash of the `index`th DataStore with the specified `duration` at the specified UTC `timestamp` matches the supplied `metadata`. Returns 'true' if the metadata matches the hash, and 'false' otherwise."
          },
          "zeroPolynomialCommitmentMerkleRoots(uint256)": {
            "notice": "For a given l, zeroPolynomialCommitmentMerkleRoots[l] represents the root of merkle tree zeroPolynomialCommitmentMerkleRoots[l] : : ____________ ....                             .... ____________ |                                                               | |                                                               | _____h(h_1||h_2)______                                        ____h(h_{k-1}||h_{k}__________ |                      |                                      |                              | |                      |                                      |                              | h_1                    h_2                                 h_{k-1}                         h_{k} |                      |                                      |                              | |                      |                                      |                              | hash(x^l - w^l)       hash(x^l - (w^2)^l)                   hash(x^l - (w^{k-1})^l)        hash(x^l - (w^k)^l) This tree is computed off-chain and only the Merkle roots are stored on-chain."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@eigenlayer/=../eignlayr-contracts/src/",
        ":@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/",
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":ds-test/=lib/eignlayr-contracts/lib/ds-test/src/",
        ":eignlayr-contracts/=lib/eignlayr-contracts/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts-upgradeable/=lib/eignlayr-contracts/lib/openzeppelin-contracts-upgradeable/",
        ":openzeppelin-contracts/=lib/eignlayr-contracts/lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/contracts/core/DataLayrServiceManagerStorage.sol": "DataLayrServiceManagerStorage"
      },
      "libraries": {}
    },
    "sources": {
      "../eignlayr-contracts/src/contracts/interfaces/IDelayedService.sol": {
        "keccak256": "0x4c9c1d5de05ad392b45244c373d137c7f49436618492ba165b2e3a241dee25cc",
        "urls": [
          "bzz-raw://1675794f6a64068df5d2362d85793b9c61c4ccffa6829bbb7cc0cc843fa3a359",
          "dweb:/ipfs/QmdZyC2W5rrEX2fSkF6YxsWCt3HgaAdm4HSpss8T9oVAJn"
        ],
        "license": "UNLICENSED"
      },
      "../eignlayr-contracts/src/contracts/interfaces/IEigenLayrDelegation.sol": {
        "keccak256": "0x9f11c0becde4111ac7d060dc11b9461888129076740cf78e07f292eefc92955e",
        "urls": [
          "bzz-raw://53bef92f10fd142e6b0af0f4f77a958c96ebea145492aa5328757e10fffd9c21",
          "dweb:/ipfs/QmUHG67pTyGxu6whsk95JNwevDJ7ooQMyeNT4kfwJtEzU5"
        ],
        "license": "UNLICENSED"
      },
      "../eignlayr-contracts/src/contracts/interfaces/IInvestmentManager.sol": {
        "keccak256": "0xed8f5ee05ffbedbfe649dc7547339b3bc118edfe02825074341b0c474f776100",
        "urls": [
          "bzz-raw://44e9b0705f113e63a867b59bc292c7d5287968017b39ade9ef4c2b90d7f7dd34",
          "dweb:/ipfs/Qmc46ncEfH6wXKRz7zYKvkTGRhQSSDh6traUrttRFcP2tw"
        ],
        "license": "UNLICENSED"
      },
      "../eignlayr-contracts/src/contracts/interfaces/IInvestmentStrategy.sol": {
        "keccak256": "0x69eb667cc856ee1fe783243b6db21a43a9dadd29bf6761727b334fca4366bceb",
        "urls": [
          "bzz-raw://224e8f6def4e53a1065f0c4ce26d8ffff15276944e2351753065aeb5bd265f52",
          "dweb:/ipfs/QmSu8iUPCnwza4SdE5jVSZLnQjMRXJg3VAGc8pHqbaMLob"
        ],
        "license": "UNLICENSED"
      },
      "../eignlayr-contracts/src/contracts/interfaces/IQuorumRegistry.sol": {
        "keccak256": "0xe666a9120ceaf3278c34cebd7c33ee27a14788752b70f08fccc252971a53d6e3",
        "urls": [
          "bzz-raw://3f3df7d1504adc6f3c4305150c980d27c35feea7d1b9119b86a5bdb442b8f36e",
          "dweb:/ipfs/QmQqwGVbZ8mV7aFwe9rQ9hiAcXonmtyD2Kq22eNfcXhnkw"
        ],
        "license": "UNLICENSED"
      },
      "../eignlayr-contracts/src/contracts/interfaces/IRegistry.sol": {
        "keccak256": "0x5bd8be0f70b0e69f94e069c52417079ba2b9e73acd5f659c09b22142dc6c59f5",
        "urls": [
          "bzz-raw://e32791f0147f40738d8a27c86e83c2207d5c1d1654c2f730629b3be587963cc4",
          "dweb:/ipfs/Qma4VYzA9jkLxWQCgCFm911rQodoSboaJxnNqi4AaSzftp"
        ],
        "license": "UNLICENSED"
      },
      "../eignlayr-contracts/src/contracts/interfaces/IServiceManager.sol": {
        "keccak256": "0xded81693805764888f8d1daa8afb600969d4286f3d5ecfa92e99b9446b400ad4",
        "urls": [
          "bzz-raw://8e0d0704fa8e64543abce318eaf99c53f75215db76cf873e6a6311a4eb5274b2",
          "dweb:/ipfs/Qmd96t8WrNFRY5fqsPtkCaz28j3mvZj3fpc4qp6xXe9wgb"
        ],
        "license": "UNLICENSED"
      },
      "../eignlayr-contracts/src/contracts/libraries/BN254.sol": {
        "keccak256": "0xf677d6de3e5b3688eb08ac23e116f4d926d2ccc39039571e7c90aabe8bd5fccb",
        "urls": [
          "bzz-raw://0d0bfb10bc9b677311b0de35005549a8b772b38ce84b011115eb30466cc92646",
          "dweb:/ipfs/QmSA4yYCaoB1V6n1PYEJ3PEnd8Yi6xrKdihMJtqyGPfWJL"
        ],
        "license": "UNLICENSED AND MIT"
      },
      "../eignlayr-contracts/src/contracts/libraries/BytesLib.sol": {
        "keccak256": "0x8484c1dc5ba4a3b6abceb4965227d945787305175ef1e55a513d8f097f5fd95e",
        "urls": [
          "bzz-raw://fb6824b1d81175e73868498f985533654b1f4d4ac6705ea8f2a9e12598759ec3",
          "dweb:/ipfs/QmdweCgj6cp1bBfXGvQrVVaN1tgiAY4DUbTiGXjtx4eu13"
        ],
        "license": "Unlicense"
      },
      "../eignlayr-contracts/src/contracts/libraries/Merkle.sol": {
        "keccak256": "0x12f01f5daf5a4c185b927ef195dadc2ed51ab5e22a713283cd6b261026ab5930",
        "urls": [
          "bzz-raw://182e651a91bdadcc3c6d3d23d04902f8efd5cdce3a2d31decc0b2f29fa3dd865",
          "dweb:/ipfs/QmfZNVikCpCUU6HtSC92rrMujHW3Me31R75f1TSMccmggx"
        ],
        "license": "UNLICENCED"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27",
        "urls": [
          "bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935",
          "dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
        "keccak256": "0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183",
        "urls": [
          "bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06",
          "dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
        "keccak256": "0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329",
        "urls": [
          "bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95",
          "dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
        "keccak256": "0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238",
        "urls": [
          "bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6",
          "dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
        "urls": [
          "bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
          "dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
        ],
        "license": "MIT"
      },
      "src/contracts/core/DataLayrBombVerifier.sol": {
        "keccak256": "0x9a88bc75e643512a9139003ff96959a5ca2f533ffe7f5d9e15881ad492bcaff6",
        "urls": [
          "bzz-raw://d74a076d5d6ebcf536aec282938a0876566bec3fc18b57048188e56fccca0be0",
          "dweb:/ipfs/QmcSXDTLjsv41RZUF58kfKiKh3YG8EZ6ozTNWyXqcGtFyN"
        ],
        "license": "UNLICENSED"
      },
      "src/contracts/core/DataLayrChallenge.sol": {
        "keccak256": "0x18012b05ad3c19b8b4a6bf8e4a13ed1e6f0e75b7b84c278bb4947e015d02b239",
        "urls": [
          "bzz-raw://451211b6c0e3750f291b90d532c8a2fdb24f528ac28b2478ba868ef9dc30f1a2",
          "dweb:/ipfs/Qmb4TJQErysBsxe6CKpJE9ecQLWsM8DRtwB5bdsQc67YxY"
        ],
        "license": "UNLICENSED"
      },
      "src/contracts/core/DataLayrChallengeUtils.sol": {
        "keccak256": "0x9d5d22979a5537a16cf9f6ab44ac867c97f5162f2ccbf65e9fdc8c80e7c474e3",
        "urls": [
          "bzz-raw://6fe307be1450444b667b19a8a4f6f8ab566cf6cee6ef9679fb7f831fb4bf8a28",
          "dweb:/ipfs/QmYeQ8v6xFECepV432EVcPaqKvSZjm8VnKaTfS8iBKEh7h"
        ],
        "license": "UNLICENSED"
      },
      "src/contracts/core/DataLayrServiceManagerStorage.sol": {
        "keccak256": "0x6beaaeb0a916a3df2e4122c3d1c918583831986a7aacefb8f3347fd13b72d46a",
        "urls": [
          "bzz-raw://b56c3fe3d5173b497eabce323d4a4caa966a25c7889c905834ef3422c2f9a51b",
          "dweb:/ipfs/QmWDMB31chrFDGryThxcSUUvvvh3iqATksNspACHVfrcXz"
        ],
        "license": "UNLICENSED"
      },
      "src/contracts/interfaces/IDataLayrServiceManager.sol": {
        "keccak256": "0x5d49a50c80b5a38ff6d8ae09494793d52fd05c4233b4c55940da54202a4dfe89",
        "urls": [
          "bzz-raw://a5a1d28d3217eb8154bb62c58d97beec073bffdcff779000390ca0af7dc5bf88",
          "dweb:/ipfs/QmR9aHtgFsyMTZZu86dPyZbP3QE88L8g6e6N2iZDvdUiZA"
        ],
        "license": "UNLICENSED"
      },
      "src/contracts/libraries/DataStoreUtils.sol": {
        "keccak256": "0xc121f108b4d714d7623536aeea7e1ba298e671a5758d4c8a2d22816e9dbed41f",
        "urls": [
          "bzz-raw://e3efef70832be4bfce0a72885730c92adab53015bacd41a79eddb88c399265c0",
          "dweb:/ipfs/QmTAmg9VvtvKzBHeiQexwQXNJYKtVs1Gdry2dKhrcR3xWz"
        ],
        "license": "UNLICENSED"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/contracts/core/DataLayrServiceManagerStorage.sol",
    "id": 48501,
    "exportedSymbols": {
      "Address": [
        41608
      ],
      "AddressUpgradeable": [
        39135
      ],
      "BN254": [
        1359
      ],
      "BytesLib": [
        1692
      ],
      "DataLayrBombVerifier": [
        44999
      ],
      "DataLayrChallenge": [
        45777
      ],
      "DataLayrChallengeUtils": [
        47307
      ],
      "DataLayrServiceManagerStorage": [
        48500
      ],
      "DataStoreUtils": [
        49039
      ],
      "IDataLayrServiceManager": [
        48672
      ],
      "IDelayedService": [
        9
      ],
      "IERC20": [
        40863
      ],
      "IERC20Permit": [
        40968
      ],
      "IEigenLayrDelegation": [
        121
      ],
      "IInvestmentManager": [
        229
      ],
      "IInvestmentStrategy": [
        323
      ],
      "IQuorumRegistry": [
        467
      ],
      "IRegistry": [
        54512
      ],
      "IServiceManager": [
        577
      ],
      "Initializable": [
        38778
      ],
      "Merkle": [
        1948
      ],
      "SafeERC20": [
        41278
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:5177:115",
    "nodes": [
      {
        "id": 48424,
        "nodeType": "PragmaDirective",
        "src": "39:23:115",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".9"
        ]
      },
      {
        "id": 48425,
        "nodeType": "ImportDirective",
        "src": "64:56:115",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 48501,
        "sourceUnit": 40864,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 48426,
        "nodeType": "ImportDirective",
        "src": "121:67:115",
        "nodes": [],
        "absolutePath": "../eignlayr-contracts/src/contracts/interfaces/IEigenLayrDelegation.sol",
        "file": "@eigenlayer/contracts/interfaces/IEigenLayrDelegation.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 48501,
        "sourceUnit": 122,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 48427,
        "nodeType": "ImportDirective",
        "src": "189:62:115",
        "nodes": [],
        "absolutePath": "../eignlayr-contracts/src/contracts/interfaces/IServiceManager.sol",
        "file": "@eigenlayer/contracts/interfaces/IServiceManager.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 48501,
        "sourceUnit": 578,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 48428,
        "nodeType": "ImportDirective",
        "src": "252:65:115",
        "nodes": [],
        "absolutePath": "../eignlayr-contracts/src/contracts/interfaces/IInvestmentManager.sol",
        "file": "@eigenlayer/contracts/interfaces/IInvestmentManager.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 48501,
        "sourceUnit": 230,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 48429,
        "nodeType": "ImportDirective",
        "src": "319:51:115",
        "nodes": [],
        "absolutePath": "src/contracts/interfaces/IDataLayrServiceManager.sol",
        "file": "../interfaces/IDataLayrServiceManager.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 48501,
        "sourceUnit": 48673,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 48430,
        "nodeType": "ImportDirective",
        "src": "372:33:115",
        "nodes": [],
        "absolutePath": "src/contracts/core/DataLayrChallenge.sol",
        "file": "./DataLayrChallenge.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 48501,
        "sourceUnit": 45778,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 48431,
        "nodeType": "ImportDirective",
        "src": "406:36:115",
        "nodes": [],
        "absolutePath": "src/contracts/core/DataLayrBombVerifier.sol",
        "file": "./DataLayrBombVerifier.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 48501,
        "sourceUnit": 45000,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 48500,
        "nodeType": "ContractDefinition",
        "src": "643:4572:115",
        "nodes": [
          {
            "id": 48437,
            "nodeType": "VariableDeclaration",
            "src": "741:46:115",
            "nodes": [],
            "constant": true,
            "functionSelector": "a3c7eaf0",
            "mutability": "constant",
            "name": "BIP_MULTIPLIER",
            "nameLocation": "765:14:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 48435,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "741:7:115",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3130303030",
              "id": 48436,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "782:5:115",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_10000_by_1",
                "typeString": "int_const 10000"
              },
              "value": "10000"
            },
            "visibility": "public"
          },
          {
            "id": 48441,
            "nodeType": "VariableDeclaration",
            "src": "920:48:115",
            "nodes": [],
            "baseFunctions": [
              48618
            ],
            "constant": true,
            "documentation": {
              "id": 48438,
              "nodeType": "StructuredDocumentation",
              "src": "847:68:115",
              "text": "@notice Unit of measure (in time) for the duration of DataStores"
            },
            "functionSelector": "31a219c5",
            "mutability": "constant",
            "name": "DURATION_SCALE",
            "nameLocation": "944:14:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 48439,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "920:7:115",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31",
              "id": 48440,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "961:7:115",
              "subdenomination": "hours",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_3600_by_1",
                "typeString": "int_const 3600"
              },
              "value": "1"
            },
            "visibility": "public"
          },
          {
            "id": 48445,
            "nodeType": "VariableDeclaration",
            "src": "1081:58:115",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 48442,
              "nodeType": "StructuredDocumentation",
              "src": "974:102:115",
              "text": "@notice The maximum number of DataStores of a single duration that can be stored in a single block"
            },
            "functionSelector": "5f87abbb",
            "mutability": "constant",
            "name": "NUM_DS_PER_BLOCK_PER_DURATION",
            "nameLocation": "1105:29:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 48443,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1081:7:115",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3230",
              "id": 48444,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1137:2:115",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_20_by_1",
                "typeString": "int_const 20"
              },
              "value": "20"
            },
            "visibility": "public"
          },
          {
            "id": 48449,
            "nodeType": "VariableDeclaration",
            "src": "1236:48:115",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 48446,
              "nodeType": "StructuredDocumentation",
              "src": "1145:86:115",
              "text": "@notice The shortest allowed duration of a DataStore, measured in `DURATION_SCALE`"
            },
            "functionSelector": "1fdab6e4",
            "mutability": "constant",
            "name": "MIN_DATASTORE_DURATION",
            "nameLocation": "1258:22:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 48447,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "1236:5:115",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "value": {
              "hexValue": "31",
              "id": 48448,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1283:1:115",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "public"
          },
          {
            "id": 48453,
            "nodeType": "VariableDeclaration",
            "src": "1380:48:115",
            "nodes": [],
            "baseFunctions": [
              48624
            ],
            "constant": true,
            "documentation": {
              "id": 48450,
              "nodeType": "StructuredDocumentation",
              "src": "1290:85:115",
              "text": "@notice The longest allowed duration of a DataStore, measured in `DURATION_SCALE`"
            },
            "functionSelector": "578ae5a1",
            "mutability": "constant",
            "name": "MAX_DATASTORE_DURATION",
            "nameLocation": "1402:22:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 48451,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "1380:5:115",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "value": {
              "hexValue": "37",
              "id": 48452,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1427:1:115",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_7_by_1",
                "typeString": "int_const 7"
              },
              "value": "7"
            },
            "visibility": "public"
          },
          {
            "id": 48457,
            "nodeType": "VariableDeclaration",
            "src": "1485:44:115",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 48454,
              "nodeType": "StructuredDocumentation",
              "src": "1435:45:115",
              "text": "@notice Minimum DataStore size, in bytes."
            },
            "mutability": "constant",
            "name": "MIN_STORE_SIZE",
            "nameLocation": "1510:14:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint32",
              "typeString": "uint32"
            },
            "typeName": {
              "id": 48455,
              "name": "uint32",
              "nodeType": "ElementaryTypeName",
              "src": "1485:6:115",
              "typeDescriptions": {
                "typeIdentifier": "t_uint32",
                "typeString": "uint32"
              }
            },
            "value": {
              "hexValue": "3332",
              "id": 48456,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1527:2:115",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_32_by_1",
                "typeString": "int_const 32"
              },
              "value": "32"
            },
            "visibility": "internal"
          },
          {
            "id": 48461,
            "nodeType": "VariableDeclaration",
            "src": "1585:45:115",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 48458,
              "nodeType": "StructuredDocumentation",
              "src": "1535:45:115",
              "text": "@notice Maximum DataStore size, in bytes."
            },
            "mutability": "constant",
            "name": "MAX_STORE_SIZE",
            "nameLocation": "1610:14:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint32",
              "typeString": "uint32"
            },
            "typeName": {
              "id": 48459,
              "name": "uint32",
              "nodeType": "ElementaryTypeName",
              "src": "1585:6:115",
              "typeDescriptions": {
                "typeIdentifier": "t_uint32",
                "typeString": "uint32"
              }
            },
            "value": {
              "hexValue": "346539",
              "id": 48460,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1627:3:115",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_4000000000_by_1",
                "typeString": "int_const 4000000000"
              },
              "value": "4e9"
            },
            "visibility": "internal"
          },
          {
            "id": 48465,
            "nodeType": "VariableDeclaration",
            "src": "2072:48:115",
            "nodes": [],
            "baseFunctions": [
              8
            ],
            "constant": true,
            "documentation": {
              "id": 48462,
              "nodeType": "StructuredDocumentation",
              "src": "1636:431:115",
              "text": " @notice The maximum amount of blocks in the past that the service will consider stake amounts to still be 'valid'.\n @dev To clarify edge cases, the middleware can look `BLOCK_STALE_MEASURE` blocks into the past, i.e. it may trust stakes from the interval\n [block.number - BLOCK_STALE_MEASURE, block.number] (specifically, *inclusive* of the block that is `BLOCK_STALE_MEASURE` before the current one)"
            },
            "functionSelector": "5e8b3f2d",
            "mutability": "constant",
            "name": "BLOCK_STALE_MEASURE",
            "nameLocation": "2095:19:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint32",
              "typeString": "uint32"
            },
            "typeName": {
              "id": 48463,
              "name": "uint32",
              "nodeType": "ElementaryTypeName",
              "src": "2072:6:115",
              "typeDescriptions": {
                "typeIdentifier": "t_uint32",
                "typeString": "uint32"
              }
            },
            "value": {
              "hexValue": "313530",
              "id": 48464,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2117:3:115",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_150_by_1",
                "typeString": "int_const 150"
              },
              "value": "150"
            },
            "visibility": "public"
          },
          {
            "id": 48468,
            "nodeType": "VariableDeclaration",
            "src": "2274:32:115",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 48466,
              "nodeType": "StructuredDocumentation",
              "src": "2127:142:115",
              "text": "@notice service fee that will be paid out by the disperser to the DataLayr nodes for storing data, per byte stored per unit time (second)."
            },
            "functionSelector": "d21eed4f",
            "mutability": "mutable",
            "name": "feePerBytePerTime",
            "nameLocation": "2289:17:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 48467,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2274:7:115",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "id": 48472,
            "nodeType": "VariableDeclaration",
            "src": "2514:59:115",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 48469,
              "nodeType": "StructuredDocumentation",
              "src": "2313:196:115",
              "text": " @notice this is the maximum amount of time that can pass between an intitiation of a DataStore and its confirmation.\n         a max is set to limit greiving cause to nodes"
            },
            "functionSelector": "4d53cebb",
            "mutability": "constant",
            "name": "confirmDataStoreTimeout",
            "nameLocation": "2537:23:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint32",
              "typeString": "uint32"
            },
            "typeName": {
              "id": 48470,
              "name": "uint32",
              "nodeType": "ElementaryTypeName",
              "src": "2514:6:115",
              "typeDescriptions": {
                "typeIdentifier": "t_uint32",
                "typeString": "uint32"
              }
            },
            "value": {
              "hexValue": "3330",
              "id": 48471,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2563:10:115",
              "subdenomination": "minutes",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1800_by_1",
                "typeString": "int_const 1800"
              },
              "value": "30"
            },
            "visibility": "public"
          },
          {
            "id": 48476,
            "nodeType": "VariableDeclaration",
            "src": "2670:41:115",
            "nodes": [],
            "baseFunctions": [
              48606
            ],
            "constant": true,
            "documentation": {
              "id": 48473,
              "nodeType": "StructuredDocumentation",
              "src": "2620:45:115",
              "text": "@notice number of leaves in the root tree"
            },
            "functionSelector": "046bf4a6",
            "mutability": "constant",
            "name": "numPowersOfTau",
            "nameLocation": "2693:14:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint48",
              "typeString": "uint48"
            },
            "typeName": {
              "id": 48474,
              "name": "uint48",
              "nodeType": "ElementaryTypeName",
              "src": "2670:6:115",
              "typeDescriptions": {
                "typeIdentifier": "t_uint48",
                "typeString": "uint48"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 48475,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2710:1:115",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "id": 48480,
            "nodeType": "VariableDeclaration",
            "src": "2767:45:115",
            "nodes": [],
            "baseFunctions": [
              48612
            ],
            "constant": true,
            "documentation": {
              "id": 48477,
              "nodeType": "StructuredDocumentation",
              "src": "2717:45:115",
              "text": "@notice number of layers in the root tree"
            },
            "functionSelector": "a50017a1",
            "mutability": "constant",
            "name": "log2NumPowersOfTau",
            "nameLocation": "2790:18:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint48",
              "typeString": "uint48"
            },
            "typeName": {
              "id": 48478,
              "name": "uint48",
              "nodeType": "ElementaryTypeName",
              "src": "2767:6:115",
              "typeDescriptions": {
                "typeIdentifier": "t_uint48",
                "typeString": "uint48"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 48479,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2811:1:115",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "id": 48485,
            "nodeType": "VariableDeclaration",
            "src": "4445:54:115",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 48481,
              "nodeType": "StructuredDocumentation",
              "src": "2932:1425:115",
              "text": " @notice For a given l, zeroPolynomialCommitmentMerkleRoots[l] represents the root of merkle tree\nzeroPolynomialCommitmentMerkleRoots[l]\n:\n:\n____________ ....                             .... ____________\n|                                                               |\n|                                                               |\n_____h(h_1||h_2)______                                        ____h(h_{k-1}||h_{k}__________\n|                      |                                      |                              |\n|                      |                                      |                              |\nh_1                    h_2                                 h_{k-1}                         h_{k}\n|                      |                                      |                              |\n|                      |                                      |                              |\nhash(x^l - w^l)       hash(x^l - (w^2)^l)                   hash(x^l - (w^{k-1})^l)        hash(x^l - (w^k)^l)\nThis tree is computed off-chain and only the Merkle roots are stored on-chain."
            },
            "functionSelector": "3367a3fb",
            "mutability": "mutable",
            "name": "zeroPolynomialCommitmentMerkleRoots",
            "nameLocation": "4464:35:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_bytes32_$32_storage",
              "typeString": "bytes32[32]"
            },
            "typeName": {
              "baseType": {
                "id": 48482,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "4445:7:115",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "id": 48484,
              "length": {
                "hexValue": "3332",
                "id": 48483,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "4453:2:115",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_32_by_1",
                  "typeString": "int_const 32"
                },
                "value": "32"
              },
              "nodeType": "ArrayTypeName",
              "src": "4445:11:115",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_bytes32_$32_storage_ptr",
                "typeString": "bytes32[32]"
              }
            },
            "visibility": "public"
          },
          {
            "id": 48490,
            "nodeType": "VariableDeclaration",
            "src": "4745:60:115",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 48486,
              "nodeType": "StructuredDocumentation",
              "src": "4506:234:115",
              "text": " @notice mapping between the dataStoreId for a particular assertion of data into\n DataLayr and a compressed information on the signatures of the DataLayr\n nodes who signed up to be the part of the quorum."
            },
            "functionSelector": "fc2c6058",
            "mutability": "mutable",
            "name": "dataStoreIdToSignatureHash",
            "nameLocation": "4779:26:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint32_$_t_bytes32_$",
              "typeString": "mapping(uint32 => bytes32)"
            },
            "typeName": {
              "id": 48489,
              "keyType": {
                "id": 48487,
                "name": "uint32",
                "nodeType": "ElementaryTypeName",
                "src": "4753:6:115",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint32",
                  "typeString": "uint32"
                }
              },
              "nodeType": "Mapping",
              "src": "4745:26:115",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint32_$_t_bytes32_$",
                "typeString": "mapping(uint32 => bytes32)"
              },
              "valueType": {
                "id": 48488,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "4763:7:115",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 48499,
            "nodeType": "VariableDeclaration",
            "src": "5083:129:115",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 48491,
              "nodeType": "StructuredDocumentation",
              "src": "4811:267:115",
              "text": " @notice Mapping from duration to timestamp to all of the ids of datastores that were initialized during that timestamp.\n The third nested mapping just keeps track of a fixed number of datastores of a certain duration that can be in that block"
            },
            "functionSelector": "1bd2b3cf",
            "mutability": "mutable",
            "name": "dataStoreHashesForDurationAtTimestamp",
            "nameLocation": "5175:37:115",
            "scope": 48500,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint8_$_t_mapping$_t_uint256_$_t_array$_t_bytes32_$20_storage_$_$",
              "typeString": "mapping(uint8 => mapping(uint256 => bytes32[20]))"
            },
            "typeName": {
              "id": 48498,
              "keyType": {
                "id": 48492,
                "name": "uint8",
                "nodeType": "ElementaryTypeName",
                "src": "5091:5:115",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                }
              },
              "nodeType": "Mapping",
              "src": "5083:76:115",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint8_$_t_mapping$_t_uint256_$_t_array$_t_bytes32_$20_storage_$_$",
                "typeString": "mapping(uint8 => mapping(uint256 => bytes32[20]))"
              },
              "valueType": {
                "id": 48497,
                "keyType": {
                  "id": 48493,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "5108:7:115",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "5100:58:115",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_bytes32_$20_storage_$",
                  "typeString": "mapping(uint256 => bytes32[20])"
                },
                "valueType": {
                  "baseType": {
                    "id": 48494,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5119:7:115",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 48496,
                  "length": {
                    "id": 48495,
                    "name": "NUM_DS_PER_BLOCK_PER_DURATION",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 48445,
                    "src": "5127:29:115",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "ArrayTypeName",
                  "src": "5119:38:115",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$20_storage_ptr",
                    "typeString": "bytes32[20]"
                  }
                }
              }
            },
            "visibility": "public"
          }
        ],
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 48433,
              "name": "IDataLayrServiceManager",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 48672,
              "src": "694:23:115"
            },
            "id": 48434,
            "nodeType": "InheritanceSpecifier",
            "src": "694:23:115"
          }
        ],
        "canonicalName": "DataLayrServiceManagerStorage",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 48432,
          "nodeType": "StructuredDocumentation",
          "src": "444:198:115",
          "text": " @title Storage variables for the `DataLayrServiceManager` contract.\n @author Layr Labs, Inc.\n @notice This storage contract is separate from the logic to simplify the upgrade process."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          48500,
          48672,
          9,
          577
        ],
        "name": "DataLayrServiceManagerStorage",
        "nameLocation": "661:29:115",
        "scope": 48501,
        "usedErrors": []
      }
    ],
    "license": "UNLICENSED"
  },
  "id": 115
}